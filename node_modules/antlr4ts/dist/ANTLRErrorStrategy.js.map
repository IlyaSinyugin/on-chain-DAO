{"version":3,"file":"ANTLRErrorStrategy.js","sourceRoot":"","sources":["../../src/ANTLRErrorStrategy.ts"],"names":[],"mappings":";AAAA;;;GAGG","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:48.9102174-07:00\n\nimport { Parser } from \"./Parser\";\nimport { Token } from \"./Token\";\nimport { RecognitionException } from \"./RecognitionException\";\n\n/**\n * The interface for defining strategies to deal with syntax errors encountered\n * during a parse by ANTLR-generated parsers. We distinguish between three\n * different kinds of errors:\n *\n * * The parser could not figure out which path to take in the ATN (none of\n *   the available alternatives could possibly match)\n * * The current input does not match what we were looking for\n * * A predicate evaluated to false\n *\n * Implementations of this interface report syntax errors by calling\n * {@link Parser#notifyErrorListeners}.\n *\n * TODO: what to do about lexers\n */\nexport interface ANTLRErrorStrategy {\n\t/**\n\t * Reset the error handler state for the specified `recognizer`.\n\t * @param recognizer the parser instance\n\t */\n\treset(/*@NotNull*/ recognizer: Parser): void;\n\n\t/**\n\t * This method is called when an unexpected symbol is encountered during an\n\t * inline match operation, such as {@link Parser#match}. If the error\n\t * strategy successfully recovers from the match failure, this method\n\t * returns the {@link Token} instance which should be treated as the\n\t * successful result of the match.\n\t *\n\t * This method handles the consumption of any tokens - the caller should\n\t * *not* call {@link Parser#consume} after a successful recovery.\n\t *\n\t * Note that the calling code will not report an error if this method\n\t * returns successfully. The error strategy implementation is responsible\n\t * for calling {@link Parser#notifyErrorListeners} as appropriate.\n\t *\n\t * @param recognizer the parser instance\n\t * @ if the error strategy was not able to\n\t * recover from the unexpected input symbol\n\t */\n\trecoverInline(/*@NotNull*/ recognizer: Parser): Token;\n\n\t/**\n\t * This method is called to recover from exception `e`. This method is\n\t * called after {@link #reportError} by the default exception handler\n\t * generated for a rule method.\n\t *\n\t * @see #reportError\n\t *\n\t * @param recognizer the parser instance\n\t * @param e the recognition exception to recover from\n\t * @ if the error strategy could not recover from\n\t * the recognition exception\n\t */\n\trecover(/*@NotNull*/ recognizer: Parser, /*@NotNull*/ e: RecognitionException): void;\n\n\t/**\n\t * This method provides the error handler with an opportunity to handle\n\t * syntactic or semantic errors in the input stream before they result in a\n\t * {@link RecognitionException}.\n\t *\n\t * The generated code currently contains calls to {@link #sync} after\n\t * entering the decision state of a closure block (`(...)*` or\n\t * `(...)+`).\n\t *\n\t * For an implementation based on Jim Idle's \"magic sync\" mechanism, see\n\t * {@link DefaultErrorStrategy#sync}.\n\t *\n\t * @see DefaultErrorStrategy#sync\n\t *\n\t * @param recognizer the parser instance\n\t * @ if an error is detected by the error\n\t * strategy but cannot be automatically recovered at the current state in\n\t * the parsing process\n\t */\n\tsync(/*@NotNull*/ recognizer: Parser): void;\n\n\t/**\n\t * Tests whether or not `recognizer` is in the process of recovering\n\t * from an error. In error recovery mode, {@link Parser#consume} adds\n\t * symbols to the parse tree by calling\n\t * {@link Parser#createErrorNode(ParserRuleContext, Token)} then\n\t * {@link ParserRuleContext#addErrorNode(ErrorNode)} instead of\n\t * {@link Parser#createTerminalNode(ParserRuleContext, Token)}.\n\t *\n\t * @param recognizer the parser instance\n\t * @returns `true` if the parser is currently recovering from a parse\n\t * error, otherwise `false`\n\t */\n\tinErrorRecoveryMode(/*@NotNull*/ recognizer: Parser): boolean;\n\n\t/**\n\t * This method is called by when the parser successfully matches an input\n\t * symbol.\n\t *\n\t * @param recognizer the parser instance\n\t */\n\treportMatch(/*@NotNull*/ recognizer: Parser): void;\n\n\t/**\n\t * Report any kind of {@link RecognitionException}. This method is called by\n\t * the default exception handler generated for a rule method.\n\t *\n\t * @param recognizer the parser instance\n\t * @param e the recognition exception to report\n\t */\n\treportError(\n\t\t/*@NotNull*/ recognizer: Parser,\n\t\t/*@NotNull*/ e: RecognitionException): void;\n}\n"]}