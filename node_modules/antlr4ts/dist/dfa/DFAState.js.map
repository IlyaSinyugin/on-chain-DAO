{"version":3,"file":"DFAState.js","sourceRoot":"","sources":["../../../src/dfa/DFAState.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:38.7771056-07:00\n\nimport { AcceptStateInfo } from \"./AcceptStateInfo\";\nimport { ATN } from \"../atn/ATN\";\nimport { ATNConfigSet } from \"../atn/ATNConfigSet\";\nimport { BitSet } from \"../misc/BitSet\";\nimport { LexerActionExecutor } from \"../atn/LexerActionExecutor\";\nimport { MurmurHash } from \"../misc/MurmurHash\";\nimport { NotNull, Override } from \"../Decorators\";\nimport { PredictionContext } from \"../atn/PredictionContext\";\nimport { SemanticContext } from \"../atn/SemanticContext\";\n\nimport * as assert from \"assert\";\n\n/** A DFA state represents a set of possible ATN configurations.\n *  As Aho, Sethi, Ullman p. 117 says \"The DFA uses its state\n *  to keep track of all possible states the ATN can be in after\n *  reading each input symbol.  That is to say, after reading\n *  input a1a2..an, the DFA is in a state that represents the\n *  subset T of the states of the ATN that are reachable from the\n *  ATN's start state along some path labeled a1a2..an.\"\n *  In conventional NFA&rarr;DFA conversion, therefore, the subset T\n *  would be a bitset representing the set of states the\n *  ATN could be in.  We need to track the alt predicted by each\n *  state as well, however.  More importantly, we need to maintain\n *  a stack of states, tracking the closure operations as they\n *  jump from rule to rule, emulating rule invocations (method calls).\n *  I have to add a stack to simulate the proper lookahead sequences for\n *  the underlying LL grammar from which the ATN was derived.\n *\n *  I use a set of ATNConfig objects not simple states.  An ATNConfig\n *  is both a state (ala normal conversion) and a RuleContext describing\n *  the chain of rules (if any) followed to arrive at that state.\n *\n *  A DFA state may have multiple references to a particular state,\n *  but with different ATN contexts (with same or different alts)\n *  meaning that state was reached via a different set of rule invocations.\n */\nexport class DFAState {\n\tpublic stateNumber: number = -1;\n\n\t@NotNull\n\tpublic configs: ATNConfigSet;\n\n\t/** `edges.get(symbol)` points to target of symbol.\n\t */\n\t@NotNull\n\tprivate readonly edges: Map<number, DFAState>;\n\n\tprivate _acceptStateInfo: AcceptStateInfo | undefined;\n\n\t/** These keys for these edges are the top level element of the global context. */\n\t@NotNull\n\tprivate readonly contextEdges: Map<number, DFAState>;\n\n\t/** Symbols in this set require a global context transition before matching an input symbol. */\n\tprivate contextSymbols: BitSet | undefined;\n\n\t/**\n\t * This list is computed by {@link ParserATNSimulator#predicateDFAState}.\n\t */\n\tpublic predicates: DFAState.PredPrediction[] | undefined;\n\n\t/**\n\t * Constructs a new `DFAState`.\n\t *\n\t * @param configs The set of ATN configurations defining this state.\n\t */\n\tconstructor(configs: ATNConfigSet) {\n\t\tthis.configs = configs;\n\t\tthis.edges = new Map<number, DFAState>();\n\t\tthis.contextEdges = new Map<number, DFAState>();\n\t}\n\n\tget isContextSensitive(): boolean {\n\t\treturn !!this.contextSymbols;\n\t}\n\n\tpublic isContextSymbol(symbol: number): boolean {\n\t\tif (!this.isContextSensitive) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.contextSymbols!.get(symbol);\n\t}\n\n\tpublic setContextSymbol(symbol: number): void {\n\t\tassert(this.isContextSensitive);\n\t\tthis.contextSymbols!.set(symbol);\n\t}\n\n\tpublic setContextSensitive(atn: ATN): void {\n\t\tassert(!this.configs.isOutermostConfigSet);\n\t\tif (this.isContextSensitive) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.contextSymbols) {\n\t\t\tthis.contextSymbols = new BitSet();\n\t\t}\n\t}\n\n\tget acceptStateInfo(): AcceptStateInfo | undefined {\n\t\treturn this._acceptStateInfo;\n\t}\n\n\tset acceptStateInfo(acceptStateInfo: AcceptStateInfo | undefined) {\n\t\tthis._acceptStateInfo = acceptStateInfo;\n\t}\n\n\tget isAcceptState(): boolean {\n\t\treturn !!this._acceptStateInfo;\n\t}\n\n\tget prediction(): number {\n\t\tif (!this._acceptStateInfo) {\n\t\t\treturn ATN.INVALID_ALT_NUMBER;\n\t\t}\n\n\t\treturn this._acceptStateInfo.prediction;\n\t}\n\n\tget lexerActionExecutor(): LexerActionExecutor | undefined {\n\t\tif (!this._acceptStateInfo) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this._acceptStateInfo.lexerActionExecutor;\n\t}\n\n\tpublic getTarget(symbol: number): DFAState | undefined {\n\t\treturn this.edges.get(symbol);\n\t}\n\n\tpublic setTarget(symbol: number, target: DFAState): void {\n\t\tthis.edges.set(symbol, target);\n\t}\n\n\tpublic getEdgeMap(): Map<number, DFAState> {\n\t\treturn this.edges;\n\t}\n\n\tpublic getContextTarget(invokingState: number): DFAState | undefined {\n\t\tif (invokingState === PredictionContext.EMPTY_FULL_STATE_KEY) {\n\t\t\tinvokingState = -1;\n\t\t}\n\n\t\treturn this.contextEdges.get(invokingState);\n\t}\n\n\tpublic setContextTarget(invokingState: number, target: DFAState): void {\n\t\tif (!this.isContextSensitive) {\n\t\t\tthrow new Error(\"The state is not context sensitive.\");\n\t\t}\n\n\t\tif (invokingState === PredictionContext.EMPTY_FULL_STATE_KEY) {\n\t\t\tinvokingState = -1;\n\t\t}\n\n\t\tthis.contextEdges.set(invokingState, target);\n\t}\n\n\tpublic getContextEdgeMap(): Map<number, DFAState> {\n\t\tlet map = new Map<number, DFAState>(this.contextEdges);\n\t\tlet existing = map.get(-1);\n\t\tif (existing !== undefined) {\n\t\t\tif (map.size === 1) {\n\t\t\t\tlet result = new Map<number, DFAState>();\n\t\t\t\tresult.set(PredictionContext.EMPTY_FULL_STATE_KEY, existing);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmap.delete(-1);\n\t\t\t\tmap.set(PredictionContext.EMPTY_FULL_STATE_KEY, existing);\n\t\t\t}\n\t\t}\n\n\t\treturn map;\n\t}\n\n\t@Override\n\tpublic hashCode(): number {\n\t\tlet hash: number = MurmurHash.initialize(7);\n\t\thash = MurmurHash.update(hash, this.configs.hashCode());\n\t\thash = MurmurHash.finish(hash, 1);\n\t\treturn hash;\n\t}\n\n\t/**\n\t * Two {@link DFAState} instances are equal if their ATN configuration sets\n\t * are the same. This method is used to see if a state already exists.\n\t *\n\t * Because the number of alternatives and number of ATN configurations are\n\t * finite, there is a finite number of DFA states that can be processed.\n\t * This is necessary to show that the algorithm terminates.\n\t *\n\t * Cannot test the DFA state numbers here because in\n\t * {@link ParserATNSimulator#addDFAState} we need to know if any other state\n\t * exists that has this exact set of ATN configurations. The\n\t * {@link #stateNumber} is irrelevant.\n\t */\n\t@Override\n\tpublic equals(o: any): boolean {\n\t\t// compare set of ATN configurations in this set with other\n\t\tif (this === o) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!(o instanceof DFAState)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet other: DFAState = o;\n\t\tlet sameSet: boolean = this.configs.equals(other.configs);\n//\t\tSystem.out.println(\"DFAState.equals: \"+configs+(sameSet?\"==\":\"!=\")+other.configs);\n\t\treturn sameSet;\n\t}\n\n\t@Override\n\tpublic toString(): string {\n\t\tlet buf = \"\";\n\t\tbuf += (this.stateNumber) + (\":\") + (this.configs);\n\t\tif (this.isAcceptState) {\n\t\t\tbuf += (\"=>\");\n\t\t\tif (this.predicates) {\n\t\t\t\tbuf += this.predicates;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbuf += (this.prediction);\n\t\t\t}\n\t\t}\n\t\treturn buf.toString();\n\t}\n}\n\nexport namespace DFAState {\n\t/** Map a predicate to a predicted alternative. */\n\texport class PredPrediction {\n\t\t@NotNull\n\t\tpublic pred: SemanticContext;  // never null; at least SemanticContext.NONE\n\t\tpublic alt: number;\n\t\tconstructor(@NotNull pred: SemanticContext, alt: number) {\n\t\t\tthis.alt = alt;\n\t\t\tthis.pred = pred;\n\t\t}\n\n\t\t@Override\n\t\tpublic toString(): string {\n\t\t\treturn \"(\" + this.pred + \", \" + this.alt + \")\";\n\t\t}\n\t}\n}\n"]}