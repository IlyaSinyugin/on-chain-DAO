{"version":3,"file":"DFASerializer.js","sourceRoot":"","sources":["../../../src/dfa/DFASerializer.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:38.5097925-07:00\n\nimport { ATN } from \"../atn/ATN\";\nimport { ATNSimulator } from \"../atn/ATNSimulator\";\nimport { ATNState } from \"../atn/ATNState\";\nimport { DFA } from \"./DFA\";\nimport { DFAState } from \"./DFAState\";\nimport { NotNull, Override } from \"../Decorators\";\nimport { PredictionContext } from \"../atn/PredictionContext\";\nimport { Recognizer } from \"../Recognizer\";\nimport { Vocabulary } from \"../Vocabulary\";\nimport { VocabularyImpl } from \"../VocabularyImpl\";\n\n/** A DFA walker that knows how to dump them to serialized strings. */\nexport class DFASerializer {\n\t@NotNull\n\tprivate dfa: DFA;\n\t@NotNull\n\tprivate vocabulary: Vocabulary;\n\n\tpublic ruleNames?: string[];\n\n\tpublic atn?: ATN;\n\n\tconstructor(/*@NotNull*/ dfa: DFA, /*@NotNull*/ vocabulary: Vocabulary);\n\tconstructor(/*@NotNull*/ dfa: DFA, /*@Nullable*/ parser: Recognizer<any, any> | undefined);\n\tconstructor(/*@NotNull*/ dfa: DFA, /*@NotNull*/ vocabulary: Vocabulary, /*@Nullable*/ ruleNames: string[] | undefined, /*@Nullable*/ atn: ATN | undefined);\n\tconstructor(dfa: DFA, vocabulary: Vocabulary | Recognizer<any, any> | undefined, ruleNames?: string[], atn?: ATN) {\n\t\tif (vocabulary instanceof Recognizer) {\n\t\t\truleNames = vocabulary.ruleNames;\n\t\t\tatn = vocabulary.atn;\n\t\t\tvocabulary = vocabulary.vocabulary;\n\t\t} else if (!vocabulary) {\n\t\t\tvocabulary = VocabularyImpl.EMPTY_VOCABULARY;\n\t\t}\n\n\t\tthis.dfa = dfa;\n\t\tthis.vocabulary = vocabulary;\n\t\tthis.ruleNames = ruleNames;\n\t\tthis.atn = atn;\n\t}\n\n\t@Override\n\tpublic toString(): string {\n\t\tif (!this.dfa.s0) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tlet buf = \"\";\n\n\t\tif (this.dfa.states) {\n\t\t\tlet states: DFAState[] = new Array<DFAState>(...this.dfa.states.toArray());\n\t\t\tstates.sort((o1, o2) => o1.stateNumber - o2.stateNumber);\n\n\t\t\tfor (let s of states) {\n\t\t\t\tlet edges: Map<number, DFAState> = s.getEdgeMap();\n\t\t\t\tlet edgeKeys = [...edges.keys()].sort((a, b) => a - b);\n\t\t\t\tlet contextEdges: Map<number, DFAState> = s.getContextEdgeMap();\n\t\t\t\tlet contextEdgeKeys = [...contextEdges.keys()].sort((a, b) => a - b);\n\t\t\t\tfor (let entry of edgeKeys) {\n\t\t\t\t\tlet value = edges.get(entry);\n\t\t\t\t\tif ((value == null || value === ATNSimulator.ERROR) && !s.isContextSymbol(entry)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet contextSymbol: boolean = false;\n\t\t\t\t\tbuf += (this.getStateString(s)) + (\"-\") + (this.getEdgeLabel(entry)) + (\"->\");\n\t\t\t\t\tif (s.isContextSymbol(entry)) {\n\t\t\t\t\t\tbuf += (\"!\");\n\t\t\t\t\t\tcontextSymbol = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet t: DFAState | undefined = value;\n\t\t\t\t\tif (t && t.stateNumber !== ATNSimulator.ERROR.stateNumber) {\n\t\t\t\t\t\tbuf += (this.getStateString(t)) + (\"\\n\");\n\t\t\t\t\t}\n\t\t\t\t\telse if (contextSymbol) {\n\t\t\t\t\t\tbuf += (\"ctx\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (s.isContextSensitive) {\n\t\t\t\t\tfor (let entry of contextEdgeKeys) {\n\t\t\t\t\t\tbuf += (this.getStateString(s))\n\t\t\t\t\t\t\t+ (\"-\")\n\t\t\t\t\t\t\t+ (this.getContextLabel(entry))\n\t\t\t\t\t\t\t+ (\"->\")\n\t\t\t\t\t\t\t+ (this.getStateString(contextEdges.get(entry)!))\n\t\t\t\t\t\t\t+ (\"\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet output: string = buf;\n\t\tif (output.length === 0) {\n\t\t\treturn \"\";\n\t\t}\n\t\t//return Utils.sortLinesInString(output);\n\t\treturn output;\n\t}\n\n\tprotected getContextLabel(i: number): string {\n\t\tif (i === PredictionContext.EMPTY_FULL_STATE_KEY) {\n\t\t\treturn \"ctx:EMPTY_FULL\";\n\t\t}\n\t\telse if (i === PredictionContext.EMPTY_LOCAL_STATE_KEY) {\n\t\t\treturn \"ctx:EMPTY_LOCAL\";\n\t\t}\n\n\t\tif (this.atn && i > 0 && i <= this.atn.states.length) {\n\t\t\tlet state: ATNState = this.atn.states[i];\n\t\t\tlet ruleIndex: number = state.ruleIndex;\n\t\t\tif (this.ruleNames && ruleIndex >= 0 && ruleIndex < this.ruleNames.length) {\n\t\t\t\treturn \"ctx:\" + String(i) + \"(\" + this.ruleNames[ruleIndex] + \")\";\n\t\t\t}\n\t\t}\n\n\t\treturn \"ctx:\" + String(i);\n\t}\n\n\tprotected getEdgeLabel(i: number): string {\n\t\treturn this.vocabulary.getDisplayName(i);\n\t}\n\n\tpublic getStateString(s: DFAState): string {\n\t\tif (s === ATNSimulator.ERROR) {\n\t\t\treturn \"ERROR\";\n\t\t}\n\n\t\tlet n: number = s.stateNumber;\n\t\tlet stateStr: string = \"s\" + n;\n\t\tif (s.isAcceptState) {\n\t\t\tif (s.predicates) {\n\t\t\t\tstateStr = \":s\" + n + \"=>\" + s.predicates;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstateStr = \":s\" + n + \"=>\" + s.prediction;\n\t\t\t}\n\t\t}\n\n\t\tif (s.isContextSensitive) {\n\t\t\tstateStr += \"*\";\n\t\t\tfor (let config of s.configs) {\n\t\t\t\tif (config.reachesIntoOuterContext) {\n\t\t\t\t\tstateStr += \"*\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn stateStr;\n\t}\n}\n"]}