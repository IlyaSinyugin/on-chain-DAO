{"version":3,"file":"AcceptStateInfo.js","sourceRoot":"","sources":["../../../src/dfa/AcceptStateInfo.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAMH;;;;;;;;GAQG;AACH;IAMC,YAAY,UAAkB,EAAE,mBAAyC;QACxE,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,oBAAoB,GAAG,mBAAmB,CAAC;IACjD,CAAC;IAED;;;;;;OAMG;IACH,IAAI,UAAU;QACb,OAAO,IAAI,CAAC,WAAW,CAAC;IACzB,CAAC;IAED;;;OAGG;IACH,IAAI,mBAAmB;QACtB,OAAO,IAAI,CAAC,oBAAoB,CAAC;IAClC,CAAC;CACD;AA7BD,0CA6BC","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:38.1172076-07:00\n\nimport { LexerActionExecutor } from \"../atn/LexerActionExecutor\";\n\n/**\n * Stores information about a {@link DFAState} which is an accept state under\n * some condition. Certain settings, such as\n * {@link ParserATNSimulator#getPredictionMode()}, may be used in addition to\n * this information to determine whether or not a particular state is an accept\n * state.\n *\n * @author Sam Harwell\n */\nexport class AcceptStateInfo {\n\tprivate readonly _prediction: number;\n\tprivate readonly _lexerActionExecutor?: LexerActionExecutor;\n\n\tconstructor(prediction: number);\n\tconstructor(prediction: number, lexerActionExecutor: LexerActionExecutor | undefined);\n\tconstructor(prediction: number, lexerActionExecutor?: LexerActionExecutor) {\n\t\tthis._prediction = prediction;\n\t\tthis._lexerActionExecutor = lexerActionExecutor;\n\t}\n\n\t/**\n\t * Gets the prediction made by this accept state. Note that this value\n\t * assumes the predicates, if any, in the {@link DFAState} evaluate to\n\t * `true`. If predicate evaluation is enabled, the final prediction of\n\t * the accept state will be determined by the result of predicate\n\t * evaluation.\n\t */\n\tget prediction(): number {\n\t\treturn this._prediction;\n\t}\n\n\t/**\n\t * Gets the {@link LexerActionExecutor} which can be used to execute actions\n\t * and/or commands after the lexer matches a token.\n\t */\n\tget lexerActionExecutor(): LexerActionExecutor | undefined {\n\t\treturn this._lexerActionExecutor;\n\t}\n}\n"]}