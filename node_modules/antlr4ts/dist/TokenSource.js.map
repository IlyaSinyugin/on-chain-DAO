{"version":3,"file":"TokenSource.js","sourceRoot":"","sources":["../../src/TokenSource.ts"],"names":[],"mappings":";AAAA;;;GAGG","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:57.9604200-07:00\n\nimport { CharStream } from \"./CharStream\";\nimport { Token } from \"./Token\";\nimport { TokenFactory } from \"./TokenFactory\";\n\n/**\n * A source of tokens must provide a sequence of tokens via {@link #nextToken()}\n * and also must reveal it's source of characters; {@link CommonToken}'s text is\n * computed from a {@link CharStream}; it only store indices into the char\n * stream.\n *\n * Errors from the lexer are never passed to the parser. Either you want to keep\n * going or you do not upon token recognition error. If you do not want to\n * continue lexing then you do not want to continue parsing. Just throw an\n * exception not under {@link RecognitionException} and Java will naturally toss\n * you all the way out of the recognizers. If you want to continue lexing then\n * you should not throw an exception to the parser--it has already requested a\n * token. Keep lexing until you get a valid one. Just report errors and keep\n * going, looking for a valid token.\n */\nexport interface TokenSource {\n\t/**\n\t * Return a {@link Token} object from your input stream (usually a\n\t * {@link CharStream}). Do not fail/return upon lexing error; keep chewing\n\t * on the characters until you get a good one; errors are not passed through\n\t * to the parser.\n\t */\n\t//@NotNull\n\tnextToken(): Token;\n\n\t/**\n\t * Get the line number for the current position in the input stream. The\n\t * first line in the input is line 1.\n\t *\n\t * @returns The line number for the current position in the input stream, or\n\t * 0 if the current token source does not track line numbers.\n\t */\n\treadonly line: number;\n\n\t/**\n\t * Get the index into the current line for the current position in the input\n\t * stream. The first character on a line has position 0.\n\t *\n\t * @returns The line number for the current position in the input stream, or\n\t * -1 if the current token source does not track character positions.\n\t */\n\treadonly charPositionInLine: number;\n\n\t/**\n\t * Get the {@link CharStream} from which this token source is currently\n\t * providing tokens.\n\t *\n\t * @returns The {@link CharStream} associated with the current position in\n\t * the input, or `undefined` if no input stream is available for the token\n\t * source.\n\t */\n\treadonly inputStream: CharStream | undefined;\n\n\t/**\n\t * Gets the name of the underlying input source. This method returns a\n\t * non-undefined, non-empty string. If such a name is not known, this method\n\t * returns {@link IntStream#UNKNOWN_SOURCE_NAME}.\n\t */\n\t//@NotNull\n\treadonly sourceName: string;\n\n\t/**\n\t * Gets or sets the `TokenFactory` this token source is currently using for\n\t * creating `Token` objects from the input.\n\t */\n\t//@NotNull\n\ttokenFactory: TokenFactory;\n}\n"]}