{"version":3,"file":"ProxyErrorListener.js","sourceRoot":"","sources":["../../src/ProxyErrorListener.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;AAMH,6CAAiD;AAEjD;;;;;;GAMG;AACH;IAEC,YAAoB,SAAsB;QAAtB,cAAS,GAAT,SAAS,CAAa;QACzC,IAAI,CAAC,SAAS,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;SACrC;IACF,CAAC;IAES,YAAY;QACrB,OAAO,IAAI,CAAC,SAAS,CAAC;IACvB,CAAC;IAGM,WAAW,CACR,UAA8B,EACvC,eAA8B,EAC9B,IAAY,EACZ,kBAA0B,EACjB,GAAW,EACpB,CAAmC;QACnC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YACnC,IAAI,QAAQ,CAAC,WAAW,EAAE;gBACzB,QAAQ,CAAC,WAAW,CAAC,UAAU,EAAE,eAAe,EAAE,IAAI,EAAE,kBAAkB,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;aACpF;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;CACD;AAbA;IADC,qBAAQ;IAEP,WAAA,oBAAO,CAAA;IAIP,WAAA,oBAAO,CAAA;qDAOR;AAzBF,gDA0BC","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:56.8126690-07:00\nimport { ANTLRErrorListener } from \"./ANTLRErrorListener\";\nimport { RecognitionException } from \"./RecognitionException\";\nimport { Recognizer } from \"./Recognizer\";\nimport { Override, NotNull } from \"./Decorators\";\n\n/**\n * This implementation of {@link ANTLRErrorListener} dispatches all calls to a\n * collection of delegate listeners. This reduces the effort required to support multiple\n * listeners.\n *\n * @author Sam Harwell\n */\nexport class ProxyErrorListener<TSymbol, TListener extends ANTLRErrorListener<TSymbol>> implements ANTLRErrorListener<TSymbol> {\n\n\tconstructor(private delegates: TListener[]) {\n\t\tif (!delegates) {\n\t\t\tthrow new Error(\"Invalid delegates\");\n\t\t}\n\t}\n\n\tprotected getDelegates(): ReadonlyArray<TListener> {\n\t\treturn this.delegates;\n\t}\n\n\t@Override\n\tpublic syntaxError<T extends TSymbol>(\n\t\t@NotNull recognizer: Recognizer<T, any>,\n\t\toffendingSymbol: T | undefined,\n\t\tline: number,\n\t\tcharPositionInLine: number,\n\t\t@NotNull msg: string,\n\t\te: RecognitionException | undefined): void {\n\t\tthis.delegates.forEach((listener) => {\n\t\t\tif (listener.syntaxError) {\n\t\t\t\tlistener.syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e);\n\t\t\t}\n\t\t});\n\t}\n}\n"]}