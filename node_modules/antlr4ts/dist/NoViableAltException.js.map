{"version":3,"file":"NoViableAltException.js","sourceRoot":"","sources":["../../src/NoViableAltException.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;AAKH,qCAAkC;AAElC,iEAA8D;AAK9D,6CAAuC;AAEvC;;;;GAIG;AACH,0BAAkC,SAAQ,2CAAoB;IA4B7D,YACC,UAAkC,EAClC,KAAmB,EACnB,UAAkB,EAClB,cAAsB,EACtB,cAA6B,EAC7B,GAAuB;QACvB,IAAI,UAAU,YAAY,eAAM,EAAE;YACjC,IAAI,KAAK,KAAK,SAAS,EAAE;gBACxB,KAAK,GAAG,UAAU,CAAC,WAAW,CAAC;aAC/B;YAED,IAAI,UAAU,KAAK,SAAS,EAAE;gBAC7B,UAAU,GAAG,UAAU,CAAC,YAAY,CAAC;aACrC;YAED,IAAI,cAAc,KAAK,SAAS,EAAE;gBACjC,cAAc,GAAG,UAAU,CAAC,YAAY,CAAC;aACzC;YAED,IAAI,GAAG,KAAK,SAAS,EAAE;gBACtB,GAAG,GAAG,UAAU,CAAC,OAAO,CAAC;aACzB;SACD;QAED,KAAK,CAAC,UAAU,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;QAC9B,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;QACtC,IAAI,CAAC,WAAW,GAAG,UAAmB,CAAC;QACvC,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;IACpD,CAAC;IAED,IAAI,UAAU;QACb,OAAO,IAAI,CAAC,WAAW,CAAC;IACzB,CAAC;IAED,IAAI,cAAc;QACjB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC7B,CAAC;CAED;AAvDA;IADC,oBAAO;yDACmB;AAZ5B,oDAmEC","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:52.3255548-07:00\n\nimport { ATNConfigSet } from \"./atn/ATNConfigSet\";\nimport { Parser } from \"./Parser\";\nimport { ParserRuleContext } from \"./ParserRuleContext\";\nimport { RecognitionException } from \"./RecognitionException\";\nimport { Recognizer } from \"./Recognizer\";\nimport { Token } from \"./Token\";\nimport { TokenStream } from \"./TokenStream\";\nimport { IntStream } from \"./IntStream\";\nimport { NotNull } from \"./Decorators\";\n\n/** Indicates that the parser could not decide which of two or more paths\n *  to take based upon the remaining input. It tracks the starting token\n *  of the offending input and also knows where the parser was\n *  in the various paths when the error. Reported by reportNoViableAlternative()\n */\nexport class NoViableAltException extends RecognitionException {\n\t//private static serialVersionUID: number =  5096000008992867052L;\n\n\t/** Which configurations did we try at input.index that couldn't match input.LT(1)? */\n\tprivate _deadEndConfigs?: ATNConfigSet;\n\n\t/** The token object at the start index; the input stream might\n\t * \tnot be buffering tokens so get a reference to it. (At the\n\t *  time the error occurred, of course the stream needs to keep a\n\t *  buffer all of the tokens but later we might not have access to those.)\n\t */\n\t@NotNull\n\tprivate _startToken: Token;\n\n\tconstructor(/*@NotNull*/ recognizer: Parser);\n\tconstructor(\n\t\t/*@NotNull*/\n\t\trecognizer: Recognizer<Token, any>,\n\t\t/*@NotNull*/\n\t\tinput: TokenStream,\n\t\t/*@NotNull*/\n\t\tstartToken: Token,\n\t\t/*@NotNull*/\n\t\toffendingToken: Token,\n\t\tdeadEndConfigs: ATNConfigSet | undefined,\n\t\t/*@NotNull*/\n\t\tctx: ParserRuleContext);\n\n\tconstructor(\n\t\trecognizer: Recognizer<Token, any>,\n\t\tinput?: TokenStream,\n\t\tstartToken?: Token,\n\t\toffendingToken?: Token,\n\t\tdeadEndConfigs?: ATNConfigSet,\n\t\tctx?: ParserRuleContext) {\n\t\tif (recognizer instanceof Parser) {\n\t\t\tif (input === undefined) {\n\t\t\t\tinput = recognizer.inputStream;\n\t\t\t}\n\n\t\t\tif (startToken === undefined) {\n\t\t\t\tstartToken = recognizer.currentToken;\n\t\t\t}\n\n\t\t\tif (offendingToken === undefined) {\n\t\t\t\toffendingToken = recognizer.currentToken;\n\t\t\t}\n\n\t\t\tif (ctx === undefined) {\n\t\t\t\tctx = recognizer.context;\n\t\t\t}\n\t\t}\n\n\t\tsuper(recognizer, input, ctx);\n\t\tthis._deadEndConfigs = deadEndConfigs;\n\t\tthis._startToken = startToken as Token;\n\t\tthis.setOffendingToken(recognizer, offendingToken);\n\t}\n\n\tget startToken(): Token {\n\t\treturn this._startToken;\n\t}\n\n\tget deadEndConfigs(): ATNConfigSet | undefined {\n\t\treturn this._deadEndConfigs;\n\t}\n\n}\n"]}