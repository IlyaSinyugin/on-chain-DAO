{"version":3,"file":"TokenTagToken.js","sourceRoot":"","sources":["../../../../src/tree/pattern/TokenTagToken.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;AAEH,wDAAwD;AAExD,mDAAgD;AAChD,iDAAqD;AAErD;;;;GAIG;AACH,IAAa,aAAa,GAA1B,mBAA2B,SAAQ,yBAAW;IAW7C;;;;;;;;OAQG;IACH,YAAqB,SAAiB,EAAE,IAAY,EAAE,KAAc;QACnE,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACrB,CAAC;IAED;;;OAGG;IAEH,IAAI,SAAS;QACZ,OAAO,IAAI,CAAC,UAAU,CAAC;IACxB,CAAC;IAED;;;;;OAKG;IACH,IAAI,KAAK;QACR,OAAO,IAAI,CAAC,MAAM,CAAC;IACpB,CAAC;IAED;;;;;OAKG;IAEH,IAAI,IAAI;QACP,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;YACxB,OAAO,GAAG,GAAG,IAAI,CAAC,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;SACvD;QAED,OAAO,GAAG,GAAG,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;IACpC,CAAC;IAED;;;;;OAKG;IAEI,QAAQ;QACd,OAAO,IAAI,CAAC,UAAU,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;IAC1C,CAAC;CACD,CAAA;AAjEA;IADC,oBAAO;iDACmB;AA0B3B;IADC,oBAAO;8CAGP;AAmBD;IADC,qBAAQ;yCAOR;AASD;IADC,qBAAQ;6CAGR;AArEW,aAAa;IAoBZ,WAAA,oBAAO,CAAA;GApBR,aAAa,CAsEzB;AAtEY,sCAAa","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:46.3281988-07:00\n\nimport { CommonToken } from \"../../CommonToken\";\nimport { NotNull, Override } from \"../../Decorators\";\n\n/**\n * A {@link Token} object representing a token of a particular type; e.g.,\n * `<ID>`. These tokens are created for {@link TagChunk} chunks where the\n * tag corresponds to a lexer rule or token type.\n */\nexport class TokenTagToken extends CommonToken {\n\t/**\n\t * This is the backing field for `tokenName`.\n\t */\n\t@NotNull\n\tprivate _tokenName: string;\n\t/**\n\t * This is the backing field for `label`.\n\t */\n\tprivate _label: string | undefined;\n\n\t/**\n\t * Constructs a new instance of {@link TokenTagToken} with the specified\n\t * token name, type, and label.\n\t *\n\t * @param tokenName The token name.\n\t * @param type The token type.\n\t * @param label The label associated with the token tag, or `undefined` if\n\t * the token tag is unlabeled.\n\t */\n\tconstructor(@NotNull tokenName: string, type: number, label?: string) {\n\t\tsuper(type);\n\t\tthis._tokenName = tokenName;\n\t\tthis._label = label;\n\t}\n\n\t/**\n\t * Gets the token name.\n\t * @returns The token name.\n\t */\n\t@NotNull\n\tget tokenName(): string {\n\t\treturn this._tokenName;\n\t}\n\n\t/**\n\t * Gets the label associated with the rule tag.\n\t *\n\t * @returns The name of the label associated with the rule tag, or\n\t * `undefined` if this is an unlabeled rule tag.\n\t */\n\tget label(): string | undefined {\n\t\treturn this._label;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * The implementation for {@link TokenTagToken} returns the token tag\n\t * formatted with `<` and `>` delimiters.\n\t */\n\t@Override\n\tget text(): string {\n\t\tif (this._label != null) {\n\t\t\treturn \"<\" + this._label + \":\" + this._tokenName + \">\";\n\t\t}\n\n\t\treturn \"<\" + this._tokenName + \">\";\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * The implementation for {@link TokenTagToken} returns a string of the form\n\t * `tokenName:type`.\n\t */\n\t@Override\n\tpublic toString(): string {\n\t\treturn this._tokenName + \":\" + this.type;\n\t}\n}\n"]}