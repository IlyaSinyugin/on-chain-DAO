{"version":3,"file":"ParseTreePatternMatcher.js","sourceRoot":"","sources":["../../../../src/tree/pattern/ParseTreePatternMatcher.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// CONVERSTION complete, Burt Harris 10/14/2016\n\nimport { BailErrorStrategy } from \"../../BailErrorStrategy\";\nimport { CharStreams } from \"../../CharStreams\";\nimport { Chunk } from \"./Chunk\";\nimport { CommonTokenStream } from \"../../CommonTokenStream\";\nimport { Lexer } from \"../../Lexer\";\nimport { ListTokenSource } from \"../../ListTokenSource\";\nimport { MultiMap } from \"../../misc/MultiMap\";\nimport { NotNull } from \"../../Decorators\";\nimport { ParseCancellationException } from \"../../misc/ParseCancellationException\";\nimport { Parser } from \"../../Parser\";\nimport { ParserInterpreter } from \"../../ParserInterpreter\";\nimport { ParserRuleContext } from \"../../ParserRuleContext\";\nimport { ParseTree } from \"../ParseTree\";\nimport { ParseTreeMatch } from \"./ParseTreeMatch\";\nimport { ParseTreePattern } from \"./ParseTreePattern\";\nimport { RecognitionException } from \"../../RecognitionException\";\nimport { RuleNode } from \"../RuleNode\";\nimport { RuleTagToken } from \"./RuleTagToken\";\nimport { TagChunk } from \"./TagChunk\";\nimport { TerminalNode } from \"../TerminalNode\";\nimport { TextChunk } from \"./TextChunk\";\nimport { Token } from \"../../Token\";\nimport { TokenTagToken } from \"./TokenTagToken\";\n\n/**\n * A tree pattern matching mechanism for ANTLR {@link ParseTree}s.\n *\n * Patterns are strings of source input text with special tags representing\n * token or rule references such as:\n *\n * ```\n * <ID> = <expr>;\n * ```\n *\n * Given a pattern start rule such as `statement`, this object constructs\n * a {@link ParseTree} with placeholders for the `ID` and `expr`\n * subtree. Then the {@link #match} routines can compare an actual\n * {@link ParseTree} from a parse with this pattern. Tag `<ID>` matches\n * any `ID` token and tag `<expr>` references the result of the\n * `expr` rule (generally an instance of `ExprContext`.\n *\n * Pattern `x = 0;` is a similar pattern that matches the same pattern\n * except that it requires the identifier to be `x` and the expression to\n * be `0`.\n *\n * The {@link #matches} routines return `true` or `false` based\n * upon a match for the tree rooted at the parameter sent in. The\n * {@link #match} routines return a {@link ParseTreeMatch} object that\n * contains the parse tree, the parse tree pattern, and a map from tag name to\n * matched nodes (more below). A subtree that fails to match, returns with\n * {@link ParseTreeMatch#mismatchedNode} set to the first tree node that did not\n * match.\n *\n * For efficiency, you can compile a tree pattern in string form to a\n * {@link ParseTreePattern} object.\n *\n * See `TestParseTreeMatcher` for lots of examples.\n * {@link ParseTreePattern} has two static helper methods:\n * {@link ParseTreePattern#findAll} and {@link ParseTreePattern#match} that\n * are easy to use but not super efficient because they create new\n * {@link ParseTreePatternMatcher} objects each time and have to compile the\n * pattern in string form before using it.\n *\n * The lexer and parser that you pass into the {@link ParseTreePatternMatcher}\n * constructor are used to parse the pattern in string form. The lexer converts\n * the `<ID> = <expr>;` into a sequence of four tokens (assuming lexer\n * throws out whitespace or puts it on a hidden channel). Be aware that the\n * input stream is reset for the lexer (but not the parser; a\n * {@link ParserInterpreter} is created to parse the input.). Any user-defined\n * fields you have put into the lexer might get changed when this mechanism asks\n * it to scan the pattern string.\n *\n * Normally a parser does not accept token `<expr>` as a valid\n * `expr` but, from the parser passed in, we create a special version of\n * the underlying grammar representation (an {@link ATN}) that allows imaginary\n * tokens representing rules (`<expr>`) to match entire rules. We call\n * these *bypass alternatives*.\n *\n * Delimiters are `<`} and `>`}, with `\\` as the escape string\n * by default, but you can set them to whatever you want using\n * {@link #setDelimiters}. You must escape both start and stop strings\n * `\\<` and `\\>`.\n */\nexport class ParseTreePatternMatcher {\n\t/**\n\t * This is the backing field for `lexer`.\n\t */\n\tprivate _lexer: Lexer;\n\n\t/**\n\t * This is the backing field for `parser`.\n\t */\n\tprivate _parser: Parser;\n\n\tprotected start = \"<\";\n\tprotected stop = \">\";\n\tprotected escape = \"\\\\\"; // e.g., \\< and \\> must escape BOTH!\n\n\t/**\n\t * Regular expression corresponding to escape, for global replace\n\t */\n\tprotected escapeRE = /\\\\/g;\n\n\t/**\n\t * Constructs a {@link ParseTreePatternMatcher} or from a {@link Lexer} and\n\t * {@link Parser} object. The lexer input stream is altered for tokenizing\n\t * the tree patterns. The parser is used as a convenient mechanism to get\n\t * the grammar name, plus token, rule names.\n\t */\n\tconstructor(lexer: Lexer, parser: Parser) {\n\t\tthis._lexer = lexer;\n\t\tthis._parser = parser;\n\t}\n\n\t/**\n\t * Set the delimiters used for marking rule and token tags within concrete\n\t * syntax used by the tree pattern parser.\n\t *\n\t * @param start The start delimiter.\n\t * @param stop The stop delimiter.\n\t * @param escapeLeft The escape sequence to use for escaping a start or stop delimiter.\n\t *\n\t * @throws {@link Error} if `start` is not defined or empty.\n\t * @throws {@link Error} if `stop` is not defined or empty.\n\t */\n\tpublic setDelimiters(start: string, stop: string, escapeLeft: string): void {\n\t\tif (!start) {\n\t\t\tthrow new Error(\"start cannot be null or empty\");\n\t\t}\n\n\t\tif (!stop) {\n\t\t\tthrow new Error(\"stop cannot be null or empty\");\n\t\t}\n\n\t\tthis.start = start;\n\t\tthis.stop = stop;\n\t\tthis.escape = escapeLeft;\n\t\tthis.escapeRE = new RegExp(escapeLeft.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"), \"g\");\n\t}\n\n\t/** Does `pattern` matched as rule `patternRuleIndex` match `tree`? */\n\tpublic matches(tree: ParseTree, pattern: string, patternRuleIndex: number): boolean;\n\n\t/** Does `pattern` matched as rule patternRuleIndex match tree? Pass in a\n\t *  compiled pattern instead of a string representation of a tree pattern.\n\t */\n\tpublic matches(tree: ParseTree, pattern: ParseTreePattern): boolean;\n\n\tpublic matches(tree: ParseTree, pattern: string | ParseTreePattern, patternRuleIndex: number = 0): boolean {\n\t\tif (typeof pattern === \"string\") {\n\t\t\tlet p: ParseTreePattern = this.compile(pattern, patternRuleIndex);\n\t\t\treturn this.matches(tree, p);\n\t\t} else {\n\t\t\tlet labels = new MultiMap<string, ParseTree>();\n\t\t\tlet mismatchedNode = this.matchImpl(tree, pattern.patternTree, labels);\n\t\t\treturn !mismatchedNode;\n\t\t}\n\t}\n\n\t/**\n\t * Compare `pattern` matched as rule `patternRuleIndex` against\n\t * `tree` and return a {@link ParseTreeMatch} object that contains the\n\t * matched elements, or the node at which the match failed.\n\t */\n\tpublic match(tree: ParseTree, pattern: string, patternRuleIndex: number): ParseTreeMatch;\n\n\t/**\n\t * Compare `pattern` matched against `tree` and return a\n\t * {@link ParseTreeMatch} object that contains the matched elements, or the\n\t * node at which the match failed. Pass in a compiled pattern instead of a\n\t * string representation of a tree pattern.\n\t */\n\tpublic match(tree: ParseTree, pattern: ParseTreePattern): ParseTreeMatch;\n\n\t// Implementation of match\n\t@NotNull\n\tpublic match(tree: ParseTree, @NotNull pattern: string | ParseTreePattern, patternRuleIndex: number = 0): ParseTreeMatch {\n\t\tif (typeof pattern === \"string\") {\n\t\t\tlet p: ParseTreePattern = this.compile(pattern, patternRuleIndex);\n\t\t\treturn this.match(tree, p);\n\t\t} else {\n\t\t\tlet labels = new MultiMap<string, ParseTree>();\n\t\t\tlet mismatchedNode = this.matchImpl(tree, pattern.patternTree, labels);\n\t\t\treturn new ParseTreeMatch(tree, pattern, labels, mismatchedNode);\n\t\t}\n\t}\n\n\t/**\n\t * For repeated use of a tree pattern, compile it to a\n\t * {@link ParseTreePattern} using this method.\n\t */\n\tpublic compile(pattern: string, patternRuleIndex: number): ParseTreePattern {\n\t\tlet tokenList = this.tokenize(pattern);\n\t\tlet tokenSrc = new ListTokenSource(tokenList);\n\t\tlet tokens = new CommonTokenStream(tokenSrc);\n\t\tconst parser = this._parser;\n\n\t\tlet parserInterp = new ParserInterpreter(\n\t\t\tparser.grammarFileName,\n\t\t\tparser.vocabulary,\n\t\t\tparser.ruleNames,\n\t\t\tparser.getATNWithBypassAlts(),\n\t\t\ttokens);\n\n\t\tlet tree: ParseTree;\n\t\ttry {\n\t\t\tparserInterp.errorHandler = new BailErrorStrategy();\n\t\t\ttree = parserInterp.parse(patternRuleIndex);\n//\t\t\tSystem.out.println(\"pattern tree = \"+tree.toStringTree(parserInterp));\n\t\t} catch (e) {\n\t\t\tif (e instanceof ParseCancellationException) {\n\t\t\t\tthrow e.getCause();\n\t\t\t} else if (e instanceof RecognitionException) {\n\t\t\t\tthrow e;\n\t\t\t} else if (e instanceof Error) {\n\t\t\t\tthrow new ParseTreePatternMatcher.CannotInvokeStartRule(e);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\n\t\t// Make sure tree pattern compilation checks for a complete parse\n\t\tif (tokens.LA(1) !== Token.EOF) {\n\t\t\tthrow new ParseTreePatternMatcher.StartRuleDoesNotConsumeFullPattern();\n\t\t}\n\n\t\treturn new ParseTreePattern(this, pattern, patternRuleIndex, tree);\n\t}\n\n\t/**\n\t * Used to convert the tree pattern string into a series of tokens. The\n\t * input stream is reset.\n\t */\n\t@NotNull\n\tget lexer(): Lexer {\n\t\treturn this._lexer;\n\t}\n\n\t/**\n\t * Used to collect to the grammar file name, token names, rule names for\n\t * used to parse the pattern into a parse tree.\n\t */\n\t@NotNull\n\tget parser(): Parser {\n\t\treturn this._parser;\n\t}\n\n\t// ---- SUPPORT CODE ----\n\n\t/**\n\t * Recursively walk `tree` against `patternTree`, filling\n\t * `match.`{@link ParseTreeMatch#labels labels}.\n\t *\n\t * @returns the first node encountered in `tree` which does not match\n\t * a corresponding node in `patternTree`, or `undefined` if the match\n\t * was successful. The specific node returned depends on the matching\n\t * algorithm used by the implementation, and may be overridden.\n\t */\n\tprotected matchImpl(\n\t\t@NotNull tree: ParseTree,\n\t\t@NotNull patternTree: ParseTree,\n\t\t@NotNull labels: MultiMap<string, ParseTree>): ParseTree | undefined {\n\t\tif (!tree) {\n\t\t\tthrow new TypeError(\"tree cannot be null\");\n\t\t}\n\n\t\tif (!patternTree) {\n\t\t\tthrow new TypeError(\"patternTree cannot be null\");\n\t\t}\n\n\t\t// x and <ID>, x and y, or x and x; or could be mismatched types\n\t\tif (tree instanceof TerminalNode && patternTree instanceof TerminalNode) {\n\t\t\tlet mismatchedNode: ParseTree | undefined;\n\t\t\t// both are tokens and they have same type\n\t\t\tif (tree.symbol.type === patternTree.symbol.type) {\n\t\t\t\tif (patternTree.symbol instanceof TokenTagToken) { // x and <ID>\n\t\t\t\t\tlet tokenTagToken = patternTree.symbol;\n\t\t\t\t\t// track label->list-of-nodes for both token name and label (if any)\n\t\t\t\t\tlabels.map(tokenTagToken.tokenName, tree);\n\t\t\t\t\tconst l = tokenTagToken.label;\n\t\t\t\t\tif (l) {\n\t\t\t\t\t\tlabels.map(l, tree);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (tree.text === patternTree.text) {\n\t\t\t\t\t// x and x\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// x and y\n\t\t\t\t\tif (!mismatchedNode) {\n\t\t\t\t\t\tmismatchedNode = tree;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!mismatchedNode) {\n\t\t\t\t\tmismatchedNode = tree;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn mismatchedNode;\n\t\t}\n\n\t\tif (tree instanceof ParserRuleContext\n\t\t\t&& patternTree instanceof ParserRuleContext) {\n\t\t\tlet mismatchedNode: ParseTree | undefined;\n\t\t\t// (expr ...) and <expr>\n\t\t\tlet ruleTagToken = this.getRuleTagToken(patternTree);\n\t\t\tif (ruleTagToken) {\n\t\t\t\tlet m: ParseTreeMatch;\n\t\t\t\tif (tree.ruleContext.ruleIndex === patternTree.ruleContext.ruleIndex) {\n\t\t\t\t\t// track label->list-of-nodes for both rule name and label (if any)\n\t\t\t\t\tlabels.map(ruleTagToken.ruleName, tree);\n\t\t\t\t\tconst l = ruleTagToken.label;\n\t\t\t\t\tif (l) {\n\t\t\t\t\t\tlabels.map(l, tree);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (!mismatchedNode) {\n\t\t\t\t\t\tmismatchedNode = tree;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn mismatchedNode;\n\t\t\t}\n\n\t\t\t// (expr ...) and (expr ...)\n\t\t\tif (tree.childCount !== patternTree.childCount) {\n\t\t\t\tif (!mismatchedNode) {\n\t\t\t\t\tmismatchedNode = tree;\n\t\t\t\t}\n\n\t\t\t\treturn mismatchedNode;\n\t\t\t}\n\n\t\t\tlet n: number = tree.childCount;\n\t\t\tfor (let i = 0; i < n; i++) {\n\t\t\t\tlet childMatch = this.matchImpl(tree.getChild(i), patternTree.getChild(i), labels);\n\t\t\t\tif (childMatch) {\n\t\t\t\t\treturn childMatch;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn mismatchedNode;\n\t\t}\n\n\t\t// if nodes aren't both tokens or both rule nodes, can't match\n\t\treturn tree;\n\t}\n\n\t/** Is `t` `(expr <expr>)` subtree? */\n\tprotected getRuleTagToken(t: ParseTree): RuleTagToken | undefined {\n\t\tif (t instanceof RuleNode) {\n\t\t\tif (t.childCount === 1 && t.getChild(0) instanceof TerminalNode) {\n\t\t\t\tlet c = t.getChild(0) as TerminalNode;\n\t\t\t\tif (c.symbol instanceof RuleTagToken) {\n//\t\t\t\t\tSystem.out.println(\"rule tag subtree \"+t.toStringTree(parser));\n\t\t\t\t\treturn c.symbol;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic tokenize(pattern: string): Token[] {\n\t\t// split pattern into chunks: sea (raw input) and islands (<ID>, <expr>)\n\t\tlet chunks = this.split(pattern);\n\n\t\t// create token stream from text and tags\n\t\tlet tokens: Token[] = [];\n\n\t\tfor (let chunk of chunks) {\n\t\t\tif (chunk instanceof TagChunk) {\n\t\t\t\tlet tagChunk = chunk;\n\t\t\t\tconst firstChar = tagChunk.tag.substr(0, 1);\n\t\t\t\t// add special rule token or conjure up new token from name\n\t\t\t\tif (firstChar === firstChar.toUpperCase()) {\n\t\t\t\t\tlet ttype: number = this._parser.getTokenType(tagChunk.tag);\n\t\t\t\t\tif (ttype === Token.INVALID_TYPE) {\n\t\t\t\t\t\tthrow new Error(\"Unknown token \" + tagChunk.tag + \" in pattern: \" + pattern);\n\t\t\t\t\t}\n\t\t\t\t\tlet t: TokenTagToken = new TokenTagToken(tagChunk.tag, ttype, tagChunk.label);\n\t\t\t\t\ttokens.push(t);\n\t\t\t\t}\n\t\t\t\telse if (firstChar === firstChar.toLowerCase()) {\n\t\t\t\t\tlet ruleIndex: number = this._parser.getRuleIndex(tagChunk.tag);\n\t\t\t\t\tif (ruleIndex === -1) {\n\t\t\t\t\t\tthrow new Error(\"Unknown rule \" + tagChunk.tag + \" in pattern: \" + pattern);\n\t\t\t\t\t}\n\t\t\t\t\tlet ruleImaginaryTokenType: number = this._parser.getATNWithBypassAlts().ruleToTokenType[ruleIndex];\n\t\t\t\t\ttokens.push(new RuleTagToken(tagChunk.tag, ruleImaginaryTokenType, tagChunk.label));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new Error(\"invalid tag: \" + tagChunk.tag + \" in pattern: \" + pattern);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet textChunk = chunk as TextChunk;\n\t\t\t\tthis._lexer.inputStream = CharStreams.fromString(textChunk.text);\n\t\t\t\tlet t: Token = this._lexer.nextToken();\n\t\t\t\twhile (t.type !== Token.EOF) {\n\t\t\t\t\ttokens.push(t);\n\t\t\t\t\tt = this._lexer.nextToken();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n//\t\tSystem.out.println(\"tokens=\"+tokens);\n\t\treturn tokens;\n\t}\n\n\t/** Split `<ID> = <e:expr> ;` into 4 chunks for tokenizing by {@link #tokenize}. */\n\tpublic split(pattern: string): Chunk[] {\n\t\tlet p: number = 0;\n\t\tlet n: number = pattern.length;\n\t\tlet chunks: Chunk[] = [];\n\t\tlet buf: \"\";\n\t\t// find all start and stop indexes first, then collect\n\t\tlet starts: number[] = [];\n\t\tlet stops: number[] = [];\n\t\twhile (p < n) {\n\t\t\tif (p === pattern.indexOf(this.escape + this.start, p)) {\n\t\t\t\tp += this.escape.length + this.start.length;\n\t\t\t}\n\t\t\telse if (p === pattern.indexOf(this.escape + this.stop, p)) {\n\t\t\t\tp += this.escape.length + this.stop.length;\n\t\t\t}\n\t\t\telse if (p === pattern.indexOf(this.start, p)) {\n\t\t\t\tstarts.push(p);\n\t\t\t\tp += this.start.length;\n\t\t\t}\n\t\t\telse if (p === pattern.indexOf(this.stop, p)) {\n\t\t\t\tstops.push(p);\n\t\t\t\tp += this.stop.length;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tp++;\n\t\t\t}\n\t\t}\n\n//\t\tSystem.out.println(\"\");\n//\t\tSystem.out.println(starts);\n//\t\tSystem.out.println(stops);\n\t\tif (starts.length > stops.length) {\n\t\t\tthrow new Error(\"unterminated tag in pattern: \" + pattern);\n\t\t}\n\n\t\tif (starts.length < stops.length) {\n\t\t\tthrow new Error(\"missing start tag in pattern: \" + pattern);\n\t\t}\n\n\t\tlet ntags: number = starts.length;\n\t\tfor (let i = 0; i < ntags; i++) {\n\t\t\tif (starts[i] >= stops[i]) {\n\t\t\t\tthrow new Error(\"tag delimiters out of order in pattern: \" + pattern);\n\t\t\t}\n\t\t}\n\n\t\t// collect into chunks now\n\t\tif (ntags === 0) {\n\t\t\tlet text: string = pattern.substring(0, n);\n\t\t\tchunks.push(new TextChunk(text));\n\t\t}\n\n\t\tif (ntags > 0 && starts[0] > 0) { // copy text up to first tag into chunks\n\t\t\tlet text: string = pattern.substring(0, starts[0]);\n\t\t\tchunks.push(new TextChunk(text));\n\t\t}\n\t\tfor (let i = 0; i < ntags; i++) {\n\t\t\t// copy inside of <tag>\n\t\t\tlet tag: string = pattern.substring(starts[i] + this.start.length, stops[i]);\n\t\t\tlet ruleOrToken: string = tag;\n\t\t\tlet label: string | undefined;\n\t\t\tlet colon: number = tag.indexOf(\":\");\n\t\t\tif (colon >= 0) {\n\t\t\t\tlabel = tag.substring(0, colon);\n\t\t\t\truleOrToken = tag.substring(colon + 1, tag.length);\n\t\t\t}\n\t\t\tchunks.push(new TagChunk(ruleOrToken, label));\n\t\t\tif (i + 1 < ntags) {\n\t\t\t\t// copy from end of <tag> to start of next\n\t\t\t\tlet text: string = pattern.substring(stops[i] + this.stop.length, starts[i + 1]);\n\t\t\t\tchunks.push(new TextChunk(text));\n\t\t\t}\n\t\t}\n\t\tif (ntags > 0) {\n\t\t\tlet afterLastTag: number = stops[ntags - 1] + this.stop.length;\n\t\t\tif (afterLastTag < n) { // copy text from end of last tag to end\n\t\t\t\tlet text: string = pattern.substring(afterLastTag, n);\n\t\t\t\tchunks.push(new TextChunk(text));\n\t\t\t}\n\t\t}\n\n\t\t// strip out the escape sequences from text chunks but not tags\n\t\tfor (let i = 0; i < chunks.length; i++) {\n\t\t\tlet c: Chunk = chunks[i];\n\t\t\tif (c instanceof TextChunk) {\n\t\t\t\tlet unescaped: string = c.text.replace(this.escapeRE, \"\");\n\t\t\t\tif (unescaped.length < c.text.length) {\n\t\t\t\t\tchunks[i] = new TextChunk(unescaped);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn chunks;\n\t}\n}\n\nexport namespace ParseTreePatternMatcher {\n\texport class CannotInvokeStartRule extends Error {\n\t\tpublic constructor(public error: Error) {\n\t\t\tsuper(`CannotInvokeStartRule: ${error}`);\n\t\t}\n\t}\n\n\t// Fixes https://github.com/antlr/antlr4/issues/413\n\t// \"Tree pattern compilation doesn't check for a complete parse\"\n\texport class StartRuleDoesNotConsumeFullPattern extends Error {\n\t\tconstructor() {\n\t\t\tsuper(\"StartRuleDoesNotConsumeFullPattern\");\n\t\t}\n\t}\n}\n"]}