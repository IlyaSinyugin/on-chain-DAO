{"version":3,"file":"AbstractParseTreeVisitor.js","sourceRoot":"","sources":["../../../src/tree/AbstractParseTreeVisitor.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;AAKH,8CAAkD;AAMlD;IACC;;;;;OAKG;IAEI,KAAK,CAAU,IAAe;QACpC,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IAED;;;;;;;;;;;;;;OAcG;IAEI,aAAa,CAAU,IAAc;QAC3C,IAAI,MAAM,GAAW,IAAI,CAAC,aAAa,EAAE,CAAC;QAC1C,IAAI,CAAC,GAAW,IAAI,CAAC,UAAU,CAAC;QAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC3B,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE;gBAC7C,MAAM;aACN;YAED,IAAI,CAAC,GAAc,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACpC,IAAI,WAAW,GAAW,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACzC,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;SACnD;QAED,OAAO,MAAM,CAAC;IACf,CAAC;IAED;;;;;OAKG;IAEI,aAAa,CAAU,IAAkB;QAC/C,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;IAC7B,CAAC;IAED;;;;;OAKG;IAEI,cAAc,CAAU,IAAe;QAC7C,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;IAC7B,CAAC;IAaD;;;;;;;;;;;;;;;;;;OAkBG;IACO,eAAe,CAAC,SAAiB,EAAE,UAAkB;QAC9D,OAAO,UAAU,CAAC;IACnB,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;OAuBG;IACO,oBAAoB,CAAU,IAAc,EAAE,aAAqB;QAC5E,OAAO,IAAI,CAAC;IACb,CAAC;CACD;AAvHA;IADC,qBAAQ;IACK,WAAA,oBAAO,CAAA;qDAEpB;AAkBD;IADC,qBAAQ;IACa,WAAA,oBAAO,CAAA;6DAc5B;AASD;IADC,qBAAQ;IACa,WAAA,oBAAO,CAAA;6DAE5B;AASD;IADC,qBAAQ;IACc,WAAA,oBAAO,CAAA;8DAE7B;AA4DD;IAAgC,WAAA,oBAAO,CAAA;oEAEtC;AA9HF,4DA+HC","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:47.3092279-07:00\n\nimport { ErrorNode } from \"./ErrorNode\";\nimport { NotNull, Override } from \"../Decorators\";\nimport { ParseTree } from \"./ParseTree\";\nimport { ParseTreeVisitor } from \"./ParseTreeVisitor\";\nimport { RuleNode } from \"./RuleNode\";\nimport { TerminalNode } from \"./TerminalNode\";\n\nexport abstract class AbstractParseTreeVisitor<Result> implements ParseTreeVisitor<Result> {\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * The default implementation calls {@link ParseTree#accept} on the\n\t * specified tree.\n\t */\n\t@Override\n\tpublic visit(@NotNull tree: ParseTree): Result {\n\t\treturn tree.accept(this);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * The default implementation initializes the aggregate result to\n\t * {@link #defaultResult defaultResult()}. Before visiting each child, it\n\t * calls {@link #shouldVisitNextChild shouldVisitNextChild}; if the result\n\t * is `false` no more children are visited and the current aggregate\n\t * result is returned. After visiting a child, the aggregate result is\n\t * updated by calling {@link #aggregateResult aggregateResult} with the\n\t * previous aggregate result and the result of visiting the child.\n\t *\n\t * The default implementation is not safe for use in visitors that modify\n\t * the tree structure. Visitors that modify the tree should override this\n\t * method to behave properly in respect to the specific algorithm in use.\n\t */\n\t@Override\n\tpublic visitChildren(@NotNull node: RuleNode): Result {\n\t\tlet result: Result = this.defaultResult();\n\t\tlet n: number = node.childCount;\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tif (!this.shouldVisitNextChild(node, result)) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet c: ParseTree = node.getChild(i);\n\t\t\tlet childResult: Result = c.accept(this);\n\t\t\tresult = this.aggregateResult(result, childResult);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * The default implementation returns the result of\n\t * {@link #defaultResult defaultResult}.\n\t */\n\t@Override\n\tpublic visitTerminal(@NotNull node: TerminalNode): Result {\n\t\treturn this.defaultResult();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * The default implementation returns the result of\n\t * {@link #defaultResult defaultResult}.\n\t */\n\t@Override\n\tpublic visitErrorNode(@NotNull node: ErrorNode): Result {\n\t\treturn this.defaultResult();\n\t}\n\n\t/**\n\t * Gets the default value returned by visitor methods. This value is\n\t * returned by the default implementations of\n\t * {@link #visitTerminal visitTerminal}, {@link #visitErrorNode visitErrorNode}.\n\t * The default implementation of {@link #visitChildren visitChildren}\n\t * initializes its aggregate result to this value.\n\t *\n\t * @returns The default value returned by visitor methods.\n\t */\n\tprotected abstract defaultResult(): Result;\n\n\t/**\n\t * Aggregates the results of visiting multiple children of a node. After\n\t * either all children are visited or {@link #shouldVisitNextChild} returns\n\t * `false`, the aggregate value is returned as the result of\n\t * {@link #visitChildren}.\n\t *\n\t * The default implementation returns `nextResult`, meaning\n\t * {@link #visitChildren} will return the result of the last child visited\n\t * (or return the initial value if the node has no children).\n\t *\n\t * @param aggregate The previous aggregate value. In the default\n\t * implementation, the aggregate value is initialized to\n\t * {@link #defaultResult}, which is passed as the `aggregate` argument\n\t * to this method after the first child node is visited.\n\t * @param nextResult The result of the immediately preceeding call to visit\n\t * a child node.\n\t *\n\t * @returns The updated aggregate result.\n\t */\n\tprotected aggregateResult(aggregate: Result, nextResult: Result): Result {\n\t\treturn nextResult;\n\t}\n\n\t/**\n\t * This method is called after visiting each child in\n\t * {@link #visitChildren}. This method is first called before the first\n\t * child is visited; at that point `currentResult` will be the initial\n\t * value (in the default implementation, the initial value is returned by a\n\t * call to {@link #defaultResult}. This method is not called after the last\n\t * child is visited.\n\t *\n\t * The default implementation always returns `true`, indicating that\n\t * `visitChildren` should only return after all children are visited.\n\t * One reason to override this method is to provide a \"short circuit\"\n\t * evaluation option for situations where the result of visiting a single\n\t * child has the potential to determine the result of the visit operation as\n\t * a whole.\n\t *\n\t * @param node The {@link RuleNode} whose children are currently being\n\t * visited.\n\t * @param currentResult The current aggregate result of the children visited\n\t * to the current point.\n\t *\n\t * @returns `true` to continue visiting children. Otherwise return\n\t * `false` to stop visiting children and immediately return the\n\t * current aggregate result from {@link #visitChildren}.\n\t */\n\tprotected shouldVisitNextChild(@NotNull node: RuleNode, currentResult: Result): boolean {\n\t\treturn true;\n\t}\n}\n"]}