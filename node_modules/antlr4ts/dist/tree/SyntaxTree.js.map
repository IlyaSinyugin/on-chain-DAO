{"version":3,"file":"SyntaxTree.js","sourceRoot":"","sources":["../../../src/tree/SyntaxTree.ts"],"names":[],"mappings":";AAAA;;;GAGG","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:47.9953174-07:00\n\nimport { Tree } from \"./Tree\";\nimport { Interval } from \"../misc/Interval\";\n\n/** A tree that knows about an interval in a token stream\n *  is some kind of syntax tree. Subinterfaces distinguish\n *  between parse trees and other kinds of syntax trees we might want to create.\n */\nexport interface SyntaxTree extends Tree {\n\t/**\n\t * Return an {@link Interval} indicating the index in the\n\t * {@link TokenStream} of the first and last token associated with this\n\t * subtree. If this node is a leaf, then the interval represents a single\n\t * token and has interval i..i for token index i.\n\t *\n\t * An interval of i..i-1 indicates an empty interval at position\n\t * i in the input stream, where 0 &lt;= i &lt;= the size of the input\n\t * token stream.  Currently, the code base can only have i=0..n-1 but\n\t * in concept one could have an empty interval after EOF.\n\t *\n\t * If source interval is unknown, this returns {@link Interval#INVALID}.\n\t *\n\t * As a weird special case, the source interval for rules matched after\n\t * EOF is unspecified.\n\t */\n\t//@NotNull\n\treadonly sourceInterval: Interval;\n}\n"]}