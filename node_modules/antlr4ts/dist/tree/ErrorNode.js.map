{"version":3,"file":"ErrorNode.js","sourceRoot":"","sources":["../../../src/tree/ErrorNode.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;AAEH,wDAAwD;AAExD,8CAAyC;AAEzC,iDAA8C;AAG9C;;;;;GAKG;AACH,eAAuB,SAAQ,2BAAY;IAC1C,YAAY,KAAY;QACvB,KAAK,CAAC,KAAK,CAAC,CAAC;IACd,CAAC;IAGM,MAAM,CAAI,OAA4B;QAC5C,OAAO,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;CACD;AAHA;IADC,qBAAQ;uCAGR;AARF,8BASC","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:47.4646355-07:00\n\nimport { Override } from \"../Decorators\";\nimport { ParseTreeVisitor } from \"./ParseTreeVisitor\";\nimport { TerminalNode } from \"./TerminalNode\";\nimport { Token } from \"../Token\";\n\n/** Represents a token that was consumed during resynchronization\n *  rather than during a valid match operation. For example,\n *  we will create this kind of a node during single token insertion\n *  and deletion as well as during \"consume until error recovery set\"\n *  upon no viable alternative exceptions.\n */\nexport class ErrorNode extends TerminalNode {\n\tconstructor(token: Token) {\n\t\tsuper(token);\n\t}\n\n\t@Override\n\tpublic accept<T>(visitor: ParseTreeVisitor<T>): T {\n\t\treturn visitor.visitErrorNode(this);\n\t}\n}\n"]}