{"version":3,"file":"ParseTreeWalker.js","sourceRoot":"","sources":["../../../src/tree/ParseTreeWalker.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAKH,2CAAwC;AACxC,iDAA8C;AAC9C,yCAAsC;AAGtC;IACQ,IAAI,CAA8B,QAAW,EAAE,CAAY;QACjE,IAAI,SAAS,GAAgB,EAAE,CAAC;QAChC,IAAI,UAAU,GAAa,EAAE,CAAC;QAE9B,IAAI,WAAW,GAA0B,CAAC,CAAC;QAC3C,IAAI,YAAY,GAAW,CAAC,CAAC;QAE7B,OAAO,WAAW,EAAE;YACnB,kBAAkB;YAClB,IAAI,WAAW,YAAY,qBAAS,EAAE;gBACrC,IAAI,QAAQ,CAAC,cAAc,EAAE;oBAC5B,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;iBACrC;aACD;iBAAM,IAAI,WAAW,YAAY,2BAAY,EAAE;gBAC/C,IAAI,QAAQ,CAAC,aAAa,EAAE;oBAC3B,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;iBACpC;aACD;iBAAM;gBACN,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,WAAuB,CAAC,CAAC;aAClD;YAED,sCAAsC;YACtC,IAAI,WAAW,CAAC,UAAU,GAAG,CAAC,EAAE;gBAC/B,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC5B,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAC9B,YAAY,GAAG,CAAC,CAAC;gBACjB,WAAW,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACtC,SAAS;aACT;YAED,+BAA+B;YAC/B,GAAG;gBACF,mBAAmB;gBACnB,IAAI,WAAW,YAAY,mBAAQ,EAAE;oBACpC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;iBACrC;gBAED,4BAA4B;gBAC5B,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;oBAC3B,WAAW,GAAG,SAAS,CAAC;oBACxB,YAAY,GAAG,CAAC,CAAC;oBACjB,MAAM;iBACN;gBAED,mCAAmC;gBACnC,IAAI,IAAI,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBAC3C,YAAY,EAAE,CAAC;gBACf,WAAW,GAAG,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;gBACvF,IAAI,WAAW,EAAE;oBAChB,MAAM;iBACN;gBAED,8BAA8B;gBAC9B,WAAW,GAAG,SAAS,CAAC,GAAG,EAAE,CAAC;gBAC9B,YAAY,GAAG,UAAU,CAAC,GAAG,EAAG,CAAC;aACjC,QAAQ,WAAW,EAAE;SACtB;IACF,CAAC;IAED;;;;;OAKG;IACO,SAAS,CAAC,QAA2B,EAAE,CAAW;QAC3D,IAAI,GAAG,GAAG,CAAC,CAAC,WAAgC,CAAC;QAC7C,IAAI,QAAQ,CAAC,cAAc,EAAE;YAC5B,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;SAC7B;QAED,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACzB,CAAC;IAES,QAAQ,CAAC,QAA2B,EAAE,CAAW;QAC1D,IAAI,GAAG,GAAG,CAAC,CAAC,WAAgC,CAAC;QAC7C,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACvB,IAAI,QAAQ,CAAC,aAAa,EAAE;YAC3B,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;SAC5B;IACF,CAAC;CACD;AAlFD,0CAkFC;AAED,WAAiB,eAAe;IAClB,uBAAO,GAAoB,IAAI,eAAe,EAAE,CAAC;AAC/D,CAAC,EAFgB,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAE/B","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:47.8252451-07:00\nimport { ParseTree } from \"./ParseTree\";\nimport { ParseTreeListener } from \"./ParseTreeListener\";\nimport { ErrorNode } from \"./ErrorNode\";\nimport { TerminalNode } from \"./TerminalNode\";\nimport { RuleNode } from \"./RuleNode\";\nimport { ParserRuleContext } from \"../ParserRuleContext\";\n\nexport class ParseTreeWalker {\n\tpublic walk<T extends ParseTreeListener>(listener: T, t: ParseTree): void {\n\t\tlet nodeStack: ParseTree[] = [];\n\t\tlet indexStack: number[] = [];\n\n\t\tlet currentNode: ParseTree | undefined = t;\n\t\tlet currentIndex: number = 0;\n\n\t\twhile (currentNode) {\n\t\t\t// pre-order visit\n\t\t\tif (currentNode instanceof ErrorNode) {\n\t\t\t\tif (listener.visitErrorNode) {\n\t\t\t\t\tlistener.visitErrorNode(currentNode);\n\t\t\t\t}\n\t\t\t} else if (currentNode instanceof TerminalNode) {\n\t\t\t\tif (listener.visitTerminal) {\n\t\t\t\t\tlistener.visitTerminal(currentNode);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.enterRule(listener, currentNode as RuleNode);\n\t\t\t}\n\n\t\t\t// Move down to first child, if exists\n\t\t\tif (currentNode.childCount > 0) {\n\t\t\t\tnodeStack.push(currentNode);\n\t\t\t\tindexStack.push(currentIndex);\n\t\t\t\tcurrentIndex = 0;\n\t\t\t\tcurrentNode = currentNode.getChild(0);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// No child nodes, so walk tree\n\t\t\tdo {\n\t\t\t\t// post-order visit\n\t\t\t\tif (currentNode instanceof RuleNode) {\n\t\t\t\t\tthis.exitRule(listener, currentNode);\n\t\t\t\t}\n\n\t\t\t\t// No parent, so no siblings\n\t\t\t\tif (nodeStack.length === 0) {\n\t\t\t\t\tcurrentNode = undefined;\n\t\t\t\t\tcurrentIndex = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Move to next sibling if possible\n\t\t\t\tlet last = nodeStack[nodeStack.length - 1];\n\t\t\t\tcurrentIndex++;\n\t\t\t\tcurrentNode = currentIndex < last.childCount ? last.getChild(currentIndex) : undefined;\n\t\t\t\tif (currentNode) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// No next sibling, so move up\n\t\t\t\tcurrentNode = nodeStack.pop();\n\t\t\t\tcurrentIndex = indexStack.pop()!;\n\t\t\t} while (currentNode);\n\t\t}\n\t}\n\n\t/**\n\t * The discovery of a rule node, involves sending two events: the generic\n\t * {@link ParseTreeListener#enterEveryRule} and a\n\t * {@link RuleContext}-specific event. First we trigger the generic and then\n\t * the rule specific. We to them in reverse order upon finishing the node.\n\t */\n\tprotected enterRule(listener: ParseTreeListener, r: RuleNode): void {\n\t\tlet ctx = r.ruleContext as ParserRuleContext;\n\t\tif (listener.enterEveryRule) {\n\t\t\tlistener.enterEveryRule(ctx);\n\t\t}\n\n\t\tctx.enterRule(listener);\n\t}\n\n\tprotected exitRule(listener: ParseTreeListener, r: RuleNode): void {\n\t\tlet ctx = r.ruleContext as ParserRuleContext;\n\t\tctx.exitRule(listener);\n\t\tif (listener.exitEveryRule) {\n\t\t\tlistener.exitEveryRule(ctx);\n\t\t}\n\t}\n}\n\nexport namespace ParseTreeWalker {\n\texport const DEFAULT: ParseTreeWalker = new ParseTreeWalker();\n}\n"]}