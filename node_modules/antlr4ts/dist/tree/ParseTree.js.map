{"version":3,"file":"ParseTree.js","sourceRoot":"","sources":["../../../src/tree/ParseTree.ts"],"names":[],"mappings":";AAAA;;;GAGG","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:47.5349010-07:00\n\nimport { Parser } from \"../Parser\";\nimport { ParseTreeVisitor } from \"./ParseTreeVisitor\";\nimport { RuleContext } from \"../RuleContext\";\nimport { SyntaxTree } from \"./SyntaxTree\";\n\n/** An interface to access the tree of {@link RuleContext} objects created\n *  during a parse that makes the data structure look like a simple parse tree.\n *  This node represents both internal nodes, rule invocations,\n *  and leaf nodes, token matches.\n *\n *  The payload is either a {@link Token} or a {@link RuleContext} object.\n */\nexport interface ParseTree extends SyntaxTree {\n\t// the following methods narrow the return type; they are not additional methods\n\t//@Override\n\treadonly parent: ParseTree | undefined;\n\n\t/**\n\t * Set the parent for this node.\n\t *\n\t * @since 4.7\n\t */\n\tsetParent(parent: RuleContext): void;\n\n\t//@Override\n\tgetChild(i: number): ParseTree;\n\n\t/** The {@link ParseTreeVisitor} needs a double dispatch method. */\n\taccept<T>(visitor: ParseTreeVisitor<T>): T;\n\n\t/** Return the combined text of all leaf nodes. Does not get any\n\t *  off-channel tokens (if any) so won't return whitespace and\n\t *  comments if they are sent to parser on hidden channel.\n\t */\n\treadonly text: string;\n\n\t/** Specialize toStringTree so that it can print out more information\n\t * \tbased upon the parser.\n\t */\n\ttoStringTree(parser?: Parser): string;\n}\n"]}