{"version":3,"file":"Tree.js","sourceRoot":"","sources":["../../../src/tree/Tree.ts"],"names":[],"mappings":";AAAA;;;GAGG","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-02T21:58:18.5966470-07:00\n\n/** The basic notion of a tree has a parent, a payload, and a list of children.\n *  It is the most abstract interface for all the trees used by ANTLR.\n */\nexport interface Tree {\n\t/** The parent of this node. If the return value is `undefined`, then this\n\t *  node is the root of the tree.\n\t */\n\treadonly parent: Tree | undefined;\n\n\t/**\n\t * This method returns whatever object represents the data at this note. For\n\t * example, for parse trees, the payload can be a {@link Token} representing\n\t * a leaf node or a {@link RuleContext} object representing a rule\n\t * invocation. For abstract syntax trees (ASTs), this is a {@link Token}\n\t * object.\n\t */\n\treadonly payload: { text?: string };\n\n\t/**\n\t * If there are children, get the `i`th value indexed from 0. Throws a `RangeError` if `i` is less than zero, or\n\t * greater than or equal to `childCount`.\n\t */\n\tgetChild(i: number): Tree;\n\n\t/** How many children are there? If there is none, then this\n\t *  node represents a leaf node.\n\t */\n\treadonly childCount: number;\n\n\t/** Print out a whole tree, not just a node, in LISP format\n\t *  `(root child1 .. childN)`. Print just a node if this is a leaf.\n\t */\n\ttoStringTree(): string;\n}\n"]}