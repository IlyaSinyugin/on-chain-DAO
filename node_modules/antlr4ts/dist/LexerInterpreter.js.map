{"version":3,"file":"LexerInterpreter.js","sourceRoot":"","sources":["../../src/LexerInterpreter.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;AAOH,mCAAgC;AAChC,+DAA4D;AAC5D,6CAAuC;AACvC,6CAAwC;AAGxC,IAAa,gBAAgB,GAA7B,sBAA8B,SAAQ,aAAK;IAU1C,YAAY,eAAuB,EAAW,UAAsB,EAAE,SAAmB,EAAE,YAAsB,EAAE,SAAmB,EAAE,GAAQ,EAAE,KAAiB;QAClK,KAAK,CAAC,KAAK,CAAC,CAAC;QAEb,IAAI,GAAG,CAAC,WAAW,kBAAkB,EAAE;YACtC,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;SAC1E;QAED,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;QACxC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAEhB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC3C,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,OAAO,GAAG,IAAI,qCAAiB,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;IAGD,IAAI,GAAG;QACN,OAAO,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC;IAGD,IAAI,eAAe;QAClB,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC9B,CAAC;IAGD,IAAI,SAAS;QACZ,OAAO,IAAI,CAAC,UAAU,CAAC;IACxB,CAAC;IAGD,IAAI,YAAY;QACf,OAAO,IAAI,CAAC,aAAa,CAAC;IAC3B,CAAC;IAGD,IAAI,SAAS;QACZ,OAAO,IAAI,CAAC,UAAU,CAAC;IACxB,CAAC;IAGD,IAAI,UAAU;QACb,OAAO,IAAI,CAAC,WAAW,CAAC;IACzB,CAAC;CACD,CAAA;AAhDA;IADC,oBAAO;qDACwB;AAoBhC;IADC,qBAAQ;2CAGR;AAGD;IADC,qBAAQ;uDAGR;AAGD;IADC,qBAAQ;iDAGR;AAGD;IADC,qBAAQ;oDAGR;AAGD;IADC,qBAAQ;iDAGR;AAGD;IADC,qBAAQ;kDAGR;AAvDW,gBAAgB;IAUU,WAAA,oBAAO,CAAA;GAVjC,gBAAgB,CAwD5B;AAxDY,4CAAgB","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:51.9954566-07:00\n\nimport { ATN } from \"./atn/ATN\";\nimport { ATNType } from \"./atn/ATNType\";\nimport { CharStream } from \"./CharStream\";\nimport { Lexer } from \"./Lexer\";\nimport { LexerATNSimulator } from \"./atn/LexerATNSimulator\";\nimport { NotNull } from \"./Decorators\";\nimport { Override } from \"./Decorators\";\nimport { Vocabulary } from \"./Vocabulary\";\n\nexport class LexerInterpreter extends Lexer {\n\tprotected _grammarFileName: string;\n\tprotected _atn: ATN;\n\n\tprotected _ruleNames: string[];\n\tprotected _channelNames: string[];\n\tprotected _modeNames: string[];\n\t@NotNull\n\tprivate _vocabulary: Vocabulary;\n\n\tconstructor(grammarFileName: string, @NotNull vocabulary: Vocabulary, ruleNames: string[], channelNames: string[], modeNames: string[], atn: ATN, input: CharStream) {\n\t\tsuper(input);\n\n\t\tif (atn.grammarType !== ATNType.LEXER) {\n\t\t\tthrow new Error(\"IllegalArgumentException: The ATN must be a lexer ATN.\");\n\t\t}\n\n\t\tthis._grammarFileName = grammarFileName;\n\t\tthis._atn = atn;\n\n\t\tthis._ruleNames = ruleNames.slice(0);\n\t\tthis._channelNames = channelNames.slice(0);\n\t\tthis._modeNames = modeNames.slice(0);\n\t\tthis._vocabulary = vocabulary;\n\t\tthis._interp = new LexerATNSimulator(atn, this);\n\t}\n\n\t@Override\n\tget atn(): ATN {\n\t\treturn this._atn;\n\t}\n\n\t@Override\n\tget grammarFileName(): string {\n\t\treturn this._grammarFileName;\n\t}\n\n\t@Override\n\tget ruleNames(): string[] {\n\t\treturn this._ruleNames;\n\t}\n\n\t@Override\n\tget channelNames(): string[] {\n\t\treturn this._channelNames;\n\t}\n\n\t@Override\n\tget modeNames(): string[] {\n\t\treturn this._modeNames;\n\t}\n\n\t@Override\n\tget vocabulary(): Vocabulary {\n\t\treturn this._vocabulary;\n\t}\n}\n"]}