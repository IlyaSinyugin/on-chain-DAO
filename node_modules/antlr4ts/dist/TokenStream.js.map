{"version":3,"file":"TokenStream.js","sourceRoot":"","sources":["../../src/TokenStream.ts"],"names":[],"mappings":";AAAA;;;GAGG","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:58.0433998-07:00\n\nimport { Interval } from \"./misc/Interval\";\nimport { IntStream } from \"./IntStream\";\nimport { RuleContext } from \"./RuleContext\";\nimport { Token } from \"./Token\";\nimport { TokenSource } from \"./TokenSource\";\n\n/**\n * An {@link IntStream} whose symbols are {@link Token} instances.\n */\nexport interface TokenStream extends IntStream {\n\t/**\n\t * Get the `Token` instance associated with the value returned by `LA(k)`. This method has the same pre- and\n\t * post-conditions as `IntStream.LA`. In addition, when the preconditions of this method are met, the return value\n\t * is non-undefined and the value of `LT(k).type === LA(k)`.\n\t *\n\t * A `RangeError` is thrown if `k<0` and fewer than `-k` calls to `consume()` have occurred from the beginning of\n\t * the stream before calling this method.\n\t *\n\t * See `IntStream.LA`\n\t */\n\tLT(k: number): Token;\n\n\t/**\n\t * Get the `Token` instance associated with the value returned by `LA(k)`. This method has the same pre- and\n\t * post-conditions as `IntStream.LA`. In addition, when the preconditions of this method are met, the return value\n\t * is non-undefined and the value of `tryLT(k).type === LA(k)`.\n\t *\n\t * The return value is `undefined` if `k<0` and fewer than `-k` calls to `consume()` have occurred from the\n\t * beginning of the stream before calling this method.\n\t *\n\t * See `IntStream.LA`\n\t */\n\ttryLT(k: number): Token | undefined;\n\n\t/**\n\t * Gets the {@link Token} at the specified `index` in the stream. When\n\t * the preconditions of this method are met, the return value is non-undefined.\n\t *\n\t * The preconditions for this method are the same as the preconditions of\n\t * {@link IntStream#seek}. If the behavior of `seek(index)` is\n\t * unspecified for the current state and given `index`, then the\n\t * behavior of this method is also unspecified.\n\t *\n\t * The symbol referred to by `index` differs from `seek()` only\n\t * in the case of filtering streams where `index` lies before the end\n\t * of the stream. Unlike `seek()`, this method does not adjust\n\t * `index` to point to a non-ignored symbol.\n\t *\n\t * @throws IllegalArgumentException if {code index} is less than 0\n\t * @throws UnsupportedOperationException if the stream does not support\n\t * retrieving the token at the specified index\n\t */\n\t//@NotNull\n\tget(i: number): Token;\n\n\t/**\n\t * Gets the underlying {@link TokenSource} which provides tokens for this\n\t * stream.\n\t */\n\t//@NotNull\n\treadonly tokenSource: TokenSource;\n\n\t/**\n\t * Return the text of all tokens within the specified `interval`. This\n\t * method behaves like the following code (including potential exceptions\n\t * for violating preconditions of {@link #get}, but may be optimized by the\n\t * specific implementation.\n\t *\n\t * ```\n\t * TokenStream stream = ...;\n\t * String text = \"\";\n\t * for (int i = interval.a; i <= interval.b; i++) {\n\t *   text += stream.get(i).text;\n\t * }\n\t * ```\n\t *\n\t * @param interval The interval of tokens within this stream to get text\n\t * for.\n\t * @returns The text of all tokens within the specified interval in this\n\t * stream.\n\t *\n\t * @throws NullPointerException if `interval` is `undefined`\n\t */\n\t//@NotNull\n\tgetText(/*@NotNull*/ interval: Interval): string;\n\n\t/**\n\t * Return the text of all tokens in the stream. This method behaves like the\n\t * following code, including potential exceptions from the calls to\n\t * {@link IntStream#size} and {@link #getText(Interval)}, but may be\n\t * optimized by the specific implementation.\n\t *\n\t * ```\n\t * TokenStream stream = ...;\n\t * String text = stream.getText(new Interval(0, stream.size));\n\t * ```\n\t *\n\t * @returns The text of all tokens in the stream.\n\t */\n\t//@NotNull\n\tgetText(): string;\n\n\t/**\n\t * Return the text of all tokens in the source interval of the specified\n\t * context. This method behaves like the following code, including potential\n\t * exceptions from the call to {@link #getText(Interval)}, but may be\n\t * optimized by the specific implementation.\n\t *\n\t * If `ctx.sourceInterval` does not return a valid interval of\n\t * tokens provided by this stream, the behavior is unspecified.\n\t *\n\t * ```\n\t * TokenStream stream = ...;\n\t * String text = stream.getText(ctx.sourceInterval);\n\t * ```\n\t *\n\t * @param ctx The context providing the source interval of tokens to get\n\t * text for.\n\t * @returns The text of all tokens within the source interval of `ctx`.\n\t */\n\t//@NotNull\n\tgetText(/*@NotNull*/ ctx: RuleContext): string;\n\n\t/**\n\t * Return the text of all tokens in this stream between `start` and\n\t * `stop` (inclusive).\n\t *\n\t * If the specified `start` or `stop` token was not provided by\n\t * this stream, or if the `stop` occurred before the `start`}\n\t * token, the behavior is unspecified.\n\t *\n\t * For streams which ensure that the `Token.tokenIndex` method is\n\t * accurate for all of its provided tokens, this method behaves like the\n\t * following code. Other streams may implement this method in other ways\n\t * provided the behavior is consistent with this at a high level.\n\t *\n\t * ```\n\t * TokenStream stream = ...;\n\t * String text = \"\";\n\t * for (int i = start.tokenIndex; i <= stop.tokenIndex; i++) {\n\t *   text += stream.get(i).text;\n\t * }\n\t * ```\n\t *\n\t * @param start The first token in the interval to get text for.\n\t * @param stop The last token in the interval to get text for (inclusive).\n\t * @returns The text of all tokens lying between the specified `start`\n\t * and `stop` tokens.\n\t *\n\t * @throws UnsupportedOperationException if this stream does not support\n\t * this method for the specified tokens\n\t */\n\t//@NotNull\n\tgetTextFromRange(start: any, stop: any): string;\n}\n"]}