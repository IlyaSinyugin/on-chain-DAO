{"version":3,"file":"BailErrorStrategy.js","sourceRoot":"","sources":["../../src/BailErrorStrategy.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;AAEH,wDAAwD;AAExD,iEAA8D;AAE9D,qEAAkE;AAClE,6CAAwC;AACxC,kFAA+E;AAK/E;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,uBAA+B,SAAQ,2CAAoB;IAC1D;;;;OAIG;IAEI,OAAO,CAAC,UAAkB,EAAE,CAAuB;QACzD,KAAK,IAAI,OAAO,GAAkC,UAAU,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,GAAG,OAAO,CAAC,MAAM,EAAE;YACxG,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC;SACtB;QAED,MAAM,IAAI,uDAA0B,CAAC,CAAC,CAAC,CAAC;IACzC,CAAC;IAED;;OAEG;IAEI,aAAa,CAAC,UAAkB;QACtC,IAAI,CAAC,GAAG,IAAI,+CAAsB,CAAC,UAAU,CAAC,CAAC;QAC/C,KAAK,IAAI,OAAO,GAAkC,UAAU,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,GAAG,OAAO,CAAC,MAAM,EAAE;YACxG,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC;SACtB;QAED,MAAM,IAAI,uDAA0B,CAAC,CAAC,CAAC,CAAC;IACzC,CAAC;IAED,uEAAuE;IAEhE,IAAI,CAAC,UAAkB;QAC7B,sBAAsB;IACvB,CAAC;CACD;AA1BA;IADC,qBAAQ;gDAOR;AAMD;IADC,qBAAQ;sDAQR;AAID;IADC,qBAAQ;6CAGR;AAhCF,8CAiCC","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:49.2855056-07:00\n\nimport { DefaultErrorStrategy } from \"./DefaultErrorStrategy\";\nimport { Parser } from \"./Parser\";\nimport { InputMismatchException } from \"./InputMismatchException\";\nimport { Override } from \"./Decorators\";\nimport { ParseCancellationException } from \"./misc/ParseCancellationException\";\nimport { ParserRuleContext } from \"./ParserRuleContext\";\nimport { RecognitionException } from \"./RecognitionException\";\nimport { Token } from \"./Token\";\n\n/**\n * This implementation of {@link ANTLRErrorStrategy} responds to syntax errors\n * by immediately canceling the parse operation with a\n * {@link ParseCancellationException}. The implementation ensures that the\n * {@link ParserRuleContext#exception} field is set for all parse tree nodes\n * that were not completed prior to encountering the error.\n *\n * This error strategy is useful in the following scenarios.\n *\n * * **Two-stage parsing:** This error strategy allows the first\n *   stage of two-stage parsing to immediately terminate if an error is\n *   encountered, and immediately fall back to the second stage. In addition to\n *   avoiding wasted work by attempting to recover from errors here, the empty\n *   implementation of {@link BailErrorStrategy#sync} improves the performance of\n *   the first stage.\n * * **Silent validation:** When syntax errors are not being\n *   reported or logged, and the parse result is simply ignored if errors occur,\n *   the {@link BailErrorStrategy} avoids wasting work on recovering from errors\n *   when the result will be ignored either way.\n *\n * ```\n * myparser.errorHandler = new BailErrorStrategy();\n * ```\n *\n * @see Parser.errorHandler\n */\nexport class BailErrorStrategy extends DefaultErrorStrategy {\n\t/** Instead of recovering from exception `e`, re-throw it wrapped\n\t *  in a {@link ParseCancellationException} so it is not caught by the\n\t *  rule function catches.  Use {@link Exception#getCause()} to get the\n\t *  original {@link RecognitionException}.\n\t */\n\t@Override\n\tpublic recover(recognizer: Parser, e: RecognitionException): void {\n\t\tfor (let context: ParserRuleContext | undefined = recognizer.context; context; context = context.parent) {\n\t\t\tcontext.exception = e;\n\t\t}\n\n\t\tthrow new ParseCancellationException(e);\n\t}\n\n\t/** Make sure we don't attempt to recover inline; if the parser\n\t *  successfully recovers, it won't throw an exception.\n\t */\n\t@Override\n\tpublic recoverInline(recognizer: Parser): Token {\n\t\tlet e = new InputMismatchException(recognizer);\n\t\tfor (let context: ParserRuleContext | undefined = recognizer.context; context; context = context.parent) {\n\t\t\tcontext.exception = e;\n\t\t}\n\n\t\tthrow new ParseCancellationException(e);\n\t}\n\n\t/** Make sure we don't attempt to recover from problems in subrules. */\n\t@Override\n\tpublic sync(recognizer: Parser): void {\n\t\t// intentionally empty\n\t}\n}\n"]}