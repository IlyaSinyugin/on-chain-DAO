{"version":3,"file":"TokenFactory.js","sourceRoot":"","sources":["../../src/TokenFactory.ts"],"names":[],"mappings":";AAAA;;;GAGG","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:57.8783640-07:00\n\nimport { CharStream } from \"./CharStream\";\nimport { Token } from \"./Token\";\nimport { TokenSource } from \"./TokenSource\";\n\n/** The default mechanism for creating tokens. It's used by default in Lexer and\n *  the error handling strategy (to create missing tokens).  Notifying the parser\n *  of a new factory means that it notifies its token source and error strategy.\n */\nexport interface TokenFactory {\n\t/** This is the method used to create tokens in the lexer and in the\n\t *  error handling strategy. If text!=undefined, than the start and stop positions\n\t *  are wiped to -1 in the text override is set in the CommonToken.\n\t */\n\t//@NotNull\n\tcreate(\n\t\t/*@NotNull*/\n\t\tsource: { source?: TokenSource, stream?: CharStream },\n\t\ttype: number,\n\t\ttext: string | undefined,\n\t\tchannel: number,\n\t\tstart: number,\n\t\tstop: number,\n\t\tline: number,\n\t\tcharPositionInLine: number): Token;\n\n\t/** Generically useful */\n\t//@NotNull\n\tcreateSimple(type: number, text: string): Token;\n}\n"]}