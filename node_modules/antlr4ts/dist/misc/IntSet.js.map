{"version":3,"file":"IntSet.js","sourceRoot":"","sources":["../../../src/misc/IntSet.ts"],"names":[],"mappings":";AAAA;;;GAGG","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:41.7132712-07:00\n\n/**\n * A generic set of integers.\n *\n * @see IntervalSet\n */\nexport interface IntSet {\n\t/**\n\t * Adds the specified value to the current set.\n\t *\n\t * @param el the value to add\n\t *\n\t * @exception IllegalStateException if the current set is read-only\n\t */\n\tadd(el: number): void;\n\n\t/**\n\t * Modify the current {@link IntSet} object to contain all elements that are\n\t * present in itself, the specified `set`, or both.\n\t *\n\t * @param set The set to add to the current set. An `undefined` argument is\n\t * treated as though it were an empty set.\n\t * @returns `this` (to support chained calls)\n\t *\n\t * @exception IllegalStateException if the current set is read-only\n\t */\n\t//@NotNull\n\taddAll(/*@Nullable*/ set: IntSet): IntSet;\n\n\t/**\n\t * Return a new {@link IntSet} object containing all elements that are\n\t * present in both the current set and the specified set `a`.\n\t *\n\t * @param a The set to intersect with the current set.\n\t * @returns A new {@link IntSet} instance containing the intersection of the\n\t * current set and `a`.\n\t */\n\tand(a: IntSet): IntSet;\n\n\t/**\n\t * Return a new {@link IntSet} object containing all elements that are\n\t * present in `elements` but not present in the current set. The\n\t * following expressions are equivalent for input non-`undefined` {@link IntSet}\n\t * instances `x` and `y`.\n\t *\n\t * * `x.complement(y)`\n\t * * `y.subtract(x)`\n\t *\n\t * @param elements The set to compare with the current set.\n\t * @returns A new {@link IntSet} instance containing the elements present in\n\t * `elements` but not present in the current set.\n\t */\n\tcomplement(elements: IntSet): IntSet;\n\n\t/**\n\t * Return a new {@link IntSet} object containing all elements that are\n\t * present in the current set, the specified set `a`, or both.\n\t *\n\t * This method is similar to {@link #addAll(IntSet)}, but returns a new\n\t * {@link IntSet} instance instead of modifying the current set.\n\t *\n\t * @param a The set to union with the current set. An `undefined` argument\n\t * is treated as though it were an empty set.\n\t * @returns A new {@link IntSet} instance containing the union of the current\n\t * set and `a`. The value `undefined` may be returned in place of an\n\t * empty result set.\n\t */\n\t//@Nullable\n\tor(/*@Nullable*/ a: IntSet): IntSet;\n\n\t/**\n\t * Return a new {@link IntSet} object containing all elements that are\n\t * present in the current set but not present in the input set `a`.\n\t * The following expressions are equivalent for input non-`undefined`\n\t * {@link IntSet} instances `x` and `y`.\n\t *\n\t * * `y.subtract(x)`\n\t * * `x.complement(y)`\n\t *\n\t * @param a The set to compare with the current set. A `undefined`\n\t * argument is treated as though it were an empty set.\n\t * @returns A new {@link IntSet} instance containing the elements present in\n\t * `elements` but not present in the current set. The value\n\t * `undefined` may be returned in place of an empty result set.\n\t */\n\t//@Nullable\n\tsubtract(/*@Nullable*/ a: IntSet): IntSet;\n\n\t/**\n\t * Return the total number of elements represented by the current set.\n\t *\n\t * @returns the total number of elements represented by the current set,\n\t * regardless of the manner in which the elements are stored.\n\t */\n\treadonly size: number;\n\n\t/**\n\t * Returns `true` if this set contains no elements.\n\t *\n\t * @returns `true` if the current set contains no elements; otherwise,\n\t * `false`.\n\t */\n\treadonly isNil: boolean;\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t//@Override\n\tequals(obj: any): boolean;\n\n\t/**\n\t * Returns `true` if the set contains the specified element.\n\t *\n\t * @param el The element to check for.\n\t * @returns `true` if the set contains `el`; otherwise `false`.\n\t */\n\tcontains(el: number): boolean;\n\n\t/**\n\t * Removes the specified value from the current set. If the current set does\n\t * not contain the element, no changes are made.\n\t *\n\t * @param el the value to remove\n\t *\n\t * @exception IllegalStateException if the current set is read-only\n\t */\n\tremove(el: number): void;\n\n\t/**\n\t * Return an array containing the elements represented by the current set. The\n\t * array is returned in ascending numerical order.\n\t *\n\t * @returns An array containing all element present in the current set, sorted\n\t * in ascending numerical order.\n\t */\n\t//@NotNull\n\ttoArray(): number[];\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t//@Override\n\ttoString(): string;\n}\n"]}