{"version":3,"file":"Utils.js","sourceRoot":"","sources":["../../../src/misc/Utils.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:45.0833752-07:00\n\n// Taking a case-by-case approach to pporting this functionaltiy\n// as much of it may be supported natively by JavaScript. Or otherwise need\n// substantial rethink\n\nimport { NotNull } from \"../Decorators\";\nimport { Equatable } from \"./Stubs\";\nimport { IntegerList } from \"./IntegerList\";\n\nexport function escapeWhitespace(s: string, escapeSpaces: boolean): string {\n\treturn escapeSpaces ? s.replace(/ /, \"\\u00B7\") : s\n\t\t.replace(/\\t/, \"\\\\t\")\n\t\t.replace(/\\n/, \"\\\\n\")\n\t\t.replace(/\\r/, \"\\\\r\");\n}\n\n// Seriously: why isn't this built in to java? ugh!\nexport function join(collection: Iterable<any>, separator: string): string {\n\tlet buf = \"\";\n\tlet first = true;\n\tfor (let current of collection) {\n\t\tif (first) {\n\t\t\tfirst = false;\n\t\t} else {\n\t\t\tbuf += separator;\n\t\t}\n\n\t\tbuf += current;\n\t}\n\n\treturn buf;\n}\n\nexport function equals(x: Equatable | undefined, y: Equatable | undefined): boolean {\n\tif (x === y) {\n\t\treturn true;\n\t}\n\n\tif (x === undefined || y === undefined) {\n\t\treturn false;\n\t}\n\n\treturn x.equals(y);\n}\n\n// export function numNonnull(data: any[]): number {\n// \tlet n: number =  0;\n// \tif ( data == null ) return n;\n// \tfor (let o of data) {\n// \t\tif ( o!=null ) n++;\n// \t}\n// \treturn n;\n// }\n\n// export function removeAllElements<T>(data: Collection<T>, value: T): void {\n// \tif ( data==null ) return;\n// \twhile ( data.contains(value) ) data.remove(value);\n// }\n\n// export function writeFile(@NotNull file: File, @NotNull content: Uint8Array): void {\n// \tlet fos: FileOutputStream = new FileOutputStream(file);\n// \ttry {\n// \t\tfos.write(content);\n// \t} finally {\n// \t\tfos.close();\n// \t}\n// }\n\n// export function writeFile(@NotNull fileName: string, @NotNull content: string): void {\n// \twriteFile(fileName, content, null);\n// }\n\n// export function writeFile(@NotNull fileName: string, @NotNull content: string, @Nullable encoding: string): void {\n// \tlet f: File =  new File(fileName);\n// \tlet fos: FileOutputStream =  new FileOutputStream(f);\n// \tlet osw: OutputStreamWriter;\n// \tif (encoding != null) {\n// \t\tosw = new OutputStreamWriter(fos, encoding);\n// \t}\n// \telse {\n// \t\tosw = new OutputStreamWriter(fos);\n// \t}\n\n// \ttry {\n// \t\tosw.write(content);\n// \t}\n// \tfinally {\n// \t\tosw.close();\n// \t}\n// }\n\n// @NotNull\n// export function readFile(@NotNull fileName: string): char[] {\n// \treturn readFile(fileName, null);\n// }\n\n// @NotNull\n// export function readFile(@NotNull fileName: string, @Nullable encoding: string): char[] {\n// \tlet f: File =  new File(fileName);\n// \tlet size: number =  (int)f.length();\n// \tlet isr: InputStreamReader;\n// \tlet fis: FileInputStream =  new FileInputStream(fileName);\n// \tif ( encoding!=null ) {\n// \t\tisr = new InputStreamReader(fis, encoding);\n// \t}\n// \telse {\n// \t\tisr = new InputStreamReader(fis);\n// \t}\n// \tlet data: char[] =  null;\n// \ttry {\n// \t\tdata = new char[size];\n// \t\tlet n: number =  isr.read(data);\n// \t\tif (n < data.length) {\n// \t\t\tdata = Arrays.copyOf(data, n);\n// \t\t}\n// \t}\n// \tfinally {\n// \t\tisr.close();\n// \t}\n// \treturn data;\n// }\n\n// export function removeAll<T>(@NotNull predicate: List<T> list,@NotNull Predicate<? super T>): void {\n// \tlet j: number =  0;\n// \tfor (let i = 0; i < list.size; i++) {\n// \t\tlet item: T =  list.get(i);\n// \t\tif (!predicate.eval(item)) {\n// \t\t\tif (j != i) {\n// \t\t\t\tlist.set(j, item);\n// \t\t\t}\n\n// \t\t\tj++;\n// \t\t}\n// \t}\n\n// \tif (j < list.size) {\n// \t\tlist.subList(j, list.size).clear();\n// \t}\n// }\n\n// export function removeAll<T>(@NotNull predicate: Iterable<T> iterable,@NotNull Predicate<? super T>): void {\n// \tif (iterable instanceof List<?>) {\n// \t\tremoveAll((List<T>)iterable, predicate);\n// \t\treturn;\n// \t}\n\n// \tfor (Iterator<T> iterator = iterable.iterator(); iterator.hasNext(); ) {\n// \t\tlet item: T =  iterator.next();\n// \t\tif (predicate.eval(item)) {\n// \t\t\titerator.remove();\n// \t\t}\n// \t}\n// }\n\n/** Convert array of strings to string&rarr;index map. Useful for\n *  converting rulenames to name&rarr;ruleindex map.\n */\nexport function toMap(keys: string[]): Map<string, number> {\n\tlet m: Map<string, number> = new Map<string, number>();\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tm.set(keys[i], i);\n\t}\n\n\treturn m;\n}\n\nexport function toCharArray(str: string): Uint16Array;\nexport function toCharArray(data: IntegerList): Uint16Array;\nexport function toCharArray(str: string | IntegerList): Uint16Array {\n\tif (typeof str === \"string\") {\n\t\tlet result = new Uint16Array(str.length);\n\t\tfor (let i = 0; i < str.length; i++) {\n\t\t\tresult[i] = str.charCodeAt(i);\n\t\t}\n\n\t\treturn result;\n\t} else {\n\t\treturn str.toCharArray();\n\t}\n}\n\n// /**\n// \t* @since 4.5\n// \t*/\n// @NotNull\n// export function toSet(@NotNull bits: BitSet): IntervalSet {\n// \tlet s: IntervalSet =  new IntervalSet();\n// \tlet i: number =  bits.nextSetBit(0);\n// \twhile ( i >= 0 ) {\n// \t\ts.add(i);\n// \t\ti = bits.nextSetBit(i+1);\n// \t}\n// \treturn s;\n// }\n"]}