{"version":3,"file":"Array2DHashSet.js","sourceRoot":"","sources":["../../../src/misc/Array2DHashSet.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-03T02:09:41.7434086-07:00\n\nimport * as assert from \"assert\";\nimport { DefaultEqualityComparator } from \"./DefaultEqualityComparator\";\nimport { EqualityComparator } from \"./EqualityComparator\";\nimport { NotNull, Nullable, Override, SuppressWarnings } from \"../Decorators\";\nimport { JavaCollection, JavaSet } from \"./Stubs\";\nimport { ObjectEqualityComparator } from \"./ObjectEqualityComparator\";\nimport { MurmurHash } from \"./MurmurHash\";\n\n/** {@link Set} implementation with closed hashing (open addressing). */\n\n// NOTE:  JavaScript's Set interface has on significant different diffrence from Java's:\n// \t\t  e.g. the return type of add() differs!\n//        For this reason I've commented tweaked the implements clause\n\nconst INITAL_CAPACITY: number = 16; // must be power of 2\nconst LOAD_FACTOR: number = 0.75;\n\nexport class Array2DHashSet<T> implements JavaSet<T> {\n\t@NotNull\n\tprotected comparator: EqualityComparator<T>;\n\n\tprotected buckets: Array<T[] | undefined>;\n\n\t/** How many elements in set */\n\tprotected n: number = 0;\n\n\tprotected threshold: number = Math.floor(INITAL_CAPACITY * LOAD_FACTOR); // when to expand\n\n\tconstructor(comparator?: EqualityComparator<T>, initialCapacity?: number);\n\tconstructor(set: Array2DHashSet<T>);\n\tconstructor(\n\t\tcomparatorOrSet?: EqualityComparator<T> | Array2DHashSet<T>,\n\t\tinitialCapacity: number = INITAL_CAPACITY) {\n\n\t\tif (comparatorOrSet instanceof Array2DHashSet) {\n\t\t\tthis.comparator = comparatorOrSet.comparator;\n\t\t\tthis.buckets = comparatorOrSet.buckets.slice(0);\n\t\t\tfor (let i = 0; i < this.buckets.length; i++) {\n\t\t\t\tlet bucket = this.buckets[i];\n\t\t\t\tif (bucket) {\n\t\t\t\t\tthis.buckets[i] = bucket.slice(0);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.n = comparatorOrSet.n;\n\t\t\tthis.threshold = comparatorOrSet.threshold;\n\t\t} else {\n\t\t\tthis.comparator = comparatorOrSet || DefaultEqualityComparator.INSTANCE;\n\t\t\tthis.buckets = this.createBuckets(initialCapacity);\n\t\t}\n\t}\n\n\t/**\n\t * Add `o` to set if not there; return existing value if already\n\t * there. This method performs the same operation as {@link #add} aside from\n\t * the return value.\n\t */\n\tpublic getOrAdd(o: T): T {\n\t\tif (this.n > this.threshold) {\n\t\t\tthis.expand();\n\t\t}\n\t\treturn this.getOrAddImpl(o);\n\t}\n\n\tprotected getOrAddImpl(o: T): T {\n\t\tlet b: number = this.getBucket(o);\n\t\tlet bucket = this.buckets[b];\n\n\t\t// NEW BUCKET\n\t\tif (!bucket) {\n\t\t\tbucket = [o];\n\t\t\tthis.buckets[b] = bucket;\n\t\t\tthis.n++;\n\t\t\treturn o;\n\t\t}\n\n\t\t// LOOK FOR IT IN BUCKET\n\t\tfor (let existing of bucket) {\n\t\t\tif (this.comparator.equals(existing, o)) {\n\t\t\t\treturn existing; // found existing, quit\n\t\t\t}\n\t\t}\n\n\t\t// FULL BUCKET, expand and add to end\n\t\tbucket.push(o);\n\t\tthis.n++;\n\t\treturn o;\n\t}\n\n\tpublic get(o: T): T | undefined {\n\t\tif (o == null) {\n\t\t\treturn o;\n\t\t}\n\t\tlet b: number = this.getBucket(o);\n\t\tlet bucket = this.buckets[b];\n\t\tif (!bucket) {\n\t\t\t// no bucket\n\t\t\treturn undefined;\n\t\t}\n\n\t\tfor (let e of bucket) {\n\t\t\tif (this.comparator.equals(e, o)) {\n\t\t\t\treturn e;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprotected getBucket(o: T): number {\n\t\tlet hash: number = this.comparator.hashCode(o);\n\t\tlet b: number = hash & (this.buckets.length - 1); // assumes len is power of 2\n\t\treturn b;\n\t}\n\n\t@Override\n\tpublic hashCode(): number {\n\t\tlet hash: number = MurmurHash.initialize();\n\t\tfor (let bucket of this.buckets) {\n\t\t\tif (bucket == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (let o of bucket) {\n\t\t\t\tif (o == null) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\thash = MurmurHash.update(hash, this.comparator.hashCode(o));\n\t\t\t}\n\t\t}\n\n\t\thash = MurmurHash.finish(hash, this.size);\n\t\treturn hash;\n\t}\n\n\t@Override\n\tpublic equals(o: any): boolean {\n\t\tif (o === this) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!(o instanceof Array2DHashSet)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (o.size !== this.size) {\n\t\t\treturn false;\n\t\t}\n\t\tlet same: boolean = this.containsAll(o);\n\t\treturn same;\n\t}\n\n\tprotected expand(): void {\n\t\tlet old = this.buckets;\n\t\tlet newCapacity: number = this.buckets.length * 2;\n\t\tlet newTable: Array<T[] | undefined> = this.createBuckets(newCapacity);\n\t\tthis.buckets = newTable;\n\t\tthis.threshold = Math.floor(newCapacity * LOAD_FACTOR);\n//\t\tSystem.out.println(\"new size=\"+newCapacity+\", thres=\"+threshold);\n\t\t// rehash all existing entries\n\t\tlet oldSize: number = this.size;\n\t\tfor (let bucket of old) {\n\t\t\tif (!bucket) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor (let o of bucket) {\n\t\t\t\tlet b: number = this.getBucket(o);\n\t\t\t\tlet newBucket: T[] | undefined = this.buckets[b];\n\t\t\t\tif (!newBucket) {\n\t\t\t\t\tnewBucket = [];\n\t\t\t\t\tthis.buckets[b] = newBucket;\n\t\t\t\t}\n\n\t\t\t\tnewBucket.push(o);\n\t\t\t}\n\t\t}\n\n\t\tassert(this.n === oldSize);\n\t}\n\n\t@Override\n\tpublic add(t: T): boolean {\n\t\tlet existing: T = this.getOrAdd(t);\n\t\treturn existing === t;\n\t}\n\n\t@Override\n\tget size(): number {\n\t\treturn this.n;\n\t}\n\n\t@Override\n\tget isEmpty(): boolean {\n\t\treturn this.n === 0;\n\t}\n\n\t@Override\n\tpublic contains(o: any): boolean {\n\t\treturn this.containsFast(this.asElementType(o));\n\t}\n\n\tpublic containsFast(@Nullable obj: T): boolean {\n\t\tif (obj == null) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.get(obj) != null;\n\t}\n\n\t@Override\n\tpublic *[Symbol.iterator](): IterableIterator<T> {\n\t\tyield* this.toArray();\n\t}\n\n\t@Override\n\tpublic toArray(): T[] {\n\t\tconst a = new Array<T>(this.size);\n\n\t\t// Copy elements from the nested arrays into the destination array\n\t\tlet i: number = 0; // Position within destination array\n\t\tfor (let bucket of this.buckets) {\n\t\t\tif (bucket == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor (let o of bucket) {\n\t\t\t\tif (o == null) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ta[i++] = o;\n\t\t\t}\n\t\t}\n\t\treturn a;\n\t}\n\n\t@Override\n\tpublic containsAll(collection: JavaCollection<T>): boolean {\n\t\tif (collection instanceof Array2DHashSet) {\n\t\t\tlet s = collection as any as Array2DHashSet<T>;\n\t\t\tfor (let bucket of s.buckets) {\n\t\t\t\tif (bucket == null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor (let o of bucket) {\n\t\t\t\t\tif (o == null) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (!this.containsFast(this.asElementType(o))) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor (let o of collection) {\n\t\t\t\tif (!this.containsFast(this.asElementType(o))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic addAll(c: Iterable<T>): boolean {\n\t\tlet changed: boolean = false;\n\n\t\tfor (let o of c) {\n\t\t\tlet existing: T = this.getOrAdd(o);\n\t\t\tif (existing !== o) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t}\n\t\treturn changed;\n\t}\n\n\t@Override\n\tpublic clear(): void {\n\t\tthis.buckets = this.createBuckets(INITAL_CAPACITY);\n\t\tthis.n = 0;\n\t\tthis.threshold = Math.floor(INITAL_CAPACITY * LOAD_FACTOR);\n\t}\n\n\t@Override\n\tpublic toString(): string {\n\t\tif (this.size === 0) {\n\t\t\treturn \"{}\";\n\t\t}\n\n\t\tlet buf = \"{\";\n\t\tlet first: boolean = true;\n\t\tfor (let bucket of this.buckets) {\n\t\t\tif (bucket == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (let o of bucket) {\n\t\t\t\tif (o == null) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (first) {\n\t\t\t\t\tfirst = false;\n\t\t\t\t} else {\n\t\t\t\t\tbuf += \", \";\n\t\t\t\t}\n\t\t\t\tbuf += o.toString();\n\t\t\t}\n\t\t}\n\t\tbuf += \"}\";\n\t\treturn buf;\n\t}\n\n\tpublic toTableString(): string {\n\t\tlet buf = \"\";\n\t\tfor (let bucket of this.buckets) {\n\t\t\tif (bucket == null) {\n\t\t\t\tbuf += \"null\\n\";\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tbuf += \"[\";\n\t\t\tlet first: boolean = true;\n\t\t\tfor (let o of bucket) {\n\t\t\t\tif (first) {\n\t\t\t\t\tfirst = false;\n\t\t\t\t} else {\n\t\t\t\t\tbuf += \" \";\n\t\t\t\t}\n\t\t\t\tif (o == null) {\n\t\t\t\t\tbuf += \"_\";\n\t\t\t\t} else {\n\t\t\t\t\tbuf += o.toString();\n\t\t\t\t}\n\t\t\t}\n\t\t\tbuf += \"]\\n\";\n\t\t}\n\t\treturn buf;\n\t}\n\n\t/**\n\t * Return `o` as an instance of the element type `T`. If\n\t * `o` is non-undefined but known to not be an instance of `T`, this\n\t * method returns `undefined`. The base implementation does not perform any\n\t * type checks; override this method to provide strong type checks for the\n\t * {@link #contains} and {@link #remove} methods to ensure the arguments to\n\t * the {@link EqualityComparator} for the set always have the expected\n\t * types.\n\t *\n\t * @param o the object to try and cast to the element type of the set\n\t * @returns `o` if it could be an instance of `T`, otherwise\n\t * `undefined`.\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tprotected asElementType(o: any): T {\n\t\treturn o as T;\n\t}\n\n\t/**\n\t * Return an array of `T[]` with length `capacity`.\n\t *\n\t * @param capacity the length of the array to return\n\t * @returns the newly constructed array\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tprotected createBuckets(capacity: number): Array<T[] | undefined> {\n\t\treturn new Array<T[]>(capacity);\n\t}\n}\n"]}