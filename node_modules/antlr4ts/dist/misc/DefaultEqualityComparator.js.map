{"version":3,"file":"DefaultEqualityComparator.js","sourceRoot":"","sources":["../../../src/misc/DefaultEqualityComparator.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;AAGH,8CAAyC;AAEzC,6CAA0C;AAC1C,yEAAsE;AAEtE;;;;;GAKG;AACH;IAGC;;;;;OAKG;IAEI,QAAQ,CAAC,GAAQ;QACvB,IAAI,GAAG,IAAI,IAAI,EAAE;YAChB,OAAO,CAAC,CAAC;SACT;aAAM,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;YAC9D,OAAO,uBAAU,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SAClC;aAAM;YACN,OAAO,mDAAwB,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAgB,CAAC,CAAC;SACpE;IACF,CAAC;IAED;;;;;;;;OAQG;IAEI,MAAM,CAAC,CAAM,EAAE,CAAM;QAC3B,IAAI,CAAC,IAAI,IAAI,EAAE;YACd,OAAO,CAAC,IAAI,IAAI,CAAC;SACjB;aAAM,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;YAC1D,OAAO,CAAC,KAAK,CAAC,CAAC;SACf;aAAM;YACN,OAAO,mDAAwB,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAc,EAAE,CAAc,CAAC,CAAC;SAChF;IACF,CAAC;;AArCsB,kCAAQ,GAA8B,IAAI,yBAAyB,EAAE,CAAC;AAS7F;IADC,qBAAQ;yDASR;AAYD;IADC,qBAAQ;uDASR;AAtCF,8DAuCC","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\nimport { EqualityComparator } from \"./EqualityComparator\";\nimport { Override } from \"../Decorators\";\nimport { Equatable } from \"./Stubs\";\nimport { MurmurHash } from \"./MurmurHash\";\nimport { ObjectEqualityComparator } from \"./ObjectEqualityComparator\";\n\n/**\n * This default implementation of {@link EqualityComparator} uses object equality\n * for comparisons by calling {@link Object#hashCode} and {@link Object#equals}.\n *\n * @author Sam Harwell\n */\nexport class DefaultEqualityComparator implements EqualityComparator<any> {\n\tpublic static readonly INSTANCE: DefaultEqualityComparator = new DefaultEqualityComparator();\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * This implementation returns\n\t * `obj.`{@link Object#hashCode hashCode()}.\n\t */\n\t@Override\n\tpublic hashCode(obj: any): number {\n\t\tif (obj == null) {\n\t\t\treturn 0;\n\t\t} else if (typeof obj === \"string\" || typeof obj === \"number\") {\n\t\t\treturn MurmurHash.hashCode([obj]);\n\t\t} else {\n\t\t\treturn ObjectEqualityComparator.INSTANCE.hashCode(obj as Equatable);\n\t\t}\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * This implementation relies on object equality. If both objects are\n\t * `undefined` or `null`, this method returns `true`. Otherwise if only\n\t * `a` is `undefined` or `null`, this method returns `false`. Otherwise,\n\t * this method returns the result of\n\t * `a.`{@link Object#equals equals}`(b)`.\n\t */\n\t@Override\n\tpublic equals(a: any, b: any): boolean {\n\t\tif (a == null) {\n\t\t\treturn b == null;\n\t\t} else if (typeof a === \"string\" || typeof a === \"number\") {\n\t\t\treturn a === b;\n\t\t} else {\n\t\t\treturn ObjectEqualityComparator.INSTANCE.equals(a as Equatable, b as Equatable);\n\t\t}\n\t}\n}\n"]}