{"version":3,"file":"MurmurHash.js","sourceRoot":"","sources":["../../../src/misc/MurmurHash.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-03T02:09:42.1239660-07:00\nimport { Equatable } from \"./Stubs\";\n\n/**\n *\n * @author Sam Harwell\n */\nexport namespace MurmurHash {\n\n\tconst DEFAULT_SEED: number = 0;\n\n\t/**\n\t * Initialize the hash using the specified `seed`.\n\t *\n\t * @param seed the seed (optional)\n\t * @returns the intermediate hash value\n\t */\n\texport function initialize(seed: number = DEFAULT_SEED): number {\n\t\treturn seed;\n\t}\n\n\t/**\n\t * Update the intermediate hash value for the next input `value`.\n\t *\n\t * @param hash the intermediate hash value\n\t * @param value the value to add to the current hash\n\t * @returns the updated intermediate hash value\n\t */\n\texport function update(hash: number, value: number | string | Equatable | null | undefined): number {\n\t\tconst c1: number = 0xCC9E2D51;\n\t\tconst c2: number = 0x1B873593;\n\t\tconst r1: number = 15;\n\t\tconst r2: number = 13;\n\t\tconst m: number = 5;\n\t\tconst n: number = 0xE6546B64;\n\n\t\tif (value == null) {\n\t\t\tvalue = 0;\n\t\t} else if (typeof value === \"string\") {\n\t\t\tvalue = hashString(value);\n\t\t} else if (typeof value === \"object\") {\n\t\t\tvalue = value.hashCode();\n\t\t}\n\n\t\tlet k: number = value;\n\t\tk = Math.imul(k, c1);\n\t\tk = (k << r1) | (k >>> (32 - r1));\n\t\tk = Math.imul(k, c2);\n\n\t\thash = hash ^ k;\n\t\thash = (hash << r2) | (hash >>> (32 - r2));\n\t\thash = Math.imul(hash, m) + n;\n\n\t\treturn hash & 0xFFFFFFFF;\n\t}\n\n\n\t/**\n\t * Apply the final computation steps to the intermediate value `hash`\n\t * to form the final result of the MurmurHash 3 hash function.\n\t *\n\t * @param hash the intermediate hash value\n\t * @param numberOfWords the number of integer values added to the hash\n\t * @returns the final hash result\n\t */\n\texport function finish(hash: number, numberOfWords: number): number {\n\t\thash = hash ^ (numberOfWords * 4);\n\t\thash = hash ^ (hash >>> 16);\n\t\thash = Math.imul(hash, 0x85EBCA6B);\n\t\thash = hash ^ (hash >>> 13);\n\t\thash = Math.imul(hash, 0xC2B2AE35);\n\t\thash = hash ^ (hash >>> 16);\n\t\treturn hash;\n\t}\n\n\t/**\n\t * Utility function to compute the hash code of an array using the\n\t * MurmurHash algorithm.\n\t *\n\t * @param <T> the array element type\n\t * @param data the array data\n\t * @param seed the seed for the MurmurHash algorithm\n\t * @returns the hash code of the data\n\t */\n\texport function hashCode<T extends number | string | Equatable>(data: Iterable<T>, seed: number = DEFAULT_SEED): number {\n\t\tlet hash: number = initialize(seed);\n\t\tlet length = 0;\n\t\tfor (let value of data) {\n\t\t\thash = update(hash, value);\n\t\t\tlength++;\n\t\t}\n\n\t\thash = finish(hash, length);\n\t\treturn hash;\n\t}\n\n\t/**\n\t * Function to hash a string. Based on the implementation found here:\n\t * http://stackoverflow.com/a/7616484\n\t */\n\tfunction hashString(str: string): number {\n\t\tlet len = str.length;\n\t\tif (len === 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet hash = 0;\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tlet c = str.charCodeAt(i);\n\t\t\thash = (((hash << 5) >>> 0) - hash) + c;\n\t\t\thash |= 0;\n\t\t}\n\n\t\treturn hash;\n\t}\n}\n"]}