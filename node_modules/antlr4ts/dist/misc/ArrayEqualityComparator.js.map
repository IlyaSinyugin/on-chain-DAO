{"version":3,"file":"ArrayEqualityComparator.js","sourceRoot":"","sources":["../../../src/misc/ArrayEqualityComparator.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;AAIH,8CAAyC;AAEzC,6CAA0C;AAC1C,yEAAsE;AAEtE;;;;;GAKG;AACH;IAGC;;;;;OAKG;IAEI,QAAQ,CAAC,GAAgB;QAC/B,IAAI,GAAG,IAAI,IAAI,EAAE;YAChB,OAAO,CAAC,CAAC;SACT;QAED,OAAO,uBAAU,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACpC,CAAC;IAED;;;;;;;;OAQG;IAEI,MAAM,CAAC,CAAc,EAAE,CAAc;QAC3C,IAAI,CAAC,IAAI,IAAI,EAAE;YACd,OAAO,CAAC,IAAI,IAAI,CAAC;SACjB;aAAM,IAAI,CAAC,IAAI,IAAI,EAAE;YACrB,OAAO,KAAK,CAAC;SACb;QAED,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE;YAC1B,OAAO,KAAK,CAAC;SACb;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,IAAI,CAAC,mDAAwB,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;gBAC1D,OAAO,KAAK,CAAC;aACb;SACD;QAED,OAAO,IAAI,CAAC;IACb,CAAC;;AA7CsB,gCAAQ,GAA4B,IAAI,uBAAuB,EAAE,CAAC;AASzF;IADC,qBAAQ;uDAOR;AAYD;IADC,qBAAQ;qDAmBR;AA9CF,0DAgDC","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-03T02:09:42.2127260-07:00\nimport { EqualityComparator } from \"./EqualityComparator\";\nimport { Override } from \"../Decorators\";\nimport { Equatable } from \"./Stubs\";\nimport { MurmurHash } from \"./MurmurHash\";\nimport { ObjectEqualityComparator } from \"./ObjectEqualityComparator\";\n\n/**\n * This default implementation of {@link EqualityComparator} uses object equality\n * for comparisons by calling {@link Object#hashCode} and {@link Object#equals}.\n *\n * @author Sam Harwell\n */\nexport class ArrayEqualityComparator implements EqualityComparator<Equatable[]> {\n\tpublic static readonly INSTANCE: ArrayEqualityComparator = new ArrayEqualityComparator();\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * This implementation returns\n\t * `obj.`{@link Object#hashCode hashCode()}.\n\t */\n\t@Override\n\tpublic hashCode(obj: Equatable[]): number {\n\t\tif (obj == null) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn MurmurHash.hashCode(obj, 0);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * This implementation relies on object equality. If both objects are\n\t * `undefined`, this method returns `true`. Otherwise if only\n\t * `a` is `undefined`, this method returns `false`. Otherwise,\n\t * this method returns the result of\n\t * `a.`{@link Object#equals equals}`(b)`.\n\t */\n\t@Override\n\tpublic equals(a: Equatable[], b: Equatable[]): boolean {\n\t\tif (a == null) {\n\t\t\treturn b == null;\n\t\t} else if (b == null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (a.length !== b.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < a.length; i++) {\n\t\t\tif (!ObjectEqualityComparator.INSTANCE.equals(a[i], b[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n}\n"]}