{"version":3,"file":"Array2DHashMap.js","sourceRoot":"","sources":["../../../src/misc/Array2DHashMap.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAEH,qDAAkD;AASlD;IAGC,YAAY,aAAoC;QAC/C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACpC,CAAC;IAEM,QAAQ,CAAC,GAAiB;QAChC,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC7C,CAAC;IAEM,MAAM,CAAC,CAAe,EAAE,CAAe;QAC7C,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;IAChD,CAAC;CACD;AAED;IAKC,YAAY,WAAyD;QACpE,IAAI,WAAW,YAAY,cAAc,EAAE;YAC1C,IAAI,CAAC,YAAY,GAAG,IAAI,+BAAc,CAAe,WAAW,CAAC,YAAY,CAAC,CAAC;SAC/E;aAAM;YACN,IAAI,CAAC,YAAY,GAAG,IAAI,+BAAc,CAAe,IAAI,wBAAwB,CAAO,WAAW,CAAC,CAAC,CAAC;SACtG;IACF,CAAC;IAEM,KAAK;QACX,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;IAC3B,CAAC;IAEM,WAAW,CAAC,GAAM;QACxB,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;IAC5C,CAAC;IAEM,GAAG,CAAC,GAAM;QAChB,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;QAC5C,IAAI,CAAC,MAAM,EAAE;YACZ,OAAO,SAAS,CAAC;SACjB;QAED,OAAO,MAAM,CAAC,KAAK,CAAC;IACrB,CAAC;IAED,IAAI,OAAO;QACV,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;IAClC,CAAC;IAEM,GAAG,CAAC,GAAM,EAAE,KAAQ;QAC1B,IAAI,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC;QACpD,IAAI,MAAqB,CAAC;QAC1B,IAAI,CAAC,OAAO,EAAE;YACb,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC;SACtC;aAAM;YACN,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC;YACvB,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;SACtB;QAED,OAAO,MAAM,CAAC;IACf,CAAC;IAEM,WAAW,CAAC,GAAM,EAAE,KAAQ;QAClC,IAAI,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC;QACpD,IAAI,MAAqB,CAAC;QAC1B,IAAI,CAAC,OAAO,EAAE;YACb,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC;SACtC;aAAM;YACN,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC;SACvB;QAED,OAAO,MAAM,CAAC;IACf,CAAC;IAED,IAAI,IAAI;QACP,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;IAC/B,CAAC;IAEM,QAAQ;QACd,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;IACrC,CAAC;IAEM,MAAM,CAAC,CAAM;QACnB,IAAI,CAAC,CAAC,CAAC,YAAY,cAAc,CAAC,EAAE;YACnC,OAAO,KAAK,CAAC;SACb;QAED,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;IACjD,CAAC;CACD;AA1ED,wCA0EC","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\nimport { Array2DHashSet } from \"./Array2DHashSet\";\nimport { DefaultEqualityComparator } from \"./DefaultEqualityComparator\";\nimport { EqualityComparator } from \"./EqualityComparator\";\nimport { Equatable, JavaCollection, JavaMap, JavaSet } from \"./Stubs\";\n\n// Since `Array2DHashMap` is implemented on top of `Array2DHashSet`, we defined a bucket type which can store a\n// key-value pair. The value is optional since looking up values in the map by a key only needs to include the key.\ninterface Bucket<K, V> { key: K; value?: V; }\n\nclass MapKeyEqualityComparator<K, V> implements EqualityComparator<Bucket<K, V>> {\n\tprivate readonly keyComparator: EqualityComparator<K>;\n\n\tconstructor(keyComparator: EqualityComparator<K>) {\n\t\tthis.keyComparator = keyComparator;\n\t}\n\n\tpublic hashCode(obj: Bucket<K, V>): number {\n\t\treturn this.keyComparator.hashCode(obj.key);\n\t}\n\n\tpublic equals(a: Bucket<K, V>, b: Bucket<K, V>): boolean {\n\t\treturn this.keyComparator.equals(a.key, b.key);\n\t}\n}\n\nexport class Array2DHashMap<K, V> implements JavaMap<K, V> {\n\tprivate backingStore: Array2DHashSet<Bucket<K, V>>;\n\n\tconstructor(keyComparer: EqualityComparator<K>);\n\tconstructor(map: Array2DHashMap<K, V>);\n\tconstructor(keyComparer: EqualityComparator<K> | Array2DHashMap<K, V>) {\n\t\tif (keyComparer instanceof Array2DHashMap) {\n\t\t\tthis.backingStore = new Array2DHashSet<Bucket<K, V>>(keyComparer.backingStore);\n\t\t} else {\n\t\t\tthis.backingStore = new Array2DHashSet<Bucket<K, V>>(new MapKeyEqualityComparator<K, V>(keyComparer));\n\t\t}\n\t}\n\n\tpublic clear(): void {\n\t\tthis.backingStore.clear();\n\t}\n\n\tpublic containsKey(key: K): boolean {\n\t\treturn this.backingStore.contains({ key });\n\t}\n\n\tpublic get(key: K): V | undefined {\n\t\tlet bucket = this.backingStore.get({ key });\n\t\tif (!bucket) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn bucket.value;\n\t}\n\n\tget isEmpty(): boolean {\n\t\treturn this.backingStore.isEmpty;\n\t}\n\n\tpublic put(key: K, value: V): V | undefined {\n\t\tlet element = this.backingStore.get({ key, value });\n\t\tlet result: V | undefined;\n\t\tif (!element) {\n\t\t\tthis.backingStore.add({ key, value });\n\t\t} else {\n\t\t\tresult = element.value;\n\t\t\telement.value = value;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic putIfAbsent(key: K, value: V): V | undefined {\n\t\tlet element = this.backingStore.get({ key, value });\n\t\tlet result: V | undefined;\n\t\tif (!element) {\n\t\t\tthis.backingStore.add({ key, value });\n\t\t} else {\n\t\t\tresult = element.value;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tget size(): number {\n\t\treturn this.backingStore.size;\n\t}\n\n\tpublic hashCode(): number {\n\t\treturn this.backingStore.hashCode();\n\t}\n\n\tpublic equals(o: any): boolean {\n\t\tif (!(o instanceof Array2DHashMap)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.backingStore.equals(o.backingStore);\n\t}\n}\n"]}