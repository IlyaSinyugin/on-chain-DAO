{"version":3,"file":"FailedPredicateException.js","sourceRoot":"","sources":["../../src/FailedPredicateException.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;AAQH,iEAA8D;AAE9D,6CAAuC;AACvC,mEAAgE;AAEhE;;;;GAIG;AACH,IAAa,wBAAwB,GAArC,8BAAsC,SAAQ,2CAAoB;IAOjE,YAAqB,UAAkB,EAAE,SAAkB,EAAE,OAAgB;QAC5E,KAAK,CACJ,UAAU,EACV,UAAU,CAAC,WAAW,EACtB,UAAU,CAAC,OAAO,EAClB,wBAAwB,CAAC,aAAa,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;QAC7D,IAAI,CAAC,GAAa,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAEtE,IAAI,KAAK,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAgC,CAAC;QAC3D,IAAI,KAAK,YAAY,yCAAmB,EAAE;YACzC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,SAAS,CAAC;YAClC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC,SAAS,CAAC;SACvC;aACI;YACJ,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;YACpB,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;SACzB;QAED,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,KAAK,CAAC,iBAAiB,CAAC,UAAU,EAAE,UAAU,CAAC,YAAY,CAAC,CAAC;IAC9D,CAAC;IAED,IAAI,SAAS;QACZ,OAAO,IAAI,CAAC,UAAU,CAAC;IACxB,CAAC;IAED,IAAI,cAAc;QACjB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC7B,CAAC;IAED,IAAI,SAAS;QACZ,OAAO,IAAI,CAAC,UAAU,CAAC;IACxB,CAAC;IAGO,MAAM,CAAC,aAAa,CAAC,SAA6B,EAAE,OAA2B;QACtF,IAAI,OAAO,EAAE;YACZ,OAAO,OAAO,CAAC;SACf;QAED,OAAO,sBAAsB,SAAS,IAAI,CAAC;IAC5C,CAAC;CACD,CAAA;AAPA;IADC,oBAAO;mDAOP;AAhDW,wBAAwB;IAOvB,WAAA,oBAAO,CAAA;GAPR,wBAAwB,CAiDpC;AAjDY,4DAAwB","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:51.4099946-07:00\n\nimport { AbstractPredicateTransition } from \"./atn/AbstractPredicateTransition\";\nimport { ATN } from \"./atn/ATN\";\nimport { ATNState } from \"./atn/ATNState\";\nimport { Parser } from \"./Parser\";\nimport { RecognitionException } from \"./RecognitionException\";\nimport { Recognizer } from \"./Recognizer\";\nimport { NotNull } from \"./Decorators\";\nimport { PredicateTransition } from \"./atn/PredicateTransition\";\n\n/** A semantic predicate failed during validation.  Validation of predicates\n *  occurs when normally parsing the alternative just like matching a token.\n *  Disambiguating predicate evaluation occurs when we test a predicate during\n *  prediction.\n */\nexport class FailedPredicateException extends RecognitionException {\n\t//private static serialVersionUID: number =  5379330841495778709L;\n\n\tprivate _ruleIndex: number;\n\tprivate _predicateIndex: number;\n\tprivate _predicate?: string;\n\n\tconstructor(@NotNull recognizer: Parser, predicate?: string, message?: string) {\n\t\tsuper(\n\t\t\trecognizer,\n\t\t\trecognizer.inputStream,\n\t\t\trecognizer.context,\n\t\t\tFailedPredicateException.formatMessage(predicate, message));\n\t\tlet s: ATNState = recognizer.interpreter.atn.states[recognizer.state];\n\n\t\tlet trans = s.transition(0) as AbstractPredicateTransition;\n\t\tif (trans instanceof PredicateTransition) {\n\t\t\tthis._ruleIndex = trans.ruleIndex;\n\t\t\tthis._predicateIndex = trans.predIndex;\n\t\t}\n\t\telse {\n\t\t\tthis._ruleIndex = 0;\n\t\t\tthis._predicateIndex = 0;\n\t\t}\n\n\t\tthis._predicate = predicate;\n\t\tsuper.setOffendingToken(recognizer, recognizer.currentToken);\n\t}\n\n\tget ruleIndex(): number {\n\t\treturn this._ruleIndex;\n\t}\n\n\tget predicateIndex(): number {\n\t\treturn this._predicateIndex;\n\t}\n\n\tget predicate(): string | undefined {\n\t\treturn this._predicate;\n\t}\n\n\t@NotNull\n\tprivate static formatMessage(predicate: string | undefined, message: string | undefined): string {\n\t\tif (message) {\n\t\t\treturn message;\n\t\t}\n\n\t\treturn `failed predicate: {${predicate}}?`;\n\t}\n}\n"]}