{"version":3,"file":"Parser.js","sourceRoot":"","sources":["../../src/Parser.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;;;;;;;;;AAKH,sCAAsC;AAKtC,+EAA4E;AAC5E,2DAAwD;AAGxD,iEAA8D;AAE9D,gDAA6C;AAC7C,sDAAmD;AAGnD,mCAAgC;AAChC,6CAA2D;AAC3D,+CAA4C;AAC5C,iEAA8D;AAK9D,yEAAsE;AAEtE,6CAA0C;AAG1C,sDAAmD;AACnD,mCAAgC;AAKhC;IACC,YAAoB,SAAmB,EAAU,WAAwB;QAArD,cAAS,GAAT,SAAS,CAAU;QAAU,gBAAW,GAAX,WAAW,CAAa;IACzE,CAAC;IAGM,cAAc,CAAC,GAAsB;QAC3C,OAAO,CAAC,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;YACrD,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC;IAGM,aAAa,CAAC,GAAsB;QAC1C,OAAO,CAAC,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;YACrD,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC;IAGM,cAAc,CAAC,IAAe;QACpC,sBAAsB;IACvB,CAAC;IAGM,aAAa,CAAC,IAAkB;QACtC,IAAI,MAAM,GAAG,IAAI,CAAC,MAAO,CAAC,WAAW,CAAC;QACtC,IAAI,KAAK,GAAU,IAAI,CAAC,MAAM,CAAC;QAC/B,OAAO,CAAC,GAAG,CAAC,UAAU,GAAG,KAAK,GAAG,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;IAC/E,CAAC;CACD;AAtBA;IADC,qBAAQ;mDAIR;AAGD;IADC,qBAAQ;kDAIR;AAGD;IADC,qBAAQ;mDAGR;AAGD;IADC,qBAAQ;kDAKR;AAGF,4FAA4F;AAC5F,YAA6B,SAAQ,uBAAqC;IAsEzE,YAAY,KAAkB;QAC7B,KAAK,EAAE,CAAC;QA9DT;;;;;;WAMG;QAEO,gBAAW,GAAuB,IAAI,2CAAoB,EAAE,CAAC;QAUpD,qBAAgB,GAAiB,IAAI,2BAAY,EAAE,CAAC;QASvE;;;;;WAKG;QACK,qBAAgB,GAAY,IAAI,CAAC;QAWzC;;;;;WAKG;QACO,oBAAe,GAAwB,EAAE,CAAC;QAEpD;;;WAGG;QACO,kBAAa,GAAW,CAAC,CAAC;QAEpC,yEAAyE;QAC/D,eAAU,GAAY,KAAK,CAAC;QAIrC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC9B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC1B,CAAC;IAKM,KAAK,CAAC,UAAoB;QAChC,wEAAwE;QACxE,IAAI,UAAU,KAAK,SAAS,IAAI,UAAU,EAAE;YAC3C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACzB;QAED,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC7B,IAAI,CAAC,IAAI,GAAG,SAAgB,CAAC;QAC7B,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;QAC9B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC9B,IAAI,WAAW,GAAiB,IAAI,CAAC,WAAW,CAAC;QACjD,IAAI,WAAW,IAAI,IAAI,EAAE;YACxB,WAAW,CAAC,KAAK,EAAE,CAAC;SACpB;IACF,CAAC;IAED;;;;;;;;;;;;;;;;;;OAkBG;IAEI,KAAK,CAAC,KAAa;QACzB,IAAI,CAAC,GAAU,IAAI,CAAC,YAAY,CAAC;QACjC,IAAI,CAAC,CAAC,IAAI,KAAK,KAAK,EAAE;YACrB,IAAI,KAAK,KAAK,aAAK,CAAC,GAAG,EAAE;gBACxB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;aACvB;YACD,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACnC,IAAI,CAAC,OAAO,EAAE,CAAC;SACf;aACI;YACJ,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YACzC,IAAI,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAC,UAAU,KAAK,CAAC,CAAC,EAAE;gBACjD,qEAAqE;gBACrE,iCAAiC;gBACjC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;aAC3D;SACD;QACD,OAAO,CAAC,CAAC;IACV,CAAC;IAED;;;;;;;;;;;;;;;;;OAiBG;IAEI,aAAa;QACnB,IAAI,CAAC,GAAU,IAAI,CAAC,YAAY,CAAC;QACjC,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,EAAE;YACf,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACnC,IAAI,CAAC,OAAO,EAAE,CAAC;SACf;aACI;YACJ,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YACzC,IAAI,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAC,UAAU,KAAK,CAAC,CAAC,EAAE;gBACjD,qEAAqE;gBACrE,iCAAiC;gBACjC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;aAC3D;SACD;QAED,OAAO,CAAC,CAAC;IACV,CAAC;IAED;;;;;;;;;;;;;;OAcG;IACH,IAAI,cAAc,CAAC,eAAwB;QAC1C,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;IACzC,CAAC;IAED;;;;;;OAMG;IACH,IAAI,cAAc;QACjB,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC9B,CAAC;IAGM,iBAAiB;QACvB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC7B,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;OA0BG;IACI,gBAAgB,CAAU,QAA2B;QAC3D,IAAI,QAAQ,IAAI,IAAI,EAAE;YACrB,MAAM,IAAI,SAAS,CAAC,yBAAyB,CAAC,CAAC;SAC/C;QAED,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED;;;;;;;;;OASG;IACI,mBAAmB,CAAC,QAA2B;QACrD,IAAI,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC;QAClE,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;YACjB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;SACtC;IACF,CAAC;IAGD;;;;OAIG;IACI,oBAAoB;QAC1B,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;IACjC,CAAC;IAED;;;;OAIG;IACO,qBAAqB;QAC9B,KAAK,IAAI,QAAQ,IAAI,IAAI,CAAC,eAAe,EAAE;YAC1C,IAAI,QAAQ,CAAC,cAAc,EAAE;gBAC5B,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACnC;YAED,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;SAC9B;IACF,CAAC;IAED;;;;OAIG;IACO,oBAAoB;QAC7B,kCAAkC;QAClC,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;YAC1D,IAAI,QAAQ,GAAsB,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC1D,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAC7B,IAAI,QAAQ,CAAC,aAAa,EAAE;gBAC3B,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAClC;SACD;IACF,CAAC;IAED;;;;;OAKG;IACH,IAAI,oBAAoB;QACvB,OAAO,IAAI,CAAC,aAAa,CAAC;IAC3B,CAAC;IAED,IAAI,YAAY;QACf,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC;IAC7C,CAAC;IAED;;;;;;OAMG;IAEI,oBAAoB;QAC1B,IAAI,aAAa,GAAW,IAAI,CAAC,aAAa,CAAC;QAC/C,IAAI,aAAa,IAAI,IAAI,EAAE;YAC1B,MAAM,IAAI,KAAK,CAAC,sEAAsE,CAAC,CAAC;SACxF;QAED,IAAI,MAAM,GAAG,MAAM,CAAC,kBAAkB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAC1D,IAAI,MAAM,IAAI,IAAI,EAAE;YACnB,IAAI,sBAAsB,GAA8B,IAAI,qDAAyB,EAAE,CAAC;YACxF,sBAAsB,CAAC,+BAA+B,GAAG,IAAI,CAAC;YAC9D,MAAM,GAAG,IAAI,iCAAe,CAAC,sBAAsB,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC;YACnG,MAAM,CAAC,kBAAkB,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;SACrD;QAED,OAAO,MAAM,CAAC;IACf,CAAC;IAqBY,uBAAuB,CAAC,OAAe,EAAE,gBAAwB,EAAE,KAAa;;YAC5F,IAAI,CAAC,KAAK,EAAE;gBACX,IAAI,IAAI,CAAC,WAAW,EAAE;oBACrB,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC;oBAC/C,IAAI,WAAW,YAAY,aAAK,EAAE;wBACjC,KAAK,GAAG,WAAW,CAAC;qBACpB;iBACD;gBAED,IAAI,CAAC,KAAK,EAAE;oBACX,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;iBACxD;aACD;YAED,IAAI,YAAY,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,GAAG,2CAAa,wCAAwC,EAAC,CAAC;YAC/D,IAAI,OAAO,GAAG,IAAI,CAAC,CAAC,uBAAuB,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAChE,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;QACnD,CAAC;KAAA;IAGD,IAAI,YAAY;QACf,OAAO,IAAI,CAAC,WAAW,CAAC;IACzB,CAAC;IAED,IAAI,YAAY,CAAU,OAA2B;QACpD,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC;IAC5B,CAAC;IAGD,IAAI,WAAW;QACd,OAAO,IAAI,CAAC,MAAM,CAAC;IACpB,CAAC;IAED,iDAAiD;IACjD,IAAI,WAAW,CAAC,KAAkB;QACjC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAClB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACrB,CAAC;IAED;;OAEG;IAEH,IAAI,YAAY;QACf,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC;IAKM,oBAAoB,CAAC,GAAW,EAAE,cAA6B,EAAE,CAAoC;QAC3G,IAAI,cAAc,KAAK,SAAS,EAAE;YACjC,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC;SACnC;aAAM,IAAI,cAAc,KAAK,IAAI,EAAE;YACnC,cAAc,GAAG,SAAS,CAAC;SAC3B;QAED,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,IAAI,GAAW,CAAC,CAAC,CAAC;QACtB,IAAI,kBAAkB,GAAW,CAAC,CAAC,CAAC;QACpC,IAAI,cAAc,IAAI,IAAI,EAAE;YAC3B,IAAI,GAAG,cAAc,CAAC,IAAI,CAAC;YAC3B,kBAAkB,GAAG,cAAc,CAAC,kBAAkB,CAAC;SACvD;QAED,IAAI,QAAQ,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAC/C,IAAI,QAAQ,CAAC,WAAW,EAAE;YACzB,QAAQ,CAAC,WAAW,CAAC,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,kBAAkB,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;SAC7E;IACF,CAAC;IAED;;;;;;;;;;;;;;;;;;;;OAoBG;IACI,OAAO;QACb,IAAI,CAAC,GAAU,IAAI,CAAC,YAAY,CAAC;QACjC,IAAI,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,GAAG,EAAE;YAC1B,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;SAC3B;QACD,IAAI,WAAW,GAAY,IAAI,CAAC,eAAe,CAAC,MAAM,KAAK,CAAC,CAAC;QAC7D,IAAI,IAAI,CAAC,gBAAgB,IAAI,WAAW,EAAE;YACzC,IAAI,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE;gBAC/C,IAAI,IAAI,GAAc,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;gBACjF,IAAI,WAAW,EAAE;oBAChB,KAAK,IAAI,QAAQ,IAAI,IAAI,CAAC,eAAe,EAAE;wBAC1C,IAAI,QAAQ,CAAC,cAAc,EAAE;4BAC5B,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;yBAC9B;qBACD;iBACD;aACD;iBACI;gBACJ,IAAI,IAAI,GAAiB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAC/D,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACzB,IAAI,WAAW,EAAE;oBAChB,KAAK,IAAI,QAAQ,IAAI,IAAI,CAAC,eAAe,EAAE;wBAC1C,IAAI,QAAQ,CAAC,aAAa,EAAE;4BAC3B,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;yBAC7B;qBACD;iBACD;aACD;SACD;QACD,OAAO,CAAC,CAAC;IACV,CAAC;IAED;;;;;OAKG;IACI,kBAAkB,CAAC,MAAyB,EAAE,CAAQ;QAC5D,OAAO,IAAI,2BAAY,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC;IAED;;;;;OAKG;IACI,eAAe,CAAC,MAAyB,EAAE,CAAQ;QACzD,OAAO,IAAI,qBAAS,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC;IAES,qBAAqB;QAC9B,IAAI,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,OAAwC,CAAC;QAChE,oDAAoD;QACpD,IAAI,MAAM,IAAI,IAAI,EAAE;YACnB,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC3B;IACF,CAAC;IAED;;;OAGG;IACI,SAAS,CAAU,QAA2B,EAAE,KAAa,EAAE,SAAiB;QACtF,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;QACrB,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,IAAI,CAAC,gBAAgB,EAAE;YAC1B,IAAI,CAAC,qBAAqB,EAAE,CAAC;SAC7B;QACD,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC9B,CAAC;IAEM,qBAAqB,CAAC,QAA2B,EAAE,KAAa,EAAE,SAAiB;QACzF,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,IAAI,CAAC,gBAAgB,EAAE;YAC1B,IAAI,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAsB,CAAC;YACxF,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;YAC5B,eAAe,CAAC,OAAO,GAAG,QAAQ,CAAC;YACnC,QAAQ,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;SACnC;QAED,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;QACrB,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,IAAI,CAAC,gBAAgB,EAAE;YAC1B,IAAI,CAAC,qBAAqB,EAAE,CAAC;SAC7B;QAED,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC9B,CAAC;IAEM,QAAQ;QACd,IAAI,IAAI,CAAC,UAAU,EAAE;YACpB,0EAA0E;YAC1E,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,4BAA4B;SACjE;aACI;YACJ,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,oCAAoC;SAC7E;QACD,qDAAqD;QACrD,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;QACrC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,OAA4B,CAAC;IACpD,CAAC;IAEM,aAAa,CAAC,QAA2B,EAAE,MAAc;QAC/D,QAAQ,CAAC,SAAS,GAAG,MAAM,CAAC;QAC5B,6DAA6D;QAC7D,uCAAuC;QACvC,IAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;YACpD,IAAI,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,OAAwC,CAAC;YAChE,IAAI,MAAM,IAAI,IAAI,EAAE;gBACnB,MAAM,CAAC,eAAe,EAAE,CAAC;gBACzB,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;aAC1B;SACD;QACD,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;IACtB,CAAC;IAED;;;;;OAKG;IACH,IAAI,UAAU;QACb,IAAI,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE;YAClC,OAAO,CAAC,CAAC,CAAC;SACV;QAED,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;IACrC,CAAC;IAEM,kBAAkB,CAAC,QAA2B,EAAE,KAAa,EAAE,SAAiB,EAAE,UAAkB;QAC1G,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACvC,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;QACrB,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC,gDAAgD;IAC/E,CAAC;IAED;;OAEG;IACI,uBAAuB,CAAC,QAA2B,EAAE,KAAa,EAAE,SAAiB;QAC3F,IAAI,QAAQ,GAAsB,IAAI,CAAC,IAAI,CAAC;QAC5C,QAAQ,CAAC,OAAO,GAAG,QAAQ,CAAC;QAC5B,QAAQ,CAAC,aAAa,GAAG,KAAK,CAAC;QAC/B,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAEvC,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;QACrB,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;QACnC,IAAI,IAAI,CAAC,gBAAgB,EAAE;YAC1B,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;SAC7B;QAED,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC,gDAAgD;IAC/E,CAAC;IAEM,uBAAuB,CAAC,UAA6B;QAC3D,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACxC,IAAI,MAAM,GAAsB,IAAI,CAAC,IAAI,CAAC,CAAC,kCAAkC;QAE7E,8DAA8D;QAC9D,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;YACpC,OAAO,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE;gBAChC,IAAI,CAAC,oBAAoB,EAAE,CAAC;gBAC5B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,OAA4B,CAAC;aACnD;SACD;aACI;YACJ,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;SACvB;QAED,iBAAiB;QACjB,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC;QAE5B,IAAI,IAAI,CAAC,gBAAgB,IAAI,UAAU,IAAI,IAAI,EAAE;YAChD,2CAA2C;YAC3C,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;SAC5B;IACF,CAAC;IAEM,kBAAkB,CAAC,SAAiB;QAC1C,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;QAClB,OAAO,CAAC,IAAI,CAAC,CAAC,SAAS,KAAK,SAAS,EAAE;YACtC,CAAC,GAAG,CAAC,CAAC,OAA4B,CAAC;SACnC;QACD,OAAO,CAAC,CAAC;IACV,CAAC;IAED,IAAI,OAAO;QACV,OAAO,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC;IAED,IAAI,OAAO,CAAC,GAAsB;QACjC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;IACjB,CAAC;IAGM,QAAQ,CAAW,QAAqB,EAAE,UAAkB;QAClE,OAAO,UAAU,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;IACnD,CAAC;IAGM,wBAAwB;QAC9B,OAAO,IAAI,mDAAwB,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;IAC/D,CAAC;IAEM,SAAS,CAAC,OAAe;QAC/B,0BAA0B;QAC1B,OAAO,KAAK,CAAC;IACd,CAAC;IAED;;;;;;;;;;;;;OAaG;IACI,eAAe,CAAC,MAAc;QACtC,+CAA+C;QAC7C,IAAI,GAAG,GAAQ,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC;QACpC,IAAI,GAAG,GAAsB,IAAI,CAAC,IAAI,CAAC;QACvC,IAAI,CAAC,GAAa,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,SAAS,GAAgB,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAC/C,IAAI,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YAC/B,OAAO,IAAI,CAAC;SACZ;QACH,2DAA2D;QACzD,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,aAAK,CAAC,OAAO,CAAC,EAAE;YACvC,OAAO,KAAK,CAAC;SACb;QAED,OAAO,GAAG,IAAI,IAAI,IAAI,GAAG,CAAC,aAAa,IAAI,CAAC,IAAI,SAAS,CAAC,QAAQ,CAAC,aAAK,CAAC,OAAO,CAAC,EAAE;YAClF,IAAI,aAAa,GAAa,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;YAC5D,IAAI,EAAE,GAAG,aAAa,CAAC,UAAU,CAAC,CAAC,CAAmB,CAAC;YACvD,SAAS,GAAG,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;YAC3C,IAAI,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;gBAC/B,OAAO,IAAI,CAAC;aACZ;YAED,GAAG,GAAG,GAAG,CAAC,OAA4B,CAAC;SACvC;QAED,IAAI,SAAS,CAAC,QAAQ,CAAC,aAAK,CAAC,OAAO,CAAC,IAAI,MAAM,KAAK,aAAK,CAAC,GAAG,EAAE;YAC9D,OAAO,IAAI,CAAC;SACZ;QAED,OAAO,KAAK,CAAC;IACd,CAAC;IAED,IAAI,YAAY;QACf,OAAO,IAAI,CAAC,UAAU,CAAC;IACxB,CAAC;IAED;;;;;;OAMG;IAEI,iBAAiB;QACvB,OAAO,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAC7D,CAAC;IAGM,kCAAkC;QACxC,IAAI,GAAG,GAAQ,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC;QACpC,IAAI,CAAC,GAAa,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzC,OAAO,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC;IAED,2EAA2E;IACpE,YAAY,CAAC,QAAgB;QACnC,IAAI,SAAS,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACrD,IAAI,SAAS,IAAI,IAAI,EAAE;YACtB,OAAO,SAAS,CAAC;SACjB;QACD,OAAO,CAAC,CAAC,CAAC;IACX,CAAC;IAED,IAAI,WAAW,KAAwB,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAE1D;;;;;;OAMG;IAEI,sBAAsB,CAAC,MAAmB,IAAI,CAAC,IAAI;QACzD,IAAI,CAAC,GAA4B,GAAG,CAAC,CAAI,4CAA4C;QACrF,IAAI,SAAS,GAAa,IAAI,CAAC,SAAS,CAAC;QACzC,IAAI,KAAK,GAAa,EAAE,CAAC;QACzB,OAAO,CAAC,IAAI,IAAI,EAAE;YACjB,sCAAsC;YACtC,IAAI,SAAS,GAAW,CAAC,CAAC,SAAS,CAAC;YACpC,IAAI,SAAS,GAAG,CAAC,EAAE;gBAClB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAClB;iBAAM;gBACN,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;aACjC;YACD,CAAC,GAAG,CAAC,CAAC,OAAsB,CAAC;SAC7B;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IAED,wCAAwC;IACjC,aAAa;QACnB,IAAI,CAAC,GAAa,EAAE,CAAC;QACrB,KAAK,IAAI,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE;YAC/C,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;SACtD;QACD,OAAO,CAAC,CAAC;IACV,CAAC;IAED,wCAAwC;IACjC,OAAO;QACb,IAAI,OAAO,GAAY,KAAK,CAAC;QAC7B,KAAK,IAAI,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE;YAC/C,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE;gBACjB,IAAI,OAAO,EAAE;oBACZ,OAAO,CAAC,GAAG,EAAE,CAAC;iBACd;gBACD,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,QAAQ,GAAG,GAAG,CAAC,CAAC;gBAC9C,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACpE,OAAO,GAAG,IAAI,CAAC;aACf;SACD;IACF,CAAC;IAED,IAAI,UAAU;QACb,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;IAC/B,CAAC;IAGD,IAAI,SAAS;QACZ,OAAO,qCAAO,6BAA6B,GAAE,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;YACvD,IAAI,MAAM,GAAuB,IAAI,CAAC,WAAW,CAAC;YAClD,IAAI,MAAM,YAAY,CAAC,CAAC,qBAAqB,EAAE;gBAC9C,OAAO,IAAI,qBAAS,CAAC,MAAM,CAAC,CAAC;aAC7B;YAED,OAAO,SAAS,CAAC;QAClB,CAAC,CAAC,CAAC;IACJ,CAAC;IAED;;OAEG;IACU,UAAU,CAAC,OAAgB;;YACvC,IAAI,CAAC,GAAG,2CAAa,6BAA6B,EAAC,CAAC;YACpD,IAAI,MAAM,GAAuB,IAAI,CAAC,WAAW,CAAC;YAClD,IAAI,OAAO,EAAE;gBACZ,IAAI,CAAC,CAAC,MAAM,YAAY,CAAC,CAAC,qBAAqB,CAAC,EAAE;oBACjD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;iBACrD;aACD;iBAAM,IAAI,MAAM,YAAY,CAAC,CAAC,qBAAqB,EAAE;gBACrD,IAAI,CAAC,WAAW,GAAG,IAAI,uCAAkB,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;aAC1D;YAED,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,CAAC;QAChE,CAAC;KAAA;IAED;;OAEG;IACH,IAAI,OAAO,CAAC,KAAc;QACzB,IAAI,CAAC,KAAK,EAAE;YACX,IAAI,IAAI,CAAC,OAAO,EAAE;gBACjB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACvC,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;aACzB;SACD;aACI;YACJ,IAAI,IAAI,CAAC,OAAO,EAAE;gBACjB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACvC;iBAAM;gBACN,IAAI,CAAC,OAAO,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;aAC9D;YAED,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACpC;IACF,CAAC;IAED;;;OAGG;IACH,IAAI,OAAO;QACV,OAAO,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC;IAC7B,CAAC;;AA11BD;;;;;GAKG;AACqB,yBAAkB,GAAG,IAAI,GAAG,EAAe,CAAC;AAUpE;IADC,oBAAO;2CAC+D;AAqGvE;IADC,oBAAO;mCAmBP;AAqBD;IADC,oBAAO;2CAiBP;AAiCD;IADC,oBAAO;+CAGP;AA6BD;IAAyB,WAAA,oBAAO,CAAA;8CAM/B;AAkFD;IADC,oBAAO;kDAgBP;AA0CD;IADC,oBAAO;IAKU,WAAA,oBAAO,CAAA;0CAFxB;AAOD;IADC,qBAAQ;yCAGR;AAYD;IADC,oBAAO;0CAGP;AA+GD;IAAkB,WAAA,oBAAO,CAAA;uCAQxB;AAkID;IADC,qBAAQ;IACQ,WAAA,qBAAQ,CAAA;sCAExB;AAGD;IADC,qBAAQ;sDAGR;AAiED;IADC,oBAAO;+CAGP;AAGD;IADC,oBAAO;gEAKP;AAmED;IADC,qBAAQ;uCAUR;AA7yBF,wBA41BC","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:52.4399193-07:00\n\nimport * as assert from \"assert\";\nimport * as Utils from \"./misc/Utils\";\n\nimport { ANTLRErrorListener } from \"./ANTLRErrorListener\";\nimport { ANTLRErrorStrategy } from \"./ANTLRErrorStrategy\";\nimport { ATN } from \"./atn/ATN\";\nimport { ATNDeserializationOptions } from \"./atn/ATNDeserializationOptions\";\nimport { ATNDeserializer } from \"./atn/ATNDeserializer\";\nimport { ATNSimulator } from \"./atn/ATNSimulator\";\nimport { ATNState } from \"./atn/ATNState\";\nimport { DefaultErrorStrategy } from \"./DefaultErrorStrategy\";\nimport { DFA } from \"./dfa/DFA\";\nimport { ErrorNode } from \"./tree/ErrorNode\";\nimport { IntegerStack } from \"./misc/IntegerStack\";\nimport { IntervalSet } from \"./misc/IntervalSet\";\nimport { IntStream } from \"./IntStream\";\nimport { Lexer } from \"./Lexer\";\nimport { Override, NotNull, Nullable } from \"./Decorators\";\nimport { ParseInfo } from \"./atn/ParseInfo\";\nimport { ParserATNSimulator } from \"./atn/ParserATNSimulator\";\nimport { ParserErrorListener } from \"./ParserErrorListener\";\nimport { ParserRuleContext } from \"./ParserRuleContext\";\nimport { ParseTreeListener } from \"./tree/ParseTreeListener\";\nimport { ParseTreePattern } from \"./tree/pattern/ParseTreePattern\";\nimport { ProxyParserErrorListener } from \"./ProxyParserErrorListener\";\nimport { RecognitionException } from \"./RecognitionException\";\nimport { Recognizer } from \"./Recognizer\";\nimport { RuleContext } from \"./RuleContext\";\nimport { RuleTransition } from \"./atn/RuleTransition\";\nimport { TerminalNode } from \"./tree/TerminalNode\";\nimport { Token } from \"./Token\";\nimport { TokenFactory } from \"./TokenFactory\";\nimport { TokenSource } from \"./TokenSource\";\nimport { TokenStream } from \"./TokenStream\";\n\nclass TraceListener implements ParseTreeListener {\n\tconstructor(private ruleNames: string[], private tokenStream: TokenStream) {\n\t}\n\n\t@Override\n\tpublic enterEveryRule(ctx: ParserRuleContext): void {\n\t\tconsole.log(\"enter   \" + this.ruleNames[ctx.ruleIndex] +\n\t\t\t\", LT(1)=\" + this.tokenStream.LT(1).text);\n\t}\n\n\t@Override\n\tpublic exitEveryRule(ctx: ParserRuleContext): void {\n\t\tconsole.log(\"exit    \" + this.ruleNames[ctx.ruleIndex] +\n\t\t\t\", LT(1)=\" + this.tokenStream.LT(1).text);\n\t}\n\n\t@Override\n\tpublic visitErrorNode(node: ErrorNode): void {\n\t\t// intentionally empty\n\t}\n\n\t@Override\n\tpublic visitTerminal(node: TerminalNode): void {\n\t\tlet parent = node.parent!.ruleContext;\n\t\tlet token: Token = node.symbol;\n\t\tconsole.log(\"consume \" + token + \" rule \" + this.ruleNames[parent.ruleIndex]);\n\t}\n}\n\n/** This is all the parsing support code essentially; most of it is error recovery stuff. */\nexport abstract class Parser extends Recognizer<Token, ParserATNSimulator> {\n\t/**\n\t * This field maps from the serialized ATN string to the deserialized {@link ATN} with\n\t * bypass alternatives.\n\t *\n\t * @see ATNDeserializationOptions.isGenerateRuleBypassTransitions\n\t */\n\tprivate static readonly bypassAltsAtnCache = new Map<string, ATN>();\n\n\t/**\n\t * The error handling strategy for the parser. The default value is a new\n\t * instance of {@link DefaultErrorStrategy}.\n\t *\n\t * @see #getErrorHandler\n\t * @see #setErrorHandler\n\t */\n\t@NotNull\n\tprotected _errHandler: ANTLRErrorStrategy = new DefaultErrorStrategy();\n\n\t/**\n\t * The input stream.\n\t *\n\t * @see #getInputStream\n\t * @see #setInputStream\n\t */\n\tprotected _input: TokenStream;\n\n\tprotected readonly _precedenceStack: IntegerStack = new IntegerStack();\n\n\t/**\n\t * The {@link ParserRuleContext} object for the currently executing rule.\n\t *\n\t * This is always non-undefined during the parsing process.\n\t */\n\tprotected _ctx: ParserRuleContext;\n\n\t/**\n\t * Specifies whether or not the parser should construct a parse tree during\n\t * the parsing process. The default value is `true`.\n\t *\n\t * @see `buildParseTree`\n\t */\n\tprivate _buildParseTrees: boolean = true;\n\n\t/**\n\t * When {@link #setTrace}`(true)` is called, a reference to the\n\t * {@link TraceListener} is stored here so it can be easily removed in a\n\t * later call to {@link #setTrace}`(false)`. The listener itself is\n\t * implemented as a parser listener so this field is not directly used by\n\t * other parser methods.\n\t */\n\tprivate _tracer: TraceListener | undefined;\n\n\t/**\n\t * The list of {@link ParseTreeListener} listeners registered to receive\n\t * events during the parse.\n\t *\n\t * @see #addParseListener\n\t */\n\tprotected _parseListeners: ParseTreeListener[] = [];\n\n\t/**\n\t * The number of syntax errors reported during parsing. This value is\n\t * incremented each time {@link #notifyErrorListeners} is called.\n\t */\n\tprotected _syntaxErrors: number = 0;\n\n\t/** Indicates parser has match()ed EOF token. See {@link #exitRule()}. */\n\tprotected matchedEOF: boolean = false;\n\n\tconstructor(input: TokenStream) {\n\t\tsuper();\n\t\tthis._precedenceStack.push(0);\n\t\tthis.inputStream = input;\n\t}\n\n\t/** reset the parser's state */\n\tpublic reset(): void;\n\tpublic reset(resetInput: boolean): void;\n\tpublic reset(resetInput?: boolean): void {\n\t\t// Note: this method executes when not parsing, so _ctx can be undefined\n\t\tif (resetInput === undefined || resetInput) {\n\t\t\tthis.inputStream.seek(0);\n\t\t}\n\n\t\tthis._errHandler.reset(this);\n\t\tthis._ctx = undefined as any;\n\t\tthis._syntaxErrors = 0;\n\t\tthis.matchedEOF = false;\n\t\tthis.isTrace = false;\n\t\tthis._precedenceStack.clear();\n\t\tthis._precedenceStack.push(0);\n\t\tlet interpreter: ATNSimulator = this.interpreter;\n\t\tif (interpreter != null) {\n\t\t\tinterpreter.reset();\n\t\t}\n\t}\n\n\t/**\n\t * Match current input symbol against `ttype`. If the symbol type\n\t * matches, {@link ANTLRErrorStrategy#reportMatch} and {@link #consume} are\n\t * called to complete the match process.\n\t *\n\t * If the symbol type does not match,\n\t * {@link ANTLRErrorStrategy#recoverInline} is called on the current error\n\t * strategy to attempt recovery. If {@link #getBuildParseTree} is\n\t * `true` and the token index of the symbol returned by\n\t * {@link ANTLRErrorStrategy#recoverInline} is -1, the symbol is added to\n\t * the parse tree by calling {@link #createErrorNode(ParserRuleContext, Token)} then\n\t * {@link ParserRuleContext#addErrorNode(ErrorNode)}.\n\t *\n\t * @param ttype the token type to match\n\t * @returns the matched symbol\n\t * @ if the current input symbol did not match\n\t * `ttype` and the error strategy could not recover from the\n\t * mismatched symbol\n\t */\n\t@NotNull\n\tpublic match(ttype: number): Token {\n\t\tlet t: Token = this.currentToken;\n\t\tif (t.type === ttype) {\n\t\t\tif (ttype === Token.EOF) {\n\t\t\t\tthis.matchedEOF = true;\n\t\t\t}\n\t\t\tthis._errHandler.reportMatch(this);\n\t\t\tthis.consume();\n\t\t}\n\t\telse {\n\t\t\tt = this._errHandler.recoverInline(this);\n\t\t\tif (this._buildParseTrees && t.tokenIndex === -1) {\n\t\t\t\t// we must have conjured up a new token during single token insertion\n\t\t\t\t// if it's not the current symbol\n\t\t\t\tthis._ctx.addErrorNode(this.createErrorNode(this._ctx, t));\n\t\t\t}\n\t\t}\n\t\treturn t;\n\t}\n\n\t/**\n\t * Match current input symbol as a wildcard. If the symbol type matches\n\t * (i.e. has a value greater than 0), {@link ANTLRErrorStrategy#reportMatch}\n\t * and {@link #consume} are called to complete the match process.\n\t *\n\t * If the symbol type does not match,\n\t * {@link ANTLRErrorStrategy#recoverInline} is called on the current error\n\t * strategy to attempt recovery. If {@link #getBuildParseTree} is\n\t * `true` and the token index of the symbol returned by\n\t * {@link ANTLRErrorStrategy#recoverInline} is -1, the symbol is added to\n\t * the parse tree by calling {@link Parser#createErrorNode(ParserRuleContext, Token)} then\n\t * {@link ParserRuleContext#addErrorNode(ErrorNode)}.\n\t *\n\t * @returns the matched symbol\n\t * @ if the current input symbol did not match\n\t * a wildcard and the error strategy could not recover from the mismatched\n\t * symbol\n\t */\n\t@NotNull\n\tpublic matchWildcard(): Token {\n\t\tlet t: Token = this.currentToken;\n\t\tif (t.type > 0) {\n\t\t\tthis._errHandler.reportMatch(this);\n\t\t\tthis.consume();\n\t\t}\n\t\telse {\n\t\t\tt = this._errHandler.recoverInline(this);\n\t\t\tif (this._buildParseTrees && t.tokenIndex === -1) {\n\t\t\t\t// we must have conjured up a new token during single token insertion\n\t\t\t\t// if it's not the current symbol\n\t\t\t\tthis._ctx.addErrorNode(this.createErrorNode(this._ctx, t));\n\t\t\t}\n\t\t}\n\n\t\treturn t;\n\t}\n\n\t/**\n\t * Track the {@link ParserRuleContext} objects during the parse and hook\n\t * them up using the {@link ParserRuleContext#children} list so that it\n\t * forms a parse tree. The {@link ParserRuleContext} returned from the start\n\t * rule represents the root of the parse tree.\n\t *\n\t * Note that if we are not building parse trees, rule contexts only point\n\t * upwards. When a rule exits, it returns the context but that gets garbage\n\t * collected if nobody holds a reference. It points upwards but nobody\n\t * points at it.\n\t *\n\t * When we build parse trees, we are adding all of these contexts to\n\t * {@link ParserRuleContext#children} list. Contexts are then not candidates\n\t * for garbage collection.\n\t */\n\tset buildParseTree(buildParseTrees: boolean) {\n\t\tthis._buildParseTrees = buildParseTrees;\n\t}\n\n\t/**\n\t * Gets whether or not a complete parse tree will be constructed while\n\t * parsing. This property is `true` for a newly constructed parser.\n\t *\n\t * @returns `true` if a complete parse tree will be constructed while\n\t * parsing, otherwise `false`\n\t */\n\tget buildParseTree(): boolean {\n\t\treturn this._buildParseTrees;\n\t}\n\n\t@NotNull\n\tpublic getParseListeners(): ParseTreeListener[] {\n\t\treturn this._parseListeners;\n\t}\n\n\t/**\n\t * Registers `listener` to receive events during the parsing process.\n\t *\n\t * To support output-preserving grammar transformations (including but not\n\t * limited to left-recursion removal, automated left-factoring, and\n\t * optimized code generation), calls to listener methods during the parse\n\t * may differ substantially from calls made by\n\t * {@link ParseTreeWalker#DEFAULT} used after the parse is complete. In\n\t * particular, rule entry and exit events may occur in a different order\n\t * during the parse than after the parser. In addition, calls to certain\n\t * rule entry methods may be omitted.\n\t *\n\t * With the following specific exceptions, calls to listener events are\n\t * *deterministic*, i.e. for identical input the calls to listener\n\t * methods will be the same.\n\t *\n\t * * Alterations to the grammar used to generate code may change the\n\t *   behavior of the listener calls.\n\t * * Alterations to the command line options passed to ANTLR 4 when\n\t *   generating the parser may change the behavior of the listener calls.\n\t * * Changing the version of the ANTLR Tool used to generate the parser\n\t *   may change the behavior of the listener calls.\n\t *\n\t * @param listener the listener to add\n\t *\n\t * @throws {@link TypeError} if `listener` is `undefined`\n\t */\n\tpublic addParseListener(@NotNull listener: ParseTreeListener): void {\n\t\tif (listener == null) {\n\t\t\tthrow new TypeError(\"listener cannot be null\");\n\t\t}\n\n\t\tthis._parseListeners.push(listener);\n\t}\n\n\t/**\n\t * Remove `listener` from the list of parse listeners.\n\t *\n\t * If `listener` is `undefined` or has not been added as a parse\n\t * listener, this method does nothing.\n\t *\n\t * @see #addParseListener\n\t *\n\t * @param listener the listener to remove\n\t */\n\tpublic removeParseListener(listener: ParseTreeListener): void {\n\t\tlet index = this._parseListeners.findIndex((l) => l === listener);\n\t\tif (index !== -1) {\n\t\t\tthis._parseListeners.splice(index, 1);\n\t\t}\n\t}\n\n\n\t/**\n\t * Remove all parse listeners.\n\t *\n\t * @see #addParseListener\n\t */\n\tpublic removeParseListeners(): void {\n\t\tthis._parseListeners.length = 0;\n\t}\n\n\t/**\n\t * Notify any parse listeners of an enter rule event.\n\t *\n\t * @see #addParseListener\n\t */\n\tprotected triggerEnterRuleEvent(): void {\n\t\tfor (let listener of this._parseListeners) {\n\t\t\tif (listener.enterEveryRule) {\n\t\t\t\tlistener.enterEveryRule(this._ctx);\n\t\t\t}\n\n\t\t\tthis._ctx.enterRule(listener);\n\t\t}\n\t}\n\n\t/**\n\t * Notify any parse listeners of an exit rule event.\n\t *\n\t * @see #addParseListener\n\t */\n\tprotected triggerExitRuleEvent(): void {\n\t\t// reverse order walk of listeners\n\t\tfor (let i = this._parseListeners.length - 1; i >= 0; i--) {\n\t\t\tlet listener: ParseTreeListener = this._parseListeners[i];\n\t\t\tthis._ctx.exitRule(listener);\n\t\t\tif (listener.exitEveryRule) {\n\t\t\t\tlistener.exitEveryRule(this._ctx);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets the number of syntax errors reported during parsing. This value is\n\t * incremented each time {@link #notifyErrorListeners} is called.\n\t *\n\t * @see #notifyErrorListeners\n\t */\n\tget numberOfSyntaxErrors(): number {\n\t\treturn this._syntaxErrors;\n\t}\n\n\tget tokenFactory(): TokenFactory {\n\t\treturn this._input.tokenSource.tokenFactory;\n\t}\n\n\t/**\n\t * The ATN with bypass alternatives is expensive to create so we create it\n\t * lazily.\n\t *\n\t * @ if the current parser does not\n\t * implement the `serializedATN` property.\n\t */\n\t@NotNull\n\tpublic getATNWithBypassAlts(): ATN {\n\t\tlet serializedAtn: string = this.serializedATN;\n\t\tif (serializedAtn == null) {\n\t\t\tthrow new Error(\"The current parser does not support an ATN with bypass alternatives.\");\n\t\t}\n\n\t\tlet result = Parser.bypassAltsAtnCache.get(serializedAtn);\n\t\tif (result == null) {\n\t\t\tlet deserializationOptions: ATNDeserializationOptions = new ATNDeserializationOptions();\n\t\t\tdeserializationOptions.isGenerateRuleBypassTransitions = true;\n\t\t\tresult = new ATNDeserializer(deserializationOptions).deserialize(Utils.toCharArray(serializedAtn));\n\t\t\tParser.bypassAltsAtnCache.set(serializedAtn, result);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * The preferred method of getting a tree pattern. For example, here's a\n\t * sample use:\n\t *\n\t * ```\n\t * let t: ParseTree = parser.expr();\n\t * let p: ParseTreePattern = await parser.compileParseTreePattern(\"<ID>+0\", MyParser.RULE_expr);\n\t * let m: ParseTreeMatch = p.match(t);\n\t * let id: string = m.get(\"ID\");\n\t * ```\n\t */\n\tpublic compileParseTreePattern(pattern: string, patternRuleIndex: number): Promise<ParseTreePattern>;\n\n\t/**\n\t * The same as {@link #compileParseTreePattern(String, int)} but specify a\n\t * {@link Lexer} rather than trying to deduce it from this parser.\n\t */\n\tpublic compileParseTreePattern(pattern: string, patternRuleIndex: number, lexer?: Lexer): Promise<ParseTreePattern>;\n\n\tpublic async compileParseTreePattern(pattern: string, patternRuleIndex: number, lexer?: Lexer): Promise<ParseTreePattern> {\n\t\tif (!lexer) {\n\t\t\tif (this.inputStream) {\n\t\t\t\tlet tokenSource = this.inputStream.tokenSource;\n\t\t\t\tif (tokenSource instanceof Lexer) {\n\t\t\t\t\tlexer = tokenSource;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!lexer) {\n\t\t\t\tthrow new Error(\"Parser can't discover a lexer to use\");\n\t\t\t}\n\t\t}\n\n\t\tlet currentLexer = lexer;\n\t\tlet m = await import(\"./tree/pattern/ParseTreePatternMatcher\");\n\t\tlet matcher = new m.ParseTreePatternMatcher(currentLexer, this);\n\t\treturn matcher.compile(pattern, patternRuleIndex);\n\t}\n\n\t@NotNull\n\tget errorHandler(): ANTLRErrorStrategy {\n\t\treturn this._errHandler;\n\t}\n\n\tset errorHandler(@NotNull handler: ANTLRErrorStrategy) {\n\t\tthis._errHandler = handler;\n\t}\n\n\t@Override\n\tget inputStream(): TokenStream {\n\t\treturn this._input;\n\t}\n\n\t/** Set the token stream and reset the parser. */\n\tset inputStream(input: TokenStream) {\n\t\tthis.reset(false);\n\t\tthis._input = input;\n\t}\n\n\t/** Match needs to return the current input symbol, which gets put\n\t *  into the label for the associated token ref; e.g., x=ID.\n\t */\n\t@NotNull\n\tget currentToken(): Token {\n\t\treturn this._input.LT(1);\n\t}\n\n\tpublic notifyErrorListeners(/*@NotNull*/ msg: string): void;\n\tpublic notifyErrorListeners(/*@NotNull*/ msg: string, /*@NotNull*/ offendingToken: Token | null, e: RecognitionException | undefined): void;\n\n\tpublic notifyErrorListeners(msg: string, offendingToken?: Token | null, e?: RecognitionException | undefined): void {\n\t\tif (offendingToken === undefined) {\n\t\t\toffendingToken = this.currentToken;\n\t\t} else if (offendingToken === null) {\n\t\t\toffendingToken = undefined;\n\t\t}\n\n\t\tthis._syntaxErrors++;\n\t\tlet line: number = -1;\n\t\tlet charPositionInLine: number = -1;\n\t\tif (offendingToken != null) {\n\t\t\tline = offendingToken.line;\n\t\t\tcharPositionInLine = offendingToken.charPositionInLine;\n\t\t}\n\n\t\tlet listener = this.getErrorListenerDispatch();\n\t\tif (listener.syntaxError) {\n\t\t\tlistener.syntaxError(this, offendingToken, line, charPositionInLine, msg, e);\n\t\t}\n\t}\n\n\t/**\n\t * Consume and return the [current symbol](`currentToken`).\n\t *\n\t * E.g., given the following input with `A` being the current\n\t * lookahead symbol, this function moves the cursor to `B` and returns\n\t * `A`.\n\t *\n\t * ```\n\t * A B\n\t * ^\n\t * ```\n\t *\n\t * If the parser is not in error recovery mode, the consumed symbol is added\n\t * to the parse tree using {@link ParserRuleContext#addChild(TerminalNode)}, and\n\t * {@link ParseTreeListener#visitTerminal} is called on any parse listeners.\n\t * If the parser *is* in error recovery mode, the consumed symbol is\n\t * added to the parse tree using {@link #createErrorNode(ParserRuleContext, Token)} then\n\t * {@link ParserRuleContext#addErrorNode(ErrorNode)} and\n\t * {@link ParseTreeListener#visitErrorNode} is called on any parse\n\t * listeners.\n\t */\n\tpublic consume(): Token {\n\t\tlet o: Token = this.currentToken;\n\t\tif (o.type !== Parser.EOF) {\n\t\t\tthis.inputStream.consume();\n\t\t}\n\t\tlet hasListener: boolean = this._parseListeners.length !== 0;\n\t\tif (this._buildParseTrees || hasListener) {\n\t\t\tif (this._errHandler.inErrorRecoveryMode(this)) {\n\t\t\t\tlet node: ErrorNode = this._ctx.addErrorNode(this.createErrorNode(this._ctx, o));\n\t\t\t\tif (hasListener) {\n\t\t\t\t\tfor (let listener of this._parseListeners) {\n\t\t\t\t\t\tif (listener.visitErrorNode) {\n\t\t\t\t\t\t\tlistener.visitErrorNode(node);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet node: TerminalNode = this.createTerminalNode(this._ctx, o);\n\t\t\t\tthis._ctx.addChild(node);\n\t\t\t\tif (hasListener) {\n\t\t\t\t\tfor (let listener of this._parseListeners) {\n\t\t\t\t\t\tif (listener.visitTerminal) {\n\t\t\t\t\t\t\tlistener.visitTerminal(node);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn o;\n\t}\n\n\t/**\n\t * How to create a token leaf node associated with a parent.\n\t * Typically, the terminal node to create is not a function of the parent.\n\t *\n\t * @since 4.7\n\t */\n\tpublic createTerminalNode(parent: ParserRuleContext, t: Token): TerminalNode {\n\t\treturn new TerminalNode(t);\n\t}\n\n\t/**\n\t * How to create an error node, given a token, associated with a parent.\n\t * Typically, the error node to create is not a function of the parent.\n\t *\n\t * @since 4.7\n\t */\n\tpublic createErrorNode(parent: ParserRuleContext, t: Token): ErrorNode {\n\t\treturn new ErrorNode(t);\n\t}\n\n\tprotected addContextToParseTree(): void {\n\t\tlet parent = this._ctx._parent as ParserRuleContext | undefined;\n\t\t// add current context to parent if we have a parent\n\t\tif (parent != null) {\n\t\t\tparent.addChild(this._ctx);\n\t\t}\n\t}\n\n\t/**\n\t * Always called by generated parsers upon entry to a rule. Access field\n\t * {@link #_ctx} get the current context.\n\t */\n\tpublic enterRule(@NotNull localctx: ParserRuleContext, state: number, ruleIndex: number): void {\n\t\tthis.state = state;\n\t\tthis._ctx = localctx;\n\t\tthis._ctx._start = this._input.LT(1);\n\t\tif (this._buildParseTrees) {\n\t\t\tthis.addContextToParseTree();\n\t\t}\n\t\tthis.triggerEnterRuleEvent();\n\t}\n\n\tpublic enterLeftFactoredRule(localctx: ParserRuleContext, state: number, ruleIndex: number): void {\n\t\tthis.state = state;\n\t\tif (this._buildParseTrees) {\n\t\t\tlet factoredContext = this._ctx.getChild(this._ctx.childCount - 1) as ParserRuleContext;\n\t\t\tthis._ctx.removeLastChild();\n\t\t\tfactoredContext._parent = localctx;\n\t\t\tlocalctx.addChild(factoredContext);\n\t\t}\n\n\t\tthis._ctx = localctx;\n\t\tthis._ctx._start = this._input.LT(1);\n\t\tif (this._buildParseTrees) {\n\t\t\tthis.addContextToParseTree();\n\t\t}\n\n\t\tthis.triggerEnterRuleEvent();\n\t}\n\n\tpublic exitRule(): void {\n\t\tif (this.matchedEOF) {\n\t\t\t// if we have matched EOF, it cannot consume past EOF so we use LT(1) here\n\t\t\tthis._ctx._stop = this._input.LT(1); // LT(1) will be end of file\n\t\t}\n\t\telse {\n\t\t\tthis._ctx._stop = this._input.tryLT(-1); // stop node is what we just matched\n\t\t}\n\t\t// trigger event on _ctx, before it reverts to parent\n\t\tthis.triggerExitRuleEvent();\n\t\tthis.state = this._ctx.invokingState;\n\t\tthis._ctx = this._ctx._parent as ParserRuleContext;\n\t}\n\n\tpublic enterOuterAlt(localctx: ParserRuleContext, altNum: number): void {\n\t\tlocalctx.altNumber = altNum;\n\t\t// if we have new localctx, make sure we replace existing ctx\n\t\t// that is previous child of parse tree\n\t\tif (this._buildParseTrees && this._ctx !== localctx) {\n\t\t\tlet parent = this._ctx._parent as ParserRuleContext | undefined;\n\t\t\tif (parent != null) {\n\t\t\t\tparent.removeLastChild();\n\t\t\t\tparent.addChild(localctx);\n\t\t\t}\n\t\t}\n\t\tthis._ctx = localctx;\n\t}\n\n\t/**\n\t * Get the precedence level for the top-most precedence rule.\n\t *\n\t * @returns The precedence level for the top-most precedence rule, or -1 if\n\t * the parser context is not nested within a precedence rule.\n\t */\n\tget precedence(): number {\n\t\tif (this._precedenceStack.isEmpty) {\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn this._precedenceStack.peek();\n\t}\n\n\tpublic enterRecursionRule(localctx: ParserRuleContext, state: number, ruleIndex: number, precedence: number): void {\n\t\tthis.state = state;\n\t\tthis._precedenceStack.push(precedence);\n\t\tthis._ctx = localctx;\n\t\tthis._ctx._start = this._input.LT(1);\n\t\tthis.triggerEnterRuleEvent(); // simulates rule entry for left-recursive rules\n\t}\n\n\t/** Like {@link #enterRule} but for recursive rules.\n\t *  Make the current context the child of the incoming localctx.\n\t */\n\tpublic pushNewRecursionContext(localctx: ParserRuleContext, state: number, ruleIndex: number): void {\n\t\tlet previous: ParserRuleContext = this._ctx;\n\t\tprevious._parent = localctx;\n\t\tprevious.invokingState = state;\n\t\tprevious._stop = this._input.tryLT(-1);\n\n\t\tthis._ctx = localctx;\n\t\tthis._ctx._start = previous._start;\n\t\tif (this._buildParseTrees) {\n\t\t\tthis._ctx.addChild(previous);\n\t\t}\n\n\t\tthis.triggerEnterRuleEvent(); // simulates rule entry for left-recursive rules\n\t}\n\n\tpublic unrollRecursionContexts(_parentctx: ParserRuleContext): void {\n\t\tthis._precedenceStack.pop();\n\t\tthis._ctx._stop = this._input.tryLT(-1);\n\t\tlet retctx: ParserRuleContext = this._ctx; // save current ctx (return value)\n\n\t\t// unroll so _ctx is as it was before call to recursive method\n\t\tif (this._parseListeners.length > 0) {\n\t\t\twhile (this._ctx !== _parentctx) {\n\t\t\t\tthis.triggerExitRuleEvent();\n\t\t\t\tthis._ctx = this._ctx._parent as ParserRuleContext;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis._ctx = _parentctx;\n\t\t}\n\n\t\t// hook into tree\n\t\tretctx._parent = _parentctx;\n\n\t\tif (this._buildParseTrees && _parentctx != null) {\n\t\t\t// add return ctx into invoking rule's tree\n\t\t\t_parentctx.addChild(retctx);\n\t\t}\n\t}\n\n\tpublic getInvokingContext(ruleIndex: number): ParserRuleContext | undefined {\n\t\tlet p = this._ctx;\n\t\twhile (p && p.ruleIndex !== ruleIndex) {\n\t\t\tp = p._parent as ParserRuleContext;\n\t\t}\n\t\treturn p;\n\t}\n\n\tget context(): ParserRuleContext {\n\t\treturn this._ctx;\n\t}\n\n\tset context(ctx: ParserRuleContext) {\n\t\tthis._ctx = ctx;\n\t}\n\n\t@Override\n\tpublic precpred(@Nullable localctx: RuleContext, precedence: number): boolean {\n\t\treturn precedence >= this._precedenceStack.peek();\n\t}\n\n\t@Override\n\tpublic getErrorListenerDispatch(): ParserErrorListener {\n\t\treturn new ProxyParserErrorListener(this.getErrorListeners());\n\t}\n\n\tpublic inContext(context: string): boolean {\n\t\t// TODO: useful in parser?\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks whether or not `symbol` can follow the current state in the\n\t * ATN. The behavior of this method is equivalent to the following, but is\n\t * implemented such that the complete context-sensitive follow set does not\n\t * need to be explicitly constructed.\n\t *\n\t * ```\n\t * return getExpectedTokens().contains(symbol);\n\t * ```\n\t *\n\t * @param symbol the symbol type to check\n\t * @returns `true` if `symbol` can follow the current state in\n\t * the ATN, otherwise `false`.\n\t */\n\tpublic isExpectedToken(symbol: number): boolean {\n//   \t\treturn interpreter.atn.nextTokens(_ctx);\n\t\tlet atn: ATN = this.interpreter.atn;\n\t\tlet ctx: ParserRuleContext = this._ctx;\n\t\tlet s: ATNState = atn.states[this.state];\n\t\tlet following: IntervalSet = atn.nextTokens(s);\n\t\tif (following.contains(symbol)) {\n\t\t\treturn true;\n\t\t}\n//        System.out.println(\"following \"+s+\"=\"+following);\n\t\tif (!following.contains(Token.EPSILON)) {\n\t\t\treturn false;\n\t\t}\n\n\t\twhile (ctx != null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {\n\t\t\tlet invokingState: ATNState = atn.states[ctx.invokingState];\n\t\t\tlet rt = invokingState.transition(0) as RuleTransition;\n\t\t\tfollowing = atn.nextTokens(rt.followState);\n\t\t\tif (following.contains(symbol)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tctx = ctx._parent as ParserRuleContext;\n\t\t}\n\n\t\tif (following.contains(Token.EPSILON) && symbol === Token.EOF) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tget isMatchedEOF(): boolean {\n\t\treturn this.matchedEOF;\n\t}\n\n\t/**\n\t * Computes the set of input symbols which could follow the current parser\n\t * state and context, as given by {@link #getState} and {@link #getContext},\n\t * respectively.\n\t *\n\t * @see ATN#getExpectedTokens(int, RuleContext)\n\t */\n\t@NotNull\n\tpublic getExpectedTokens(): IntervalSet {\n\t\treturn this.atn.getExpectedTokens(this.state, this.context);\n\t}\n\n\t@NotNull\n\tpublic getExpectedTokensWithinCurrentRule(): IntervalSet {\n\t\tlet atn: ATN = this.interpreter.atn;\n\t\tlet s: ATNState = atn.states[this.state];\n\t\treturn atn.nextTokens(s);\n\t}\n\n\t/** Get a rule's index (i.e., `RULE_ruleName` field) or -1 if not found. */\n\tpublic getRuleIndex(ruleName: string): number {\n\t\tlet ruleIndex = this.getRuleIndexMap().get(ruleName);\n\t\tif (ruleIndex != null) {\n\t\t\treturn ruleIndex;\n\t\t}\n\t\treturn -1;\n\t}\n\n\tget ruleContext(): ParserRuleContext { return this._ctx; }\n\n\t/** Return List&lt;String&gt; of the rule names in your parser instance\n\t *  leading up to a call to the current rule.  You could override if\n\t *  you want more details such as the file/line info of where\n\t *  in the ATN a rule is invoked.\n\t *\n\t *  This is very useful for error messages.\n\t */\n\n\tpublic getRuleInvocationStack(ctx: RuleContext = this._ctx): string[] {\n\t\tlet p: RuleContext | undefined = ctx;  \t\t// Workaround for Microsoft/TypeScript#14487\n\t\tlet ruleNames: string[] = this.ruleNames;\n\t\tlet stack: string[] = [];\n\t\twhile (p != null) {\n\t\t\t// compute what follows who invoked us\n\t\t\tlet ruleIndex: number = p.ruleIndex;\n\t\t\tif (ruleIndex < 0) {\n\t\t\t\tstack.push(\"n/a\");\n\t\t\t} else {\n\t\t\t\tstack.push(ruleNames[ruleIndex]);\n\t\t\t}\n\t\t\tp = p._parent as RuleContext;\n\t\t}\n\t\treturn stack;\n\t}\n\n\t/** For debugging and other purposes. */\n\tpublic getDFAStrings(): string[] {\n\t\tlet s: string[] = [];\n\t\tfor (let dfa of this._interp.atn.decisionToDFA) {\n\t\t\ts.push(dfa.toString(this.vocabulary, this.ruleNames));\n\t\t}\n\t\treturn s;\n\t}\n\n\t/** For debugging and other purposes. */\n\tpublic dumpDFA(): void {\n\t\tlet seenOne: boolean = false;\n\t\tfor (let dfa of this._interp.atn.decisionToDFA) {\n\t\t\tif (!dfa.isEmpty) {\n\t\t\t\tif (seenOne) {\n\t\t\t\t\tconsole.log();\n\t\t\t\t}\n\t\t\t\tconsole.log(\"Decision \" + dfa.decision + \":\");\n\t\t\t\tprocess.stdout.write(dfa.toString(this.vocabulary, this.ruleNames));\n\t\t\t\tseenOne = true;\n\t\t\t}\n\t\t}\n\t}\n\n\tget sourceName(): string {\n\t\treturn this._input.sourceName;\n\t}\n\n\t@Override\n\tget parseInfo(): Promise<ParseInfo | undefined> {\n\t\treturn import(\"./atn/ProfilingATNSimulator\").then((m) => {\n\t\t\tlet interp: ParserATNSimulator = this.interpreter;\n\t\t\tif (interp instanceof m.ProfilingATNSimulator) {\n\t\t\t\treturn new ParseInfo(interp);\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\t/**\n\t * @since 4.3\n\t */\n\tpublic async setProfile(profile: boolean): Promise<void> {\n\t\tlet m = await import(\"./atn/ProfilingATNSimulator\");\n\t\tlet interp: ParserATNSimulator = this.interpreter;\n\t\tif (profile) {\n\t\t\tif (!(interp instanceof m.ProfilingATNSimulator)) {\n\t\t\t\tthis.interpreter = new m.ProfilingATNSimulator(this);\n\t\t\t}\n\t\t} else if (interp instanceof m.ProfilingATNSimulator) {\n\t\t\tthis.interpreter = new ParserATNSimulator(this.atn, this);\n\t\t}\n\n\t\tthis.interpreter.setPredictionMode(interp.getPredictionMode());\n\t}\n\n\t/** During a parse is sometimes useful to listen in on the rule entry and exit\n\t *  events as well as token matches. This is for quick and dirty debugging.\n\t */\n\tset isTrace(trace: boolean) {\n\t\tif (!trace) {\n\t\t\tif (this._tracer) {\n\t\t\t\tthis.removeParseListener(this._tracer);\n\t\t\t\tthis._tracer = undefined;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (this._tracer) {\n\t\t\t\tthis.removeParseListener(this._tracer);\n\t\t\t} else {\n\t\t\t\tthis._tracer = new TraceListener(this.ruleNames, this._input);\n\t\t\t}\n\n\t\t\tthis.addParseListener(this._tracer);\n\t\t}\n\t}\n\n\t/**\n\t * Gets whether a {@link TraceListener} is registered as a parse listener\n\t * for the parser.\n\t */\n\tget isTrace(): boolean {\n\t\treturn this._tracer != null;\n\t}\n}\n"]}