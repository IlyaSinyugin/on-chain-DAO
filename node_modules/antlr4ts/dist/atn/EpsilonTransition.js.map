{"version":3,"file":"EpsilonTransition.js","sourceRoot":"","sources":["../../../src/atn/EpsilonTransition.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;AAKH,8CAAkD;AAClD,6CAA0C;AAG1C,IAAa,iBAAiB,GAA9B,uBAA+B,SAAQ,uBAAU;IAIhD,YAAqB,MAAgB,EAAE,4BAAoC,CAAC,CAAC;QAC5E,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,0BAA0B,GAAG,yBAAyB,CAAC;IAC7D,CAAC;IAED;;;;;;;OAOG;IACH,IAAI,yBAAyB;QAC5B,OAAO,IAAI,CAAC,0BAA0B,CAAC;IACxC,CAAC;IAGD,IAAI,iBAAiB;QACpB,uBAA8B;IAC/B,CAAC;IAGD,IAAI,SAAS;QACZ,OAAO,IAAI,CAAC;IACb,CAAC;IAGM,OAAO,CAAC,MAAc,EAAE,cAAsB,EAAE,cAAsB;QAC5E,OAAO,KAAK,CAAC;IACd,CAAC;IAIM,QAAQ;QACd,OAAO,SAAS,CAAC;IAClB,CAAC;CACD,CAAA;AAnBA;IADC,qBAAQ;0DAGR;AAGD;IADC,qBAAQ;kDAGR;AAGD;IADC,qBAAQ;gDAGR;AAID;IAFC,qBAAQ;IACR,oBAAO;iDAGP;AAxCW,iBAAiB;IAIhB,WAAA,oBAAO,CAAA;GAJR,iBAAiB,CAyC7B;AAzCY,8CAAiB","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:28.6283213-07:00\n\nimport { ATNState } from \"./ATNState\";\nimport { Override, NotNull } from \"../Decorators\";\nimport { Transition } from \"./Transition\";\nimport { TransitionType } from \"./TransitionType\";\n\nexport class EpsilonTransition extends Transition {\n\n\tprivate _outermostPrecedenceReturn: number;\n\n\tconstructor(@NotNull target: ATNState, outermostPrecedenceReturn: number = -1) {\n\t\tsuper(target);\n\t\tthis._outermostPrecedenceReturn = outermostPrecedenceReturn;\n\t}\n\n\t/**\n\t * @returns the rule index of a precedence rule for which this transition is\n\t * returning from, where the precedence value is 0; otherwise, -1.\n\t *\n\t * @see ATNConfig.isPrecedenceFilterSuppressed\n\t * @see ParserATNSimulator#applyPrecedenceFilter(ATNConfigSet, ParserRuleContext, PredictionContextCache)\n\t * @since 4.4.1\n\t */\n\tget outermostPrecedenceReturn(): number {\n\t\treturn this._outermostPrecedenceReturn;\n\t}\n\n\t@Override\n\tget serializationType(): TransitionType {\n\t\treturn TransitionType.EPSILON;\n\t}\n\n\t@Override\n\tget isEpsilon(): boolean {\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic matches(symbol: number, minVocabSymbol: number, maxVocabSymbol: number): boolean {\n\t\treturn false;\n\t}\n\n\t@Override\n\t@NotNull\n\tpublic toString(): string {\n\t\treturn \"epsilon\";\n\t}\n}\n"]}