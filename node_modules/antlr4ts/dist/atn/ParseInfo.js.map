{"version":3,"file":"ParseInfo.js","sourceRoot":"","sources":["../../../src/atn/ParseInfo.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:31.0349605-07:00\n\nimport { DecisionInfo } from \"./DecisionInfo\";\nimport { DFA } from \"../dfa/DFA\";\nimport { NotNull } from \"../Decorators\";\nimport { ProfilingATNSimulator } from \"./ProfilingATNSimulator\";\n\n/**\n * This class provides access to specific and aggregate statistics gathered\n * during profiling of a parser.\n *\n * @since 4.3\n */\nexport class ParseInfo {\n\tprotected atnSimulator: ProfilingATNSimulator;\n\n\tconstructor(@NotNull atnSimulator: ProfilingATNSimulator) {\n\t\tthis.atnSimulator = atnSimulator;\n\t}\n\n\t/**\n\t * Gets an array of {@link DecisionInfo} instances containing the profiling\n\t * information gathered for each decision in the ATN.\n\t *\n\t * @returns An array of {@link DecisionInfo} instances, indexed by decision\n\t * number.\n\t */\n\t@NotNull\n\tpublic getDecisionInfo(): DecisionInfo[] {\n\t\treturn this.atnSimulator.getDecisionInfo();\n\t}\n\n\t/**\n\t * Gets the decision numbers for decisions that required one or more\n\t * full-context predictions during parsing. These are decisions for which\n\t * {@link DecisionInfo#LL_Fallback} is non-zero.\n\t *\n\t * @returns A list of decision numbers which required one or more\n\t * full-context predictions during parsing.\n\t */\n\t@NotNull\n\tpublic getLLDecisions(): number[] {\n\t\tlet decisions: DecisionInfo[] = this.atnSimulator.getDecisionInfo();\n\t\tlet LL: number[] = [];\n\t\tfor (let i = 0; i < decisions.length; i++) {\n\t\t\tlet fallBack: number = decisions[i].LL_Fallback;\n\t\t\tif (fallBack > 0) {\n\t\t\t\tLL.push(i);\n\t\t\t}\n\t\t}\n\n\t\treturn LL;\n\t}\n\n\t/**\n\t * Gets the total time spent during prediction across all decisions made\n\t * during parsing. This value is the sum of\n\t * {@link DecisionInfo#timeInPrediction} for all decisions.\n\t */\n\tpublic getTotalTimeInPrediction(): number {\n\t\tlet decisions: DecisionInfo[] = this.atnSimulator.getDecisionInfo();\n\t\tlet t: number = 0;\n\t\tfor (let decision of decisions) {\n\t\t\tt += decision.timeInPrediction;\n\t\t}\n\n\t\treturn t;\n\t}\n\n\t/**\n\t * Gets the total number of SLL lookahead operations across all decisions\n\t * made during parsing. This value is the sum of\n\t * {@link DecisionInfo#SLL_TotalLook} for all decisions.\n\t */\n\tpublic getTotalSLLLookaheadOps(): number {\n\t\tlet decisions: DecisionInfo[] = this.atnSimulator.getDecisionInfo();\n\t\tlet k: number = 0;\n\t\tfor (let decision of decisions) {\n\t\t\tk += decision.SLL_TotalLook;\n\t\t}\n\n\t\treturn k;\n\t}\n\n\t/**\n\t * Gets the total number of LL lookahead operations across all decisions\n\t * made during parsing. This value is the sum of\n\t * {@link DecisionInfo#LL_TotalLook} for all decisions.\n\t */\n\tpublic getTotalLLLookaheadOps(): number {\n\t\tlet decisions: DecisionInfo[] = this.atnSimulator.getDecisionInfo();\n\t\tlet k: number = 0;\n\t\tfor (let decision of decisions) {\n\t\t\tk += decision.LL_TotalLook;\n\t\t}\n\n\t\treturn k;\n\t}\n\n\t/**\n\t * Gets the total number of ATN lookahead operations for SLL prediction\n\t * across all decisions made during parsing.\n\t */\n\tpublic getTotalSLLATNLookaheadOps(): number {\n\t\tlet decisions: DecisionInfo[] = this.atnSimulator.getDecisionInfo();\n\t\tlet k: number = 0;\n\t\tfor (let decision of decisions) {\n\t\t\tk += decision.SLL_ATNTransitions;\n\t\t}\n\n\t\treturn k;\n\t}\n\n\t/**\n\t * Gets the total number of ATN lookahead operations for LL prediction\n\t * across all decisions made during parsing.\n\t */\n\tpublic getTotalLLATNLookaheadOps(): number {\n\t\tlet decisions: DecisionInfo[] = this.atnSimulator.getDecisionInfo();\n\t\tlet k: number = 0;\n\t\tfor (let decision of decisions) {\n\t\t\tk += decision.LL_ATNTransitions;\n\t\t}\n\n\t\treturn k;\n\t}\n\n\t/**\n\t * Gets the total number of ATN lookahead operations for SLL and LL\n\t * prediction across all decisions made during parsing.\n\t *\n\t * This value is the sum of {@link #getTotalSLLATNLookaheadOps} and\n\t * {@link #getTotalLLATNLookaheadOps}.\n\t */\n\tpublic getTotalATNLookaheadOps(): number {\n\t\tlet decisions: DecisionInfo[] = this.atnSimulator.getDecisionInfo();\n\t\tlet k: number = 0;\n\t\tfor (let decision of decisions) {\n\t\t\tk += decision.SLL_ATNTransitions;\n\t\t\tk += decision.LL_ATNTransitions;\n\t\t}\n\n\t\treturn k;\n\t}\n\n\t/**\n\t * Gets the total number of DFA states stored in the DFA cache for all\n\t * decisions in the ATN.\n\t */\n\tpublic getDFASize(): number;\n\n\t/**\n\t * Gets the total number of DFA states stored in the DFA cache for a\n\t * particular decision.\n\t */\n\tpublic getDFASize(decision: number): number;\n\n\tpublic getDFASize(decision?: number): number {\n\t\tif (decision) {\n\t\t\tlet decisionToDFA: DFA = this.atnSimulator.atn.decisionToDFA[decision];\n\t\t\treturn decisionToDFA.states.size;\n\t\t} else {\n\t\t\tlet n: number = 0;\n\t\t\tlet decisionToDFA: DFA[] = this.atnSimulator.atn.decisionToDFA;\n\t\t\tfor (let i = 0; i < decisionToDFA.length; i++) {\n\t\t\t\tn += this.getDFASize(i);\n\t\t\t}\n\n\t\t\treturn n;\n\t\t}\n\t}\n}\n"]}