{"version":3,"file":"LexerSkipAction.js","sourceRoot":"","sources":["../../../src/atn/LexerSkipAction.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;AAOH,mDAAgD;AAChD,8CAAkD;AAElD;;;;;;;;GAQG;AACH;IACC;;OAEG;IACH;QACC,sBAAsB;IACvB,CAAC;IAED;;;OAGG;IAEH,IAAI,UAAU;QACb,oBAA4B;IAC7B,CAAC;IAED;;;OAGG;IAEH,IAAI,mBAAmB;QACtB,OAAO,KAAK,CAAC;IACd,CAAC;IAED;;;;OAIG;IAEI,OAAO,CAAU,KAAY;QACnC,KAAK,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAGM,QAAQ;QACd,IAAI,IAAI,GAAW,uBAAU,CAAC,UAAU,EAAE,CAAC;QAC3C,IAAI,GAAG,uBAAU,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAChD,OAAO,uBAAU,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IACnC,CAAC;IAGM,MAAM,CAAC,GAAQ;QACrB,OAAO,GAAG,KAAK,IAAI,CAAC;IACrB,CAAC;IAGM,QAAQ;QACd,OAAO,MAAM,CAAC;IACf,CAAC;CACD;AAvCA;IADC,qBAAQ;iDAGR;AAOD;IADC,qBAAQ;0DAGR;AAQD;IADC,qBAAQ;IACO,WAAA,oBAAO,CAAA;8CAEtB;AAGD;IADC,qBAAQ;+CAKR;AAGD;IADC,qBAAQ;6CAGR;AAGD;IADC,qBAAQ;+CAGR;AAnDF,0CAoDC;AAED,WAAiB,eAAe;IAC/B;;OAEG;IACU,wBAAQ,GAAoB,IAAI,eAAe,EAAE,CAAC;AAChE,CAAC,EALgB,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAK/B","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:30.2324460-07:00\n\nimport { Lexer } from \"../Lexer\";\nimport { LexerAction } from \"./LexerAction\";\nimport { LexerActionType } from \"./LexerActionType\";\nimport { MurmurHash } from \"../misc/MurmurHash\";\nimport { NotNull, Override } from \"../Decorators\";\n\n/**\n * Implements the `skip` lexer action by calling {@link Lexer#skip}.\n *\n * The `skip` command does not have any parameters, so this action is\n * implemented as a singleton instance exposed by {@link #INSTANCE}.\n *\n * @author Sam Harwell\n * @since 4.2\n */\nexport class LexerSkipAction implements LexerAction {\n\t/**\n\t * Constructs the singleton instance of the lexer `skip` command.\n\t */\n\tconstructor() {\n\t\t// intentionally empty\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @returns This method returns {@link LexerActionType#SKIP}.\n\t */\n\t@Override\n\tget actionType(): LexerActionType {\n\t\treturn LexerActionType.SKIP;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @returns This method returns `false`.\n\t */\n\t@Override\n\tget isPositionDependent(): boolean {\n\t\treturn false;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * This action is implemented by calling {@link Lexer#skip}.\n\t */\n\t@Override\n\tpublic execute(@NotNull lexer: Lexer): void {\n\t\tlexer.skip();\n\t}\n\n\t@Override\n\tpublic hashCode(): number {\n\t\tlet hash: number = MurmurHash.initialize();\n\t\thash = MurmurHash.update(hash, this.actionType);\n\t\treturn MurmurHash.finish(hash, 1);\n\t}\n\n\t@Override\n\tpublic equals(obj: any): boolean {\n\t\treturn obj === this;\n\t}\n\n\t@Override\n\tpublic toString(): string {\n\t\treturn \"skip\";\n\t}\n}\n\nexport namespace LexerSkipAction {\n\t/**\n\t * Provides a singleton instance of this parameterless lexer action.\n\t */\n\texport const INSTANCE: LexerSkipAction = new LexerSkipAction();\n}\n"]}