{"version":3,"file":"PrecedencePredicateTransition.js","sourceRoot":"","sources":["../../../src/atn/PrecedencePredicateTransition.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;AAEH,wDAAwD;AAExD,+EAA4E;AAE5E,8CAAkD;AAClD,uDAAoD;AAGpD;;;GAGG;AACH,IAAa,6BAA6B,GAA1C,mCAA2C,SAAQ,yDAA2B;IAG7E,YAAsB,MAAgB,EAAE,UAAkB;QACzD,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC9B,CAAC;IAGD,IAAI,iBAAiB;QACpB,2BAAiC;IAClC,CAAC;IAGD,IAAI,SAAS;QACZ,OAAO,IAAI,CAAC;IACb,CAAC;IAGM,OAAO,CAAC,MAAc,EAAE,cAAsB,EAAE,cAAsB;QAC5E,OAAO,KAAK,CAAC;IACd,CAAC;IAED,IAAI,SAAS;QACZ,OAAO,IAAI,iCAAe,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACjE,CAAC;IAGM,QAAQ;QACd,OAAO,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;IACnC,CAAC;CACD,CAAA;AAtBA;IADC,qBAAQ;sEAGR;AAGD;IADC,qBAAQ;8DAGR;AAGD;IADC,qBAAQ;4DAGR;AAOD;IADC,qBAAQ;6DAGR;AA9BW,6BAA6B;IAG3B,WAAA,oBAAO,CAAA;GAHT,6BAA6B,CA+BzC;AA/BY,sEAA6B","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:35.0994191-07:00\n\nimport { AbstractPredicateTransition } from \"./AbstractPredicateTransition\";\nimport { ATNState } from \"./ATNState\";\nimport { NotNull, Override } from \"../Decorators\";\nimport { SemanticContext } from \"./SemanticContext\";\nimport { TransitionType } from \"./TransitionType\";\n\n/**\n *\n * @author Sam Harwell\n */\nexport class PrecedencePredicateTransition extends AbstractPredicateTransition {\n\tpublic precedence: number;\n\n\tconstructor( @NotNull target: ATNState, precedence: number) {\n\t\tsuper(target);\n\t\tthis.precedence = precedence;\n\t}\n\n\t@Override\n\tget serializationType(): TransitionType {\n\t\treturn TransitionType.PRECEDENCE;\n\t}\n\n\t@Override\n\tget isEpsilon(): boolean {\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic matches(symbol: number, minVocabSymbol: number, maxVocabSymbol: number): boolean {\n\t\treturn false;\n\t}\n\n\tget predicate(): SemanticContext.PrecedencePredicate {\n\t\treturn new SemanticContext.PrecedencePredicate(this.precedence);\n\t}\n\n\t@Override\n\tpublic toString(): string {\n\t\treturn this.precedence + \" >= _p\";\n\t}\n}\n"]}