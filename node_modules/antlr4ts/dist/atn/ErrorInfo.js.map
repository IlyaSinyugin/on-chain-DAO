{"version":3,"file":"ErrorInfo.js","sourceRoot":"","sources":["../../../src/atn/ErrorInfo.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;AAEH,wDAAwD;AAExD,2DAAwD;AACxD,8CAAwC;AAIxC;;;;;;;;;;GAUG;AACH,IAAa,SAAS,GAAtB,eAAuB,SAAQ,qCAAiB;IAC/C;;;;;;;;;;OAUG;IACH,YACC,QAAgB,EACP,KAAqB,EACrB,KAAkB,EAC3B,UAAkB,EAClB,SAAiB;QAEjB,KAAK,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC;IACxE,CAAC;CACD,CAAA;AArBY,SAAS;IAcnB,WAAA,oBAAO,CAAA;IACP,WAAA,oBAAO,CAAA;GAfG,SAAS,CAqBrB;AArBY,8BAAS","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:28.7213647-07:00\n\nimport { DecisionEventInfo } from \"./DecisionEventInfo\";\nimport { NotNull } from \"../Decorators\";\nimport { SimulatorState } from \"./SimulatorState\";\nimport { TokenStream } from \"../TokenStream\";\n\n/**\n * This class represents profiling event information for a syntax error\n * identified during prediction. Syntax errors occur when the prediction\n * algorithm is unable to identify an alternative which would lead to a\n * successful parse.\n *\n * @see Parser#notifyErrorListeners(Token, String, RecognitionException)\n * @see ANTLRErrorListener#syntaxError\n *\n * @since 4.3\n */\nexport class ErrorInfo extends DecisionEventInfo {\n\t/**\n\t * Constructs a new instance of the {@link ErrorInfo} class with the\n\t * specified detailed syntax error information.\n\t *\n\t * @param decision The decision number\n\t * @param state The final simulator state reached during prediction\n\t * prior to reaching the {@link ATNSimulator#ERROR} state\n\t * @param input The input token stream\n\t * @param startIndex The start index for the current prediction\n\t * @param stopIndex The index at which the syntax error was identified\n\t */\n\tconstructor(\n\t\tdecision: number,\n\t\t@NotNull state: SimulatorState,\n\t\t@NotNull input: TokenStream,\n\t\tstartIndex: number,\n\t\tstopIndex: number) {\n\n\t\tsuper(decision, state, input, startIndex, stopIndex, state.useContext);\n\t}\n}\n"]}