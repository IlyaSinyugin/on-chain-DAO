{"version":3,"file":"LexerChannelAction.js","sourceRoot":"","sources":["../../../src/atn/LexerChannelAction.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;AAOH,mDAAgD;AAChD,8CAAkD;AAElD;;;;;;GAMG;AACH;IAGC;;;OAGG;IACH,YAAY,OAAe;QAC1B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACH,IAAI,OAAO;QACV,OAAO,IAAI,CAAC,QAAQ,CAAC;IACtB,CAAC;IAED;;;OAGG;IAEH,IAAI,UAAU;QACb,uBAA+B;IAChC,CAAC;IAED;;;OAGG;IAEH,IAAI,mBAAmB;QACtB,OAAO,KAAK,CAAC;IACd,CAAC;IAED;;;;;OAKG;IAEI,OAAO,CAAU,KAAY;QACnC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;IAC/B,CAAC;IAGM,QAAQ;QACd,IAAI,IAAI,GAAW,uBAAU,CAAC,UAAU,EAAE,CAAC;QAC3C,IAAI,GAAG,uBAAU,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAChD,IAAI,GAAG,uBAAU,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9C,OAAO,uBAAU,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IACnC,CAAC;IAGM,MAAM,CAAC,GAAQ;QACrB,IAAI,GAAG,KAAK,IAAI,EAAE;YACjB,OAAO,IAAI,CAAC;SACZ;aAAM,IAAI,CAAC,CAAC,GAAG,YAAY,kBAAkB,CAAC,EAAE;YAChD,OAAO,KAAK,CAAC;SACb;QAED,OAAO,IAAI,CAAC,QAAQ,KAAK,GAAG,CAAC,QAAQ,CAAC;IACvC,CAAC;IAGM,QAAQ;QACd,OAAO,WAAW,IAAI,CAAC,QAAQ,GAAG,CAAC;IACpC,CAAC;CACD;AA/CA;IADC,qBAAQ;oDAGR;AAOD;IADC,qBAAQ;6DAGR;AASD;IADC,qBAAQ;IACO,WAAA,oBAAO,CAAA;iDAEtB;AAGD;IADC,qBAAQ;kDAMR;AAGD;IADC,qBAAQ;gDASR;AAGD;IADC,qBAAQ;kDAGR;AAvEF,gDAwEC","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:29.5634388-07:00\n\nimport { Lexer } from \"../Lexer\";\nimport { LexerAction } from \"./LexerAction\";\nimport { LexerActionType } from \"./LexerActionType\";\nimport { MurmurHash } from \"../misc/MurmurHash\";\nimport { NotNull, Override } from \"../Decorators\";\n\n/**\n * Implements the `channel` lexer action by calling\n * {@link Lexer#setChannel} with the assigned channel.\n *\n * @author Sam Harwell\n * @since 4.2\n */\nexport class LexerChannelAction implements LexerAction {\n\tprivate readonly _channel: number;\n\n\t/**\n\t * Constructs a new `channel` action with the specified channel value.\n\t * @param channel The channel value to pass to {@link Lexer#setChannel}.\n\t */\n\tconstructor(channel: number) {\n\t\tthis._channel = channel;\n\t}\n\n\t/**\n\t * Gets the channel to use for the {@link Token} created by the lexer.\n\t *\n\t * @returns The channel to use for the {@link Token} created by the lexer.\n\t */\n\tget channel(): number {\n\t\treturn this._channel;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @returns This method returns {@link LexerActionType#CHANNEL}.\n\t */\n\t@Override\n\tget actionType(): LexerActionType {\n\t\treturn LexerActionType.CHANNEL;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @returns This method returns `false`.\n\t */\n\t@Override\n\tget isPositionDependent(): boolean {\n\t\treturn false;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * This action is implemented by calling {@link Lexer#setChannel} with the\n\t * value provided by {@link #getChannel}.\n\t */\n\t@Override\n\tpublic execute(@NotNull lexer: Lexer): void {\n\t\tlexer.channel = this._channel;\n\t}\n\n\t@Override\n\tpublic hashCode(): number {\n\t\tlet hash: number = MurmurHash.initialize();\n\t\thash = MurmurHash.update(hash, this.actionType);\n\t\thash = MurmurHash.update(hash, this._channel);\n\t\treturn MurmurHash.finish(hash, 2);\n\t}\n\n\t@Override\n\tpublic equals(obj: any): boolean {\n\t\tif (obj === this) {\n\t\t\treturn true;\n\t\t} else if (!(obj instanceof LexerChannelAction)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this._channel === obj._channel;\n\t}\n\n\t@Override\n\tpublic toString(): string {\n\t\treturn `channel(${this._channel})`;\n\t}\n}\n"]}