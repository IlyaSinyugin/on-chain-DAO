{"version":3,"file":"PredictionContext.js","sourceRoot":"","sources":["../../../src/atn/PredictionContext.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:35.3812636-07:00\n\n\nimport { Array2DHashMap } from \"../misc/Array2DHashMap\";\nimport { Array2DHashSet } from \"../misc/Array2DHashSet\";\nimport { Arrays } from \"../misc/Arrays\";\nimport { ATN } from \"./ATN\";\nimport { ATNState } from \"./ATNState\";\nimport { EqualityComparator } from \"../misc/EqualityComparator\";\nimport { MurmurHash } from \"../misc/MurmurHash\";\nimport { NotNull, Override } from \"../Decorators\";\nimport { Equatable, JavaSet } from \"../misc/Stubs\";\nimport { PredictionContextCache } from \"./PredictionContextCache\";\nimport { Recognizer } from \"../Recognizer\";\nimport { RuleContext } from \"../RuleContext\";\nimport { RuleTransition } from \"./RuleTransition\";\n\nimport * as assert from \"assert\";\n\nconst INITIAL_HASH: number = 1;\n\nexport abstract class PredictionContext implements Equatable {\n\t/**\n\t * Stores the computed hash code of this {@link PredictionContext}. The hash\n\t * code is computed in parts to match the following reference algorithm.\n\t *\n\t * ```\n\t * private int referenceHashCode() {\n\t *   int hash = {@link MurmurHash#initialize MurmurHash.initialize}({@link #INITIAL_HASH});\n\t *\n\t *   for (int i = 0; i &lt; this.size; i++) {\n\t *     hash = {@link MurmurHash#update MurmurHash.update}(hash, {@link #getParent getParent}(i));\n\t *   }\n\t *\n\t *   for (int i = 0; i &lt; this.size; i++) {\n\t *     hash = {@link MurmurHash#update MurmurHash.update}(hash, {@link #getReturnState getReturnState}(i));\n\t *   }\n\t *\n\t *   hash = {@link MurmurHash#finish MurmurHash.finish}(hash, 2 * this.size);\n\t *   return hash;\n\t * }\n\t * ```\n\t */\n\tprivate readonly cachedHashCode: number;\n\n\tconstructor(cachedHashCode: number) {\n\t\tthis.cachedHashCode = cachedHashCode;\n\t}\n\n\tprotected static calculateEmptyHashCode(): number {\n\t\tlet hash: number = MurmurHash.initialize(INITIAL_HASH);\n\t\thash = MurmurHash.finish(hash, 0);\n\t\treturn hash;\n\t}\n\n\tprotected static calculateSingleHashCode(parent: PredictionContext, returnState: number): number {\n\t\tlet hash: number = MurmurHash.initialize(INITIAL_HASH);\n\t\thash = MurmurHash.update(hash, parent);\n\t\thash = MurmurHash.update(hash, returnState);\n\t\thash = MurmurHash.finish(hash, 2);\n\t\treturn hash;\n\t}\n\n\tprotected static calculateHashCode(parents: PredictionContext[], returnStates: number[]): number {\n\t\tlet hash: number = MurmurHash.initialize(INITIAL_HASH);\n\n\t\tfor (let parent of parents) {\n\t\t\thash = MurmurHash.update(hash, parent);\n\t\t}\n\n\t\tfor (let returnState of returnStates) {\n\t\t\thash = MurmurHash.update(hash, returnState);\n\t\t}\n\n\t\thash = MurmurHash.finish(hash, 2 * parents.length);\n\t\treturn hash;\n\t}\n\n\tpublic abstract readonly size: number;\n\n\tpublic abstract getReturnState(index: number): number;\n\n\tpublic abstract findReturnState(returnState: number): number;\n\n\t// @NotNull\n\tpublic abstract getParent(index: number): PredictionContext;\n\n\tprotected abstract addEmptyContext(): PredictionContext;\n\n\tprotected abstract removeEmptyContext(): PredictionContext;\n\n\tpublic static fromRuleContext(atn: ATN, outerContext: RuleContext, fullContext: boolean = true): PredictionContext {\n\t\tif (outerContext.isEmpty) {\n\t\t\treturn fullContext ? PredictionContext.EMPTY_FULL : PredictionContext.EMPTY_LOCAL;\n\t\t}\n\n\t\tlet parent: PredictionContext;\n\t\tif (outerContext._parent) {\n\t\t\tparent = PredictionContext.fromRuleContext(atn, outerContext._parent, fullContext);\n\t\t} else {\n\t\t\tparent = fullContext ? PredictionContext.EMPTY_FULL : PredictionContext.EMPTY_LOCAL;\n\t\t}\n\n\t\tlet state: ATNState = atn.states[outerContext.invokingState];\n\t\tlet transition: RuleTransition = state.transition(0) as RuleTransition;\n\t\treturn parent.getChild(transition.followState.stateNumber);\n\t}\n\n\tprivate static addEmptyContext(context: PredictionContext): PredictionContext {\n\t\treturn context.addEmptyContext();\n\t}\n\n\tprivate static removeEmptyContext(context: PredictionContext): PredictionContext {\n\t\treturn context.removeEmptyContext();\n\t}\n\n\tpublic static join(@NotNull context0: PredictionContext, @NotNull context1: PredictionContext, @NotNull contextCache: PredictionContextCache = PredictionContextCache.UNCACHED): PredictionContext {\n\t\tif (context0 === context1) {\n\t\t\treturn context0;\n\t\t}\n\n\t\tif (context0.isEmpty) {\n\t\t\treturn PredictionContext.isEmptyLocal(context0) ? context0 : PredictionContext.addEmptyContext(context1);\n\t\t} else if (context1.isEmpty) {\n\t\t\treturn PredictionContext.isEmptyLocal(context1) ? context1 : PredictionContext.addEmptyContext(context0);\n\t\t}\n\n\t\tlet context0size: number = context0.size;\n\t\tlet context1size: number = context1.size;\n\t\tif (context0size === 1 && context1size === 1 && context0.getReturnState(0) === context1.getReturnState(0)) {\n\t\t\tlet merged: PredictionContext = contextCache.join(context0.getParent(0), context1.getParent(0));\n\t\t\tif (merged === context0.getParent(0)) {\n\t\t\t\treturn context0;\n\t\t\t} else if (merged === context1.getParent(0)) {\n\t\t\t\treturn context1;\n\t\t\t} else {\n\t\t\t\treturn merged.getChild(context0.getReturnState(0));\n\t\t\t}\n\t\t}\n\n\t\tlet count: number = 0;\n\t\tlet parentsList: PredictionContext[] = new Array<PredictionContext>(context0size + context1size);\n\t\tlet returnStatesList: number[] = new Array<number>(parentsList.length);\n\t\tlet leftIndex: number = 0;\n\t\tlet rightIndex: number = 0;\n\t\tlet canReturnLeft: boolean = true;\n\t\tlet canReturnRight: boolean = true;\n\t\twhile (leftIndex < context0size && rightIndex < context1size) {\n\t\t\tif (context0.getReturnState(leftIndex) === context1.getReturnState(rightIndex)) {\n\t\t\t\tparentsList[count] = contextCache.join(context0.getParent(leftIndex), context1.getParent(rightIndex));\n\t\t\t\treturnStatesList[count] = context0.getReturnState(leftIndex);\n\t\t\t\tcanReturnLeft = canReturnLeft && parentsList[count] === context0.getParent(leftIndex);\n\t\t\t\tcanReturnRight = canReturnRight && parentsList[count] === context1.getParent(rightIndex);\n\t\t\t\tleftIndex++;\n\t\t\t\trightIndex++;\n\t\t\t} else if (context0.getReturnState(leftIndex) < context1.getReturnState(rightIndex)) {\n\t\t\t\tparentsList[count] = context0.getParent(leftIndex);\n\t\t\t\treturnStatesList[count] = context0.getReturnState(leftIndex);\n\t\t\t\tcanReturnRight = false;\n\t\t\t\tleftIndex++;\n\t\t\t} else {\n\t\t\t\tassert(context1.getReturnState(rightIndex) < context0.getReturnState(leftIndex));\n\t\t\t\tparentsList[count] = context1.getParent(rightIndex);\n\t\t\t\treturnStatesList[count] = context1.getReturnState(rightIndex);\n\t\t\t\tcanReturnLeft = false;\n\t\t\t\trightIndex++;\n\t\t\t}\n\n\t\t\tcount++;\n\t\t}\n\n\t\twhile (leftIndex < context0size) {\n\t\t\tparentsList[count] = context0.getParent(leftIndex);\n\t\t\treturnStatesList[count] = context0.getReturnState(leftIndex);\n\t\t\tleftIndex++;\n\t\t\tcanReturnRight = false;\n\t\t\tcount++;\n\t\t}\n\n\t\twhile (rightIndex < context1size) {\n\t\t\tparentsList[count] = context1.getParent(rightIndex);\n\t\t\treturnStatesList[count] = context1.getReturnState(rightIndex);\n\t\t\trightIndex++;\n\t\t\tcanReturnLeft = false;\n\t\t\tcount++;\n\t\t}\n\n\t\tif (canReturnLeft) {\n\t\t\treturn context0;\n\t\t} else if (canReturnRight) {\n\t\t\treturn context1;\n\t\t}\n\n\t\tif (count < parentsList.length) {\n\t\t\tparentsList = parentsList.slice(0, count);\n\t\t\treturnStatesList = returnStatesList.slice(0, count);\n\t\t}\n\n\t\tif (parentsList.length === 0) {\n\t\t\t// if one of them was EMPTY_LOCAL, it would be empty and handled at the beginning of the method\n\t\t\treturn PredictionContext.EMPTY_FULL;\n\t\t} else if (parentsList.length === 1) {\n\t\t\treturn new SingletonPredictionContext(parentsList[0], returnStatesList[0]);\n\t\t} else {\n\t\t\treturn new ArrayPredictionContext(parentsList, returnStatesList);\n\t\t}\n\t}\n\n\tpublic static isEmptyLocal(context: PredictionContext): boolean {\n\t\treturn context === PredictionContext.EMPTY_LOCAL;\n\t}\n\n\tpublic static getCachedContext(\n\t\t@NotNull context: PredictionContext,\n\t\t@NotNull contextCache: Array2DHashMap<PredictionContext, PredictionContext>,\n\t\t@NotNull visited: PredictionContext.IdentityHashMap): PredictionContext {\n\t\tif (context.isEmpty) {\n\t\t\treturn context;\n\t\t}\n\n\t\tlet existing = visited.get(context);\n\t\tif (existing) {\n\t\t\treturn existing;\n\t\t}\n\n\t\texisting = contextCache.get(context);\n\t\tif (existing) {\n\t\t\tvisited.put(context, existing);\n\t\t\treturn existing;\n\t\t}\n\n\t\tlet changed: boolean = false;\n\t\tlet parents: PredictionContext[] = new Array<PredictionContext>(context.size);\n\t\tfor (let i = 0; i < parents.length; i++) {\n\t\t\tlet parent: PredictionContext = PredictionContext.getCachedContext(context.getParent(i), contextCache, visited);\n\t\t\tif (changed || parent !== context.getParent(i)) {\n\t\t\t\tif (!changed) {\n\t\t\t\t\tparents = new Array<PredictionContext>(context.size);\n\t\t\t\t\tfor (let j = 0; j < context.size; j++) {\n\t\t\t\t\t\tparents[j] = context.getParent(j);\n\t\t\t\t\t}\n\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\n\t\t\t\tparents[i] = parent;\n\t\t\t}\n\t\t}\n\n\t\tif (!changed) {\n\t\t\texisting = contextCache.putIfAbsent(context, context);\n\t\t\tvisited.put(context, existing != null ? existing : context);\n\t\t\treturn context;\n\t\t}\n\n\t\t// We know parents.length>0 because context.isEmpty is checked at the beginning of the method.\n\t\tlet updated: PredictionContext;\n\t\tif (parents.length === 1) {\n\t\t\tupdated = new SingletonPredictionContext(parents[0], context.getReturnState(0));\n\t\t} else {\n\t\t\tlet returnStates: number[] = new Array<number>(context.size);\n\t\t\tfor (let i = 0; i < context.size; i++) {\n\t\t\t\treturnStates[i] = context.getReturnState(i);\n\t\t\t}\n\n\t\t\tupdated = new ArrayPredictionContext(parents, returnStates, context.hashCode());\n\t\t}\n\n\t\texisting = contextCache.putIfAbsent(updated, updated);\n\t\tvisited.put(updated, existing || updated);\n\t\tvisited.put(context, existing || updated);\n\n\t\treturn updated;\n\t}\n\n\tpublic appendSingleContext(returnContext: number, contextCache: PredictionContextCache): PredictionContext {\n\t\treturn this.appendContext(PredictionContext.EMPTY_FULL.getChild(returnContext), contextCache);\n\t}\n\n\tpublic abstract appendContext(suffix: PredictionContext, contextCache: PredictionContextCache): PredictionContext;\n\n\tpublic getChild(returnState: number): PredictionContext {\n\t\treturn new SingletonPredictionContext(this, returnState);\n\t}\n\n\tpublic abstract readonly isEmpty: boolean;\n\n\tpublic abstract readonly hasEmpty: boolean;\n\n\t@Override\n\tpublic hashCode(): number {\n\t\treturn this.cachedHashCode;\n\t}\n\n\t// @Override\n\tpublic abstract equals(o: any): boolean;\n\n\tpublic toStrings(recognizer: Recognizer<any, any> | undefined, currentState: number, stop: PredictionContext = PredictionContext.EMPTY_FULL): string[] {\n\t\tlet result: string[] = [];\n\n\t\touter:\n\t\tfor (let perm = 0; ; perm++) {\n\t\t\tlet offset: number = 0;\n\t\t\tlet last: boolean = true;\n\t\t\tlet p: PredictionContext = this;\n\t\t\tlet stateNumber: number = currentState;\n\t\t\tlet localBuffer: string = \"\";\n\t\t\tlocalBuffer += \"[\";\n\t\t\twhile (!p.isEmpty && p !== stop) {\n\t\t\t\tlet index: number = 0;\n\t\t\t\tif (p.size > 0) {\n\t\t\t\t\tlet bits: number = 1;\n\t\t\t\t\twhile (((1 << bits) >>> 0) < p.size) {\n\t\t\t\t\t\tbits++;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet mask: number = ((1 << bits) >>> 0) - 1;\n\t\t\t\t\tindex = (perm >> offset) & mask;\n\t\t\t\t\tlast = last && index >= p.size - 1;\n\t\t\t\t\tif (index >= p.size) {\n\t\t\t\t\t\tcontinue outer;\n\t\t\t\t\t}\n\n\t\t\t\t\toffset += bits;\n\t\t\t\t}\n\n\t\t\t\tif (recognizer) {\n\t\t\t\t\tif (localBuffer.length > 1) {\n\t\t\t\t\t\t// first char is '[', if more than that this isn't the first rule\n\t\t\t\t\t\tlocalBuffer += \" \";\n\t\t\t\t\t}\n\n\t\t\t\t\tlet atn: ATN = recognizer.atn;\n\t\t\t\t\tlet s: ATNState = atn.states[stateNumber];\n\t\t\t\t\tlet ruleName: string = recognizer.ruleNames[s.ruleIndex];\n\t\t\t\t\tlocalBuffer += ruleName;\n\t\t\t\t} else if (p.getReturnState(index) !== PredictionContext.EMPTY_FULL_STATE_KEY) {\n\t\t\t\t\tif (!p.isEmpty) {\n\t\t\t\t\t\tif (localBuffer.length > 1) {\n\t\t\t\t\t\t\t// first char is '[', if more than that this isn't the first rule\n\t\t\t\t\t\t\tlocalBuffer += \" \";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlocalBuffer += p.getReturnState(index);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tstateNumber = p.getReturnState(index);\n\t\t\t\tp = p.getParent(index);\n\t\t\t}\n\n\t\t\tlocalBuffer += \"]\";\n\t\t\tresult.push(localBuffer);\n\n\t\t\tif (last) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nclass EmptyPredictionContext extends PredictionContext {\n\tprivate fullContext: boolean;\n\n\tconstructor(fullContext: boolean) {\n\t\tsuper(PredictionContext.calculateEmptyHashCode());\n\t\tthis.fullContext = fullContext;\n\t}\n\n\tget isFullContext(): boolean {\n\t\treturn this.fullContext;\n\t}\n\n\t@Override\n\tprotected addEmptyContext(): PredictionContext {\n\t\treturn this;\n\t}\n\n\t@Override\n\tprotected removeEmptyContext(): PredictionContext {\n\t\tthrow new Error(\"Cannot remove the empty context from itself.\");\n\t}\n\n\t@Override\n\tpublic getParent(index: number): PredictionContext {\n\t\tthrow new Error(\"index out of bounds\");\n\t}\n\n\t@Override\n\tpublic getReturnState(index: number): number {\n\t\tthrow new Error(\"index out of bounds\");\n\t}\n\n\t@Override\n\tpublic findReturnState(returnState: number): number {\n\t\treturn -1;\n\t}\n\n\t@Override\n\tget size(): number {\n\t\treturn 0;\n\t}\n\n\t@Override\n\tpublic appendSingleContext(returnContext: number, contextCache: PredictionContextCache): PredictionContext {\n\t\treturn contextCache.getChild(this, returnContext);\n\t}\n\n\t@Override\n\tpublic appendContext(suffix: PredictionContext, contextCache: PredictionContextCache): PredictionContext {\n\t\treturn suffix;\n\t}\n\n\t@Override\n\tget isEmpty(): boolean {\n\t\treturn true;\n\t}\n\n\t@Override\n\tget hasEmpty(): boolean {\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic equals(o: any): boolean {\n\t\treturn this === o;\n\t}\n\n\t@Override\n\tpublic toStrings(recognizer: any, currentState: number, stop?: PredictionContext): string[] {\n\t\treturn [\"[]\"];\n\t}\n\n}\n\nclass ArrayPredictionContext extends PredictionContext {\n\t@NotNull\n\tpublic parents: PredictionContext[];\n\n\t@NotNull\n\tpublic returnStates: number[];\n\n\tconstructor( @NotNull parents: PredictionContext[], returnStates: number[], hashCode?: number) {\n\t\tsuper(hashCode || PredictionContext.calculateHashCode(parents, returnStates));\n\t\tassert(parents.length === returnStates.length);\n\t\tassert(returnStates.length > 1 || returnStates[0] !== PredictionContext.EMPTY_FULL_STATE_KEY, \"Should be using PredictionContext.EMPTY instead.\");\n\n\t\tthis.parents = parents;\n\t\tthis.returnStates = returnStates;\n\t}\n\n\t@Override\n\tpublic getParent(index: number): PredictionContext {\n\t\treturn this.parents[index];\n\t}\n\n\t@Override\n\tpublic getReturnState(index: number): number {\n\t\treturn this.returnStates[index];\n\t}\n\n\t@Override\n\tpublic findReturnState(returnState: number): number {\n\t\treturn Arrays.binarySearch(this.returnStates, returnState);\n\t}\n\n\t@Override\n\tget size(): number {\n\t\treturn this.returnStates.length;\n\t}\n\n\t@Override\n\tget isEmpty(): boolean {\n\t\treturn false;\n\t}\n\n\t@Override\n\tget hasEmpty(): boolean {\n\t\treturn this.returnStates[this.returnStates.length - 1] === PredictionContext.EMPTY_FULL_STATE_KEY;\n\t}\n\n\t@Override\n\tprotected addEmptyContext(): PredictionContext {\n\t\tif (this.hasEmpty) {\n\t\t\treturn this;\n\t\t}\n\n\t\tlet parents2: PredictionContext[] = this.parents.slice(0);\n\t\tlet returnStates2: number[] = this.returnStates.slice(0);\n\t\tparents2.push(PredictionContext.EMPTY_FULL);\n\t\treturnStates2.push(PredictionContext.EMPTY_FULL_STATE_KEY);\n\t\treturn new ArrayPredictionContext(parents2, returnStates2);\n\t}\n\n\t@Override\n\tprotected removeEmptyContext(): PredictionContext {\n\t\tif (!this.hasEmpty) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif (this.returnStates.length === 2) {\n\t\t\treturn new SingletonPredictionContext(this.parents[0], this.returnStates[0]);\n\t\t} else {\n\t\t\tlet parents2: PredictionContext[] = this.parents.slice(0, this.parents.length - 1);\n\t\t\tlet returnStates2: number[] = this.returnStates.slice(0, this.returnStates.length - 1);\n\t\t\treturn new ArrayPredictionContext(parents2, returnStates2);\n\t\t}\n\t}\n\n\t@Override\n\tpublic appendContext(suffix: PredictionContext, contextCache: PredictionContextCache): PredictionContext {\n\t\treturn ArrayPredictionContext.appendContextImpl(this, suffix, new PredictionContext.IdentityHashMap());\n\t}\n\n\tprivate static appendContextImpl(context: PredictionContext, suffix: PredictionContext, visited: PredictionContext.IdentityHashMap): PredictionContext {\n\t\tif (suffix.isEmpty) {\n\t\t\tif (PredictionContext.isEmptyLocal(suffix)) {\n\t\t\t\tif (context.hasEmpty) {\n\t\t\t\t\treturn PredictionContext.EMPTY_LOCAL;\n\t\t\t\t}\n\n\t\t\t\tthrow new Error(\"what to do here?\");\n\t\t\t}\n\n\t\t\treturn context;\n\t\t}\n\n\t\tif (suffix.size !== 1) {\n\t\t\tthrow new Error(\"Appending a tree suffix is not yet supported.\");\n\t\t}\n\n\t\tlet result = visited.get(context);\n\t\tif (!result) {\n\t\t\tif (context.isEmpty) {\n\t\t\t\tresult = suffix;\n\t\t\t} else {\n\t\t\t\tlet parentCount: number = context.size;\n\t\t\t\tif (context.hasEmpty) {\n\t\t\t\t\tparentCount--;\n\t\t\t\t}\n\n\t\t\t\tlet updatedParents: PredictionContext[] = new Array<PredictionContext>(parentCount);\n\t\t\t\tlet updatedReturnStates: number[] = new Array<number>(parentCount);\n\t\t\t\tfor (let i = 0; i < parentCount; i++) {\n\t\t\t\t\tupdatedReturnStates[i] = context.getReturnState(i);\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0; i < parentCount; i++) {\n\t\t\t\t\tupdatedParents[i] = ArrayPredictionContext.appendContextImpl(context.getParent(i), suffix, visited);\n\t\t\t\t}\n\n\t\t\t\tif (updatedParents.length === 1) {\n\t\t\t\t\tresult = new SingletonPredictionContext(updatedParents[0], updatedReturnStates[0]);\n\t\t\t\t} else {\n\t\t\t\t\tassert(updatedParents.length > 1);\n\t\t\t\t\tresult = new ArrayPredictionContext(updatedParents, updatedReturnStates);\n\t\t\t\t}\n\n\t\t\t\tif (context.hasEmpty) {\n\t\t\t\t\tresult = PredictionContext.join(result, suffix);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvisited.put(context, result);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic equals(o: any): boolean {\n\t\tif (this === o) {\n\t\t\treturn true;\n\t\t} else if (!(o instanceof ArrayPredictionContext)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.hashCode() !== o.hashCode()) {\n\t\t\t// can't be same if hash is different\n\t\t\treturn false;\n\t\t}\n\n\t\tlet other: ArrayPredictionContext = o;\n\t\treturn this.equalsImpl(other, new Array2DHashSet<PredictionContextCache.IdentityCommutativePredictionContextOperands>());\n\t}\n\n\tprivate equalsImpl(other: ArrayPredictionContext, visited: JavaSet<PredictionContextCache.IdentityCommutativePredictionContextOperands>): boolean {\n\t\tlet selfWorkList: PredictionContext[] = [];\n\t\tlet otherWorkList: PredictionContext[] = [];\n\t\tselfWorkList.push(this);\n\t\totherWorkList.push(other);\n\t\twhile (true) {\n\t\t\tlet currentSelf = selfWorkList.pop();\n\t\t\tlet currentOther = otherWorkList.pop();\n\t\t\tif (!currentSelf || !currentOther) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet operands: PredictionContextCache.IdentityCommutativePredictionContextOperands = new PredictionContextCache.IdentityCommutativePredictionContextOperands(currentSelf, currentOther);\n\t\t\tif (!visited.add(operands)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet selfSize: number = operands.x.size;\n\t\t\tif (selfSize === 0) {\n\t\t\t\tif (!operands.x.equals(operands.y)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet otherSize: number = operands.y.size;\n\t\t\tif (selfSize !== otherSize) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < selfSize; i++) {\n\t\t\t\tif (operands.x.getReturnState(i) !== operands.y.getReturnState(i)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tlet selfParent: PredictionContext = operands.x.getParent(i);\n\t\t\t\tlet otherParent: PredictionContext = operands.y.getParent(i);\n\t\t\t\tif (selfParent.hashCode() !== otherParent.hashCode()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (selfParent !== otherParent) {\n\t\t\t\t\tselfWorkList.push(selfParent);\n\t\t\t\t\totherWorkList.push(otherParent);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\nexport class SingletonPredictionContext extends PredictionContext {\n\n\t@NotNull\n\tpublic parent: PredictionContext;\n\tpublic returnState: number;\n\n\tconstructor(@NotNull parent: PredictionContext, returnState: number) {\n\t\tsuper(PredictionContext.calculateSingleHashCode(parent, returnState));\n\t\t// assert(returnState != PredictionContext.EMPTY_FULL_STATE_KEY && returnState != PredictionContext.EMPTY_LOCAL_STATE_KEY);\n\t\tthis.parent = parent;\n\t\tthis.returnState = returnState;\n\t}\n\n\t@Override\n\tpublic getParent(index: number): PredictionContext {\n\t\t// assert(index == 0);\n\t\treturn this.parent;\n\t}\n\n\t@Override\n\tpublic getReturnState(index: number): number {\n\t\t// assert(index == 0);\n\t\treturn this.returnState;\n\t}\n\n\t@Override\n\tpublic findReturnState(returnState: number): number {\n\t\treturn this.returnState === returnState ? 0 : -1;\n\t}\n\n\t@Override\n\tget size(): number {\n\t\treturn 1;\n\t}\n\n\t@Override\n\tget isEmpty(): boolean {\n\t\treturn false;\n\t}\n\n\t@Override\n\tget hasEmpty(): boolean {\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic appendContext(suffix: PredictionContext, contextCache: PredictionContextCache): PredictionContext {\n\t\treturn contextCache.getChild(this.parent.appendContext(suffix, contextCache), this.returnState);\n\t}\n\n\t@Override\n\tprotected addEmptyContext(): PredictionContext {\n\t\tlet parents: PredictionContext[] = [this.parent, PredictionContext.EMPTY_FULL];\n\t\tlet returnStates: number[] = [this.returnState, PredictionContext.EMPTY_FULL_STATE_KEY];\n\t\treturn new ArrayPredictionContext(parents, returnStates);\n\t}\n\n\t@Override\n\tprotected removeEmptyContext(): PredictionContext {\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic equals(o: any): boolean {\n\t\tif (o === this) {\n\t\t\treturn true;\n\t\t} else if (!(o instanceof SingletonPredictionContext)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet other: SingletonPredictionContext = o;\n\t\tif (this.hashCode() !== other.hashCode()) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.returnState === other.returnState\n\t\t\t&& this.parent.equals(other.parent);\n\t}\n}\n\nexport namespace PredictionContext {\n\texport const EMPTY_LOCAL: PredictionContext = new EmptyPredictionContext(false);\n\texport const EMPTY_FULL: PredictionContext = new EmptyPredictionContext(true);\n\texport const EMPTY_LOCAL_STATE_KEY: number = -((1 << 31) >>> 0);\n\texport const EMPTY_FULL_STATE_KEY: number = ((1 << 31) >>> 0) - 1;\n\n\texport class IdentityHashMap extends Array2DHashMap<PredictionContext, PredictionContext> {\n\t\tconstructor() {\n\t\t\tsuper(IdentityEqualityComparator.INSTANCE);\n\t\t}\n\t}\n\n\texport class IdentityEqualityComparator implements EqualityComparator<PredictionContext> {\n\t\tpublic static readonly INSTANCE: IdentityEqualityComparator = new IdentityEqualityComparator();\n\n\t\tprivate IdentityEqualityComparator() {\n\t\t\t// intentionally empty\n\t\t}\n\n\t\t@Override\n\t\tpublic hashCode(obj: PredictionContext): number {\n\t\t\treturn obj.hashCode();\n\t\t}\n\n\t\t@Override\n\t\tpublic equals(a: PredictionContext, b: PredictionContext): boolean {\n\t\t\treturn a === b;\n\t\t}\n\t}\n}\n"]}