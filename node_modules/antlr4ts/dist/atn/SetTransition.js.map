{"version":3,"file":"SetTransition.js","sourceRoot":"","sources":["../../../src/atn/SetTransition.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;AAKH,qDAAkD;AAClD,8CAA4D;AAC5D,oCAAiC;AACjC,6CAA0C;AAG1C,+CAA+C;AAC/C,IAAa,aAAa,GAA1B,mBAA2B,SAAQ,uBAAU;IAI5C,qDAAqD;IACrD,YAAqB,MAAgB,EAAY,GAAgB;QAChE,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,GAAG,IAAI,IAAI,EAAE;YAChB,GAAG,GAAG,yBAAW,CAAC,EAAE,CAAC,aAAK,CAAC,YAAY,CAAC,CAAC;SACzC;QAED,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IAChB,CAAC;IAGD,IAAI,iBAAiB;QACpB,mBAA0B;IAC3B,CAAC;IAID,IAAI,KAAK;QACR,OAAO,IAAI,CAAC,GAAG,CAAC;IACjB,CAAC;IAGM,OAAO,CAAC,MAAc,EAAE,cAAsB,EAAE,cAAsB;QAC5E,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAIM,QAAQ;QACd,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;IAC5B,CAAC;CACD,CAAA;AAjCA;IADC,oBAAO;0CACgB;AAaxB;IADC,qBAAQ;sDAGR;AAID;IAFC,qBAAQ;IACR,oBAAO;0CAGP;AAGD;IADC,qBAAQ;4CAGR;AAID;IAFC,qBAAQ;IACR,oBAAO;6CAGP;AAlCW,aAAa;IAKZ,WAAA,oBAAO,CAAA,EAAoB,WAAA,qBAAQ,CAAA;GALpC,aAAa,CAmCzB;AAnCY,sCAAa","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:37.3060135-07:00\n\nimport { ATNState } from \"./ATNState\";\nimport { IntervalSet } from \"../misc/IntervalSet\";\nimport { Override, NotNull, Nullable } from \"../Decorators\";\nimport { Token } from \"../Token\";\nimport { Transition } from \"./Transition\";\nimport { TransitionType } from \"./TransitionType\";\n\n/** A transition containing a set of values. */\nexport class SetTransition extends Transition {\n\t@NotNull\n\tpublic set: IntervalSet;\n\n\t// TODO (sam): should we really allow undefined here?\n\tconstructor(@NotNull target: ATNState, @Nullable set: IntervalSet) {\n\t\tsuper(target);\n\t\tif (set == null) {\n\t\t\tset = IntervalSet.of(Token.INVALID_TYPE);\n\t\t}\n\n\t\tthis.set = set;\n\t}\n\n\t@Override\n\tget serializationType(): TransitionType {\n\t\treturn TransitionType.SET;\n\t}\n\n\t@Override\n\t@NotNull\n\tget label(): IntervalSet {\n\t\treturn this.set;\n\t}\n\n\t@Override\n\tpublic matches(symbol: number, minVocabSymbol: number, maxVocabSymbol: number): boolean {\n\t\treturn this.set.contains(symbol);\n\t}\n\n\t@Override\n\t@NotNull\n\tpublic toString(): string {\n\t\treturn this.set.toString();\n\t}\n}\n"]}