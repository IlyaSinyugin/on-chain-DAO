{"version":3,"file":"ATNState.js","sourceRoot":"","sources":["../../../src/atn/ATNState.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:27.4734328-07:00\n\nimport { ATN } from \"./ATN\";\nimport { ATNStateType } from \"./ATNStateType\";\nimport { IntervalSet } from \"../misc/IntervalSet\";\nimport { Override } from \"../Decorators\";\nimport { Transition } from \"./Transition\";\n\nconst INITIAL_NUM_TRANSITIONS: number = 4;\n\n/**\n * The following images show the relation of states and\n * {@link ATNState#transitions} for various grammar constructs.\n *\n * * Solid edges marked with an &#0949; indicate a required\n *   {@link EpsilonTransition}.\n *\n * * Dashed edges indicate locations where any transition derived from\n *   {@link Transition} might appear.\n *\n * * Dashed nodes are place holders for either a sequence of linked\n *   {@link BasicState} states or the inclusion of a block representing a nested\n *   construct in one of the forms below.\n *\n * * Nodes showing multiple outgoing alternatives with a `...` support\n *   any number of alternatives (one or more). Nodes without the `...` only\n *   support the exact number of alternatives shown in the diagram.\n *\n * <h2>Basic Blocks</h2>\n *\n * <h3>Rule</h3>\n *\n * <embed src=\"images/Rule.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Block of 1 or more alternatives</h3>\n *\n * <embed src=\"images/Block.svg\" type=\"image/svg+xml\"/>\n *\n * <h2>Greedy Loops</h2>\n *\n * <h3>Greedy Closure: `(...)*`</h3>\n *\n * <embed src=\"images/ClosureGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Greedy Positive Closure: `(...)+`</h3>\n *\n * <embed src=\"images/PositiveClosureGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Greedy Optional: `(...)?`</h3>\n *\n * <embed src=\"images/OptionalGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h2>Non-Greedy Loops</h2>\n *\n * <h3>Non-Greedy Closure: `(...)*?`</h3>\n *\n * <embed src=\"images/ClosureNonGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Non-Greedy Positive Closure: `(...)+?`</h3>\n *\n * <embed src=\"images/PositiveClosureNonGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Non-Greedy Optional: `(...)??`</h3>\n *\n * <embed src=\"images/OptionalNonGreedy.svg\" type=\"image/svg+xml\"/>\n */\nexport abstract class ATNState {\n\n\t/** Which ATN are we in? */\n\tpublic atn?: ATN;\n\n\tpublic stateNumber: number = ATNState.INVALID_STATE_NUMBER;\n\n\tpublic ruleIndex: number = 0;  // at runtime, we don't have Rule objects\n\n\tpublic epsilonOnlyTransitions: boolean = false;\n\n\t/** Track the transitions emanating from this ATN state. */\n\tprotected transitions: Transition[] = [];\n\n\tprotected optimizedTransitions: Transition[] = this.transitions;\n\n\t/** Used to cache lookahead during parsing, not used during construction */\n\tpublic nextTokenWithinRule?: IntervalSet;\n\n\t/**\n\t * Gets the state number.\n\t *\n\t * @returns the state number\n\t */\n\tpublic getStateNumber(): number {\n\t\treturn this.stateNumber;\n\t}\n\n\t/**\n\t * For all states except {@link RuleStopState}, this returns the state\n\t * number. Returns -1 for stop states.\n\t *\n\t * @returns -1 for {@link RuleStopState}, otherwise the state number\n\t */\n\tget nonStopStateNumber(): number {\n\t\treturn this.getStateNumber();\n\t}\n\n\t@Override\n\tpublic hashCode(): number {\n\t\treturn this.stateNumber;\n\t}\n\n\t@Override\n\tpublic equals(o: any): boolean {\n\t\t// are these states same object?\n\t\tif (o instanceof ATNState) {\n\t\t\treturn this.stateNumber === o.stateNumber;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tget isNonGreedyExitState(): boolean {\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic toString(): string {\n\t\treturn String(this.stateNumber);\n\t}\n\n\tpublic getTransitions(): Transition[] {\n\t\treturn this.transitions.slice(0);\n\t}\n\n\tget numberOfTransitions(): number {\n\t\treturn this.transitions.length;\n\t}\n\n\tpublic addTransition(e: Transition, index?: number): void {\n\t\tif (this.transitions.length === 0) {\n\t\t\tthis.epsilonOnlyTransitions = e.isEpsilon;\n\t\t}\n\t\telse if (this.epsilonOnlyTransitions !== e.isEpsilon) {\n\t\t\tthis.epsilonOnlyTransitions = false;\n\t\t\tthrow new Error(\"ATN state \" + this.stateNumber + \" has both epsilon and non-epsilon transitions.\");\n\t\t}\n\n\t\tthis.transitions.splice(index !== undefined ? index : this.transitions.length, 0, e);\n\t}\n\n\tpublic transition(i: number): Transition {\n\t\treturn this.transitions[i];\n\t}\n\n\tpublic setTransition(i: number, e: Transition): void {\n\t\tthis.transitions[i] = e;\n\t}\n\n\tpublic removeTransition(index: number): Transition {\n\t\treturn this.transitions.splice(index, 1)[0];\n\t}\n\n\tpublic abstract readonly stateType: ATNStateType;\n\n\tget onlyHasEpsilonTransitions(): boolean {\n\t\treturn this.epsilonOnlyTransitions;\n\t}\n\n\tpublic setRuleIndex(ruleIndex: number): void {\n\t\tthis.ruleIndex = ruleIndex;\n\t}\n\n\tget isOptimized(): boolean {\n\t\treturn this.optimizedTransitions !== this.transitions;\n\t}\n\n\tget numberOfOptimizedTransitions(): number {\n\t\treturn this.optimizedTransitions.length;\n\t}\n\n\tpublic getOptimizedTransition(i: number): Transition {\n\t\treturn this.optimizedTransitions[i];\n\t}\n\n\tpublic addOptimizedTransition(e: Transition): void {\n\t\tif (!this.isOptimized) {\n\t\t\tthis.optimizedTransitions = new Array<Transition>();\n\t\t}\n\n\t\tthis.optimizedTransitions.push(e);\n\t}\n\n\tpublic setOptimizedTransition(i: number, e: Transition): void {\n\t\tif (!this.isOptimized) {\n\t\t\tthrow new Error(\"This ATNState is not optimized.\");\n\t\t}\n\n\t\tthis.optimizedTransitions[i] = e;\n\t}\n\n\tpublic removeOptimizedTransition(i: number): void {\n\t\tif (!this.isOptimized) {\n\t\t\tthrow new Error(\"This ATNState is not optimized.\");\n\t\t}\n\n\t\tthis.optimizedTransitions.splice(i, 1);\n\t}\n}\n\nexport namespace ATNState {\n\texport const INVALID_STATE_NUMBER: number = -1;\n}\n"]}