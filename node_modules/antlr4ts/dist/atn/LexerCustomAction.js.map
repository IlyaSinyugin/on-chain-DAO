{"version":3,"file":"LexerCustomAction.js","sourceRoot":"","sources":["../../../src/atn/LexerCustomAction.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;AAOH,mDAAgD;AAChD,8CAAkD;AAElD;;;;;;;;;;;;GAYG;AACH;IAIC;;;;;;;;OAQG;IACH,YAAY,SAAiB,EAAE,WAAmB;QACjD,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACjC,CAAC;IAED;;;;OAIG;IACH,IAAI,SAAS;QACZ,OAAO,IAAI,CAAC,UAAU,CAAC;IACxB,CAAC;IAED;;;;OAIG;IACH,IAAI,WAAW;QACd,OAAO,IAAI,CAAC,YAAY,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IAEH,IAAI,UAAU;QACb,sBAA8B;IAC/B,CAAC;IAED;;;;;;;;;;OAUG;IAEH,IAAI,mBAAmB;QACtB,OAAO,IAAI,CAAC;IACb,CAAC;IAED;;;;;OAKG;IAEI,OAAO,CAAU,KAAY;QACnC,KAAK,CAAC,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAC7D,CAAC;IAGM,QAAQ;QACd,IAAI,IAAI,GAAW,uBAAU,CAAC,UAAU,EAAE,CAAC;QAC3C,IAAI,GAAG,uBAAU,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAChD,IAAI,GAAG,uBAAU,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAChD,IAAI,GAAG,uBAAU,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAClD,OAAO,uBAAU,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IACnC,CAAC;IAGM,MAAM,CAAC,GAAQ;QACrB,IAAI,GAAG,KAAK,IAAI,EAAE;YACjB,OAAO,IAAI,CAAC;SACZ;aAAM,IAAI,CAAC,CAAC,GAAG,YAAY,iBAAiB,CAAC,EAAE;YAC/C,OAAO,KAAK,CAAC;SACb;QAED,OAAO,IAAI,CAAC,UAAU,KAAK,GAAG,CAAC,UAAU;eACrC,IAAI,CAAC,YAAY,KAAK,GAAG,CAAC,YAAY,CAAC;IAC5C,CAAC;CACD;AAnDA;IADC,qBAAQ;mDAGR;AAcD;IADC,qBAAQ;4DAGR;AASD;IADC,qBAAQ;IACO,WAAA,oBAAO,CAAA;gDAEtB;AAGD;IADC,qBAAQ;iDAOR;AAGD;IADC,qBAAQ;+CAUR;AA5FF,8CA6FC","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:29.6567992-07:00\n\nimport { Lexer } from \"../Lexer\";\nimport { LexerAction } from \"./LexerAction\";\nimport { LexerActionType } from \"./LexerActionType\";\nimport { MurmurHash } from \"../misc/MurmurHash\";\nimport { NotNull, Override } from \"../Decorators\";\n\n/**\n * Executes a custom lexer action by calling {@link Recognizer#action} with the\n * rule and action indexes assigned to the custom action. The implementation of\n * a custom action is added to the generated code for the lexer in an override\n * of {@link Recognizer#action} when the grammar is compiled.\n *\n * This class may represent embedded actions created with the `{...}`\n * syntax in ANTLR 4, as well as actions created for lexer commands where the\n * command argument could not be evaluated when the grammar was compiled.\n *\n * @author Sam Harwell\n * @since 4.2\n */\nexport class LexerCustomAction implements LexerAction {\n\tprivate readonly _ruleIndex: number;\n\tprivate readonly _actionIndex: number;\n\n\t/**\n\t * Constructs a custom lexer action with the specified rule and action\n\t * indexes.\n\t *\n\t * @param ruleIndex The rule index to use for calls to\n\t * {@link Recognizer#action}.\n\t * @param actionIndex The action index to use for calls to\n\t * {@link Recognizer#action}.\n\t */\n\tconstructor(ruleIndex: number, actionIndex: number) {\n\t\tthis._ruleIndex = ruleIndex;\n\t\tthis._actionIndex = actionIndex;\n\t}\n\n\t/**\n\t * Gets the rule index to use for calls to {@link Recognizer#action}.\n\t *\n\t * @returns The rule index for the custom action.\n\t */\n\tget ruleIndex(): number {\n\t\treturn this._ruleIndex;\n\t}\n\n\t/**\n\t * Gets the action index to use for calls to {@link Recognizer#action}.\n\t *\n\t * @returns The action index for the custom action.\n\t */\n\tget actionIndex(): number {\n\t\treturn this._actionIndex;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * @returns This method returns {@link LexerActionType#CUSTOM}.\n\t */\n\t@Override\n\tget actionType(): LexerActionType {\n\t\treturn LexerActionType.CUSTOM;\n\t}\n\n\t/**\n\t * Gets whether the lexer action is position-dependent. Position-dependent\n\t * actions may have different semantics depending on the {@link CharStream}\n\t * index at the time the action is executed.\n\t *\n\t * Custom actions are position-dependent since they may represent a\n\t * user-defined embedded action which makes calls to methods like\n\t * {@link Lexer#getText}.\n\t *\n\t * @returns This method returns `true`.\n\t */\n\t@Override\n\tget isPositionDependent(): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * Custom actions are implemented by calling {@link Lexer#action} with the\n\t * appropriate rule and action indexes.\n\t */\n\t@Override\n\tpublic execute(@NotNull lexer: Lexer): void {\n\t\tlexer.action(undefined, this._ruleIndex, this._actionIndex);\n\t}\n\n\t@Override\n\tpublic hashCode(): number {\n\t\tlet hash: number = MurmurHash.initialize();\n\t\thash = MurmurHash.update(hash, this.actionType);\n\t\thash = MurmurHash.update(hash, this._ruleIndex);\n\t\thash = MurmurHash.update(hash, this._actionIndex);\n\t\treturn MurmurHash.finish(hash, 3);\n\t}\n\n\t@Override\n\tpublic equals(obj: any): boolean {\n\t\tif (obj === this) {\n\t\t\treturn true;\n\t\t} else if (!(obj instanceof LexerCustomAction)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this._ruleIndex === obj._ruleIndex\n\t\t\t&& this._actionIndex === obj._actionIndex;\n\t}\n}\n"]}