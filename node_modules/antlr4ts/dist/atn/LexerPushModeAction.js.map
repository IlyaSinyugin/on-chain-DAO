{"version":3,"file":"LexerPushModeAction.js","sourceRoot":"","sources":["../../../src/atn/LexerPushModeAction.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;AAOH,mDAAgD;AAChD,8CAAkD;AAElD;;;;;;GAMG;AACH;IAGC;;;OAGG;IACH,YAAY,IAAY;QACvB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACH,IAAI,IAAI;QACP,OAAO,IAAI,CAAC,KAAK,CAAC;IACnB,CAAC;IAED;;;OAGG;IAEH,IAAI,UAAU;QACb,yBAAiC;IAClC,CAAC;IAED;;;OAGG;IAEH,IAAI,mBAAmB;QACtB,OAAO,KAAK,CAAC;IACd,CAAC;IAED;;;;;OAKG;IAEI,OAAO,CAAU,KAAY;QACnC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAGM,QAAQ;QACd,IAAI,IAAI,GAAW,uBAAU,CAAC,UAAU,EAAE,CAAC;QAC3C,IAAI,GAAG,uBAAU,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAChD,IAAI,GAAG,uBAAU,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3C,OAAO,uBAAU,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IACnC,CAAC;IAGM,MAAM,CAAC,GAAQ;QACrB,IAAI,GAAG,KAAK,IAAI,EAAE;YACjB,OAAO,IAAI,CAAC;SACZ;aAAM,IAAI,CAAC,CAAC,GAAG,YAAY,mBAAmB,CAAC,EAAE;YACjD,OAAO,KAAK,CAAC;SACb;QAED,OAAO,IAAI,CAAC,KAAK,KAAK,GAAG,CAAC,KAAK,CAAC;IACjC,CAAC;IAGM,QAAQ;QACd,OAAO,YAAY,IAAI,CAAC,KAAK,GAAG,CAAC;IAClC,CAAC;CACD;AA/CA;IADC,qBAAQ;qDAGR;AAOD;IADC,qBAAQ;8DAGR;AASD;IADC,qBAAQ;IACO,WAAA,oBAAO,CAAA;kDAEtB;AAGD;IADC,qBAAQ;mDAMR;AAGD;IADC,qBAAQ;iDASR;AAGD;IADC,qBAAQ;mDAGR;AAvEF,kDAwEC","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:30.1378801-07:00\n\nimport { Lexer } from \"../Lexer\";\nimport { LexerAction } from \"./LexerAction\";\nimport { LexerActionType } from \"./LexerActionType\";\nimport { MurmurHash } from \"../misc/MurmurHash\";\nimport { NotNull, Override } from \"../Decorators\";\n\n/**\n * Implements the `pushMode` lexer action by calling\n * {@link Lexer#pushMode} with the assigned mode.\n *\n * @author Sam Harwell\n * @since 4.2\n */\nexport class LexerPushModeAction implements LexerAction {\n\tprivate readonly _mode: number;\n\n\t/**\n\t * Constructs a new `pushMode` action with the specified mode value.\n\t * @param mode The mode value to pass to {@link Lexer#pushMode}.\n\t */\n\tconstructor(mode: number) {\n\t\tthis._mode = mode;\n\t}\n\n\t/**\n\t * Get the lexer mode this action should transition the lexer to.\n\t *\n\t * @returns The lexer mode for this `pushMode` command.\n\t */\n\tget mode(): number {\n\t\treturn this._mode;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @returns This method returns {@link LexerActionType#PUSH_MODE}.\n\t */\n\t@Override\n\tget actionType(): LexerActionType {\n\t\treturn LexerActionType.PUSH_MODE;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @returns This method returns `false`.\n\t */\n\t@Override\n\tget isPositionDependent(): boolean {\n\t\treturn false;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * This action is implemented by calling {@link Lexer#pushMode} with the\n\t * value provided by {@link #getMode}.\n\t */\n\t@Override\n\tpublic execute(@NotNull lexer: Lexer): void {\n\t\tlexer.pushMode(this._mode);\n\t}\n\n\t@Override\n\tpublic hashCode(): number {\n\t\tlet hash: number = MurmurHash.initialize();\n\t\thash = MurmurHash.update(hash, this.actionType);\n\t\thash = MurmurHash.update(hash, this._mode);\n\t\treturn MurmurHash.finish(hash, 2);\n\t}\n\n\t@Override\n\tpublic equals(obj: any): boolean {\n\t\tif (obj === this) {\n\t\t\treturn true;\n\t\t} else if (!(obj instanceof LexerPushModeAction)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this._mode === obj._mode;\n\t}\n\n\t@Override\n\tpublic toString(): string {\n\t\treturn `pushMode(${this._mode})`;\n\t}\n}\n"]}