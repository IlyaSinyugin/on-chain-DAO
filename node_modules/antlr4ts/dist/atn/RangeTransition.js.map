{"version":3,"file":"RangeTransition.js","sourceRoot":"","sources":["../../../src/atn/RangeTransition.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;AAKH,qDAAkD;AAClD,8CAAkD;AAClD,6CAA0C;AAG1C,IAAa,eAAe,GAA5B,qBAA6B,SAAQ,uBAAU;IAI9C,YAAqB,MAAgB,EAAE,IAAY,EAAE,EAAU;QAC9D,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;IACd,CAAC;IAGD,IAAI,iBAAiB;QACpB,qBAA4B;IAC7B,CAAC;IAID,IAAI,KAAK;QACR,OAAO,yBAAW,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;IAC3C,CAAC;IAGM,OAAO,CAAC,MAAc,EAAE,cAAsB,EAAE,cAAsB;QAC5E,OAAO,MAAM,IAAI,IAAI,CAAC,IAAI,IAAI,MAAM,IAAI,IAAI,CAAC,EAAE,CAAC;IACjD,CAAC;IAIM,QAAQ;QACd,OAAO,GAAG,GAAG,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,GAAG,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC;IAC7F,CAAC;CACD,CAAA;AApBA;IADC,qBAAQ;wDAGR;AAID;IAFC,qBAAQ;IACR,oBAAO;4CAGP;AAGD;IADC,qBAAQ;8CAGR;AAID;IAFC,qBAAQ;IACR,oBAAO;+CAGP;AA9BW,eAAe;IAId,WAAA,oBAAO,CAAA;GAJR,eAAe,CA+B3B;AA/BY,0CAAe","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:36.5959980-07:00\n\nimport { ATNState } from \"./ATNState\";\nimport { IntervalSet } from \"../misc/IntervalSet\";\nimport { Override, NotNull } from \"../Decorators\";\nimport { Transition } from \"./Transition\";\nimport { TransitionType } from \"./TransitionType\";\n\nexport class RangeTransition extends Transition {\n\tpublic from: number;\n\tpublic to: number;\n\n\tconstructor(@NotNull target: ATNState, from: number, to: number) {\n\t\tsuper(target);\n\t\tthis.from = from;\n\t\tthis.to = to;\n\t}\n\n\t@Override\n\tget serializationType(): TransitionType {\n\t\treturn TransitionType.RANGE;\n\t}\n\n\t@Override\n\t@NotNull\n\tget label(): IntervalSet {\n\t\treturn IntervalSet.of(this.from, this.to);\n\t}\n\n\t@Override\n\tpublic matches(symbol: number, minVocabSymbol: number, maxVocabSymbol: number): boolean {\n\t\treturn symbol >= this.from && symbol <= this.to;\n\t}\n\n\t@Override\n\t@NotNull\n\tpublic toString(): string {\n\t\treturn \"'\" + String.fromCodePoint(this.from) + \"'..'\" + String.fromCodePoint(this.to) + \"'\";\n\t}\n}\n"]}