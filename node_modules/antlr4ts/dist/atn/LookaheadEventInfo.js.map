{"version":3,"file":"LookaheadEventInfo.js","sourceRoot":"","sources":["../../../src/atn/LookaheadEventInfo.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;AAEH,wDAAwD;AAExD,2DAAwD;AACxD,8CAAwC;AAIxC;;;;;GAKG;AACH,IAAa,kBAAkB,GAA/B,wBAAgC,SAAQ,qCAAiB;IAQxD;;;;;;;;;;;;;;OAcG;IACH,YACC,QAAgB,EAChB,KAAiC,EACjC,YAAoB,EACX,KAAkB,EAC3B,UAAkB,EAClB,SAAiB,EACjB,OAAgB;QAEhB,KAAK,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;QAC9D,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IAClC,CAAC;CACD,CAAA;AAnCY,kBAAkB;IA2B5B,WAAA,oBAAO,CAAA;GA3BG,kBAAkB,CAmC9B;AAnCY,gDAAkB","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:30.6852565-07:00\n\nimport { DecisionEventInfo } from \"./DecisionEventInfo\";\nimport { NotNull } from \"../Decorators\";\nimport { SimulatorState } from \"./SimulatorState\";\nimport { TokenStream } from \"../TokenStream\";\n\n/**\n * This class represents profiling event information for tracking the lookahead\n * depth required in order to make a prediction.\n *\n * @since 4.3\n */\nexport class LookaheadEventInfo extends DecisionEventInfo {\n\t/** The alternative chosen by adaptivePredict(), not necessarily\n\t *  the outermost alt shown for a rule; left-recursive rules have\n\t *  user-level alts that differ from the rewritten rule with a (...) block\n\t *  and a (..)* loop.\n\t */\n\tpublic predictedAlt: number;\n\n\t/**\n\t * Constructs a new instance of the {@link LookaheadEventInfo} class with\n\t * the specified detailed lookahead information.\n\t *\n\t * @param decision The decision number\n\t * @param state The final simulator state containing the necessary\n\t * information to determine the result of a prediction, or `undefined` if\n\t * the final state is not available\n\t * @param input The input token stream\n\t * @param startIndex The start index for the current prediction\n\t * @param stopIndex The index at which the prediction was finally made\n\t * @param fullCtx `true` if the current lookahead is part of an LL\n\t * prediction; otherwise, `false` if the current lookahead is part of\n\t * an SLL prediction\n\t */\n\tconstructor(\n\t\tdecision: number,\n\t\tstate: SimulatorState | undefined,\n\t\tpredictedAlt: number,\n\t\t@NotNull input: TokenStream,\n\t\tstartIndex: number,\n\t\tstopIndex: number,\n\t\tfullCtx: boolean) {\n\n\t\tsuper(decision, state, input, startIndex, stopIndex, fullCtx);\n\t\tthis.predictedAlt = predictedAlt;\n\t}\n}\n"]}