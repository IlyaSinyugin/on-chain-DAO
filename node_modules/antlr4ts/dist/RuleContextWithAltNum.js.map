{"version":3,"file":"RuleContextWithAltNum.js","sourceRoot":"","sources":["../../src/RuleContextWithAltNum.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;AAEH,wDAAwD;AAExD,mCAAgC;AAChC,6CAAwC;AACxC,2DAAwD;AAExD;;;;;;;;;GASG;AACH,2BAAmC,SAAQ,qCAAiB;IAK3D,YAAY,MAA0B,EAAE,mBAA4B;QACnE,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACtC,KAAK,CAAC,MAAM,EAAE,mBAAmB,CAAC,CAAC;SACnC;aAAM;YACN,KAAK,EAAE,CAAC;SACR;QAED,IAAI,CAAC,UAAU,GAAG,SAAG,CAAC,kBAAkB,CAAC;IAC1C,CAAC;IAGD,IAAI,SAAS;QACZ,OAAO,IAAI,CAAC,UAAU,CAAC;IACxB,CAAC;IAED,YAAY;IACZ,IAAI,SAAS,CAAC,MAAc;QAC3B,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;IAC1B,CAAC;CACD;AARA;IADC,qBAAQ;sDAGR;AAlBF,sDAwBC","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:57.4741196-07:00\n\nimport { ATN } from \"./atn/ATN\";\nimport { Override } from \"./Decorators\";\nimport { ParserRuleContext } from \"./ParserRuleContext\";\n\n/** A handy class for use with\n *\n *  options {contextSuperClass=org.antlr.v4.runtime.RuleContextWithAltNum;}\n *\n *  that provides a backing field / impl for the outer alternative number\n *  matched for an internal parse tree node.\n *\n *  I'm only putting into Java runtime as I'm certain I'm the only one that\n *  will really every use this.\n */\nexport class RuleContextWithAltNum extends ParserRuleContext {\n\tprivate _altNumber: number;\n\n\tconstructor();\n\tconstructor(parent: ParserRuleContext | undefined, invokingStateNumber: number);\n\tconstructor(parent?: ParserRuleContext, invokingStateNumber?: number) {\n\t\tif (invokingStateNumber !== undefined) {\n\t\t\tsuper(parent, invokingStateNumber);\n\t\t} else {\n\t\t\tsuper();\n\t\t}\n\n\t\tthis._altNumber = ATN.INVALID_ALT_NUMBER;\n\t}\n\n\t@Override\n\tget altNumber(): number {\n\t\treturn this._altNumber;\n\t}\n\n\t// @Override\n\tset altNumber(altNum: number) {\n\t\tthis._altNumber = altNum;\n\t}\n}\n"]}