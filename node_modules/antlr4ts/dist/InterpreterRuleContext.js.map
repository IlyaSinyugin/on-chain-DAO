{"version":3,"file":"InterpreterRuleContext.js","sourceRoot":"","sources":["../../src/InterpreterRuleContext.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;AAEH,wDAAwD;AAExD,6CAAwC;AACxC,2DAAwD;AAExD;;;;;;;;;;GAUG;AACH,4BAAoC,SAAQ,qCAAiB;IAkB5D,YAAY,SAAiB,EAAE,MAA0B,EAAE,mBAA4B;QACtF,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACtC,KAAK,CAAC,MAAM,EAAE,mBAAmB,CAAC,CAAC;SACnC;aAAM;YACN,KAAK,EAAE,CAAC;SACR;QAED,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAC7B,CAAC;IAGD,IAAI,SAAS;QACZ,OAAO,IAAI,CAAC,UAAU,CAAC;IACxB,CAAC;CACD;AAHA;IADC,qBAAQ;uDAGR;AA/BF,wDAgCC","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:51.5898546-07:00\n\nimport { Override } from \"./Decorators\";\nimport { ParserRuleContext } from \"./ParserRuleContext\";\n\n/**\n * This class extends {@link ParserRuleContext} by allowing the value of\n * {@link #getRuleIndex} to be explicitly set for the context.\n *\n * {@link ParserRuleContext} does not include field storage for the rule index\n * since the context classes created by the code generator override the\n * {@link #getRuleIndex} method to return the correct value for that context.\n * Since the parser interpreter does not use the context classes generated for a\n * parser, this class (with slightly more memory overhead per node) is used to\n * provide equivalent functionality.\n */\nexport class InterpreterRuleContext extends ParserRuleContext {\n\t/**\n\t * This is the backing field for {@link #getRuleIndex}.\n\t */\n\tprivate _ruleIndex: number;\n\n\tconstructor(ruleIndex: number);\n\n\t/**\n\t * Constructs a new {@link InterpreterRuleContext} with the specified\n\t * parent, invoking state, and rule index.\n\t *\n\t * @param ruleIndex The rule index for the current context.\n\t * @param parent The parent context.\n\t * @param invokingStateNumber The invoking state number.\n\t */\n\tconstructor(ruleIndex: number, parent: ParserRuleContext | undefined, invokingStateNumber: number);\n\n\tconstructor(ruleIndex: number, parent?: ParserRuleContext, invokingStateNumber?: number) {\n\t\tif (invokingStateNumber !== undefined) {\n\t\t\tsuper(parent, invokingStateNumber);\n\t\t} else {\n\t\t\tsuper();\n\t\t}\n\n\t\tthis._ruleIndex = ruleIndex;\n\t}\n\n\t@Override\n\tget ruleIndex(): number {\n\t\treturn this._ruleIndex;\n\t}\n}\n"]}