{"version":3,"file":"CommonTokenStream.js","sourceRoot":"","sources":["../../src/CommonTokenStream.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;AAEH,wDAAwD;AAExD,+DAA4D;AAC5D,6CAAiD;AACjD,mCAAgC;AAGhC;;;;;;;;;;;;;;;;;;;GAmBG;AACH,IAAa,iBAAiB,GAA9B,uBAA+B,SAAQ,yCAAmB;IASzD;;;;;;;;;OASG;IACH,YAAqB,WAAwB,EAAE,UAAkB,aAAK,CAAC,eAAe;QACrF,KAAK,CAAC,WAAW,CAAC,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACxB,CAAC;IAGS,eAAe,CAAC,CAAS;QAClC,OAAO,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACjD,CAAC;IAGS,KAAK,CAAC,CAAS;QACxB,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE;YACrB,OAAO,SAAS,CAAC;SACjB;QAED,IAAI,CAAC,GAAW,IAAI,CAAC,CAAC,CAAC;QACvB,IAAI,CAAC,GAAW,CAAC,CAAC;QAClB,uCAAuC;QACvC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YACvB,0BAA0B;YAC1B,CAAC,GAAG,IAAI,CAAC,sBAAsB,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YACrD,CAAC,EAAE,CAAC;SACJ;QAED,IAAI,CAAC,GAAG,CAAC,EAAE;YACV,OAAO,SAAS,CAAC;SACjB;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC;IAGM,KAAK,CAAC,CAAS;QACrB,wCAAwC;QACxC,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,KAAK,CAAC,EAAE;YACZ,MAAM,IAAI,UAAU,CAAC,kCAAkC,CAAC,CAAC;SACzD;QAED,IAAI,CAAC,GAAG,CAAC,EAAE;YACV,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SACtB;QAED,IAAI,CAAC,GAAW,IAAI,CAAC,CAAC,CAAC;QACvB,IAAI,CAAC,GAAW,CAAC,CAAC,CAAC,kCAAkC;QACrD,qBAAqB;QACrB,OAAO,CAAC,GAAG,CAAC,EAAE;YACb,8DAA8D;YAC9D,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;gBACrB,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;aACjD;YACD,CAAC,EAAE,CAAC;SACJ;QAED,6BAA6B;QAC7B,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC;IAED,2BAA2B;IACpB,0BAA0B;QAChC,IAAI,CAAC,GAAW,CAAC,CAAC;QAClB,IAAI,CAAC,IAAI,EAAE,CAAC;QACZ,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE;YAC1B,IAAI,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,EAAE;gBAC/B,CAAC,EAAE,CAAC;aACJ;YAED,IAAI,CAAC,CAAC,IAAI,KAAK,aAAK,CAAC,GAAG,EAAE;gBACzB,MAAM;aACN;SACD;QAED,OAAO,CAAC,CAAC;IACV,CAAC;CACD,CAAA;AArEA;IADC,qBAAQ;wDAGR;AAGD;IADC,qBAAQ;8CAoBR;AAGD;IADC,qBAAQ;8CAyBR;AA5EW,iBAAiB;IAmBhB,WAAA,oBAAO,CAAA;GAnBR,iBAAiB,CA8F7B;AA9FY,8CAAiB","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:50.3953157-07:00\n\nimport { BufferedTokenStream } from \"./BufferedTokenStream\";\nimport { NotNull, Override } from \"./Decorators\";\nimport { Token } from \"./Token\";\nimport { TokenSource } from \"./TokenSource\";\n\n/**\n * This class extends {@link BufferedTokenStream} with functionality to filter\n * token streams to tokens on a particular channel (tokens where\n * {@link Token#getChannel} returns a particular value).\n *\n * This token stream provides access to all tokens by index or when calling\n * methods like {@link #getText}. The channel filtering is only used for code\n * accessing tokens via the lookahead methods {@link #LA}, {@link #LT}, and\n * {@link #LB}.\n *\n * By default, tokens are placed on the default channel\n * ({@link Token#DEFAULT_CHANNEL}), but may be reassigned by using the\n * `->channel(HIDDEN)` lexer command, or by using an embedded action to\n * call {@link Lexer#setChannel}.\n *\n * Note: lexer rules which use the `->skip` lexer command or call\n * {@link Lexer#skip} do not produce tokens at all, so input text matched by\n * such a rule will not be available as part of the token stream, regardless of\n * channel.\n */\nexport class CommonTokenStream extends BufferedTokenStream {\n\t/**\n\t * Specifies the channel to use for filtering tokens.\n\t *\n\t * The default value is {@link Token#DEFAULT_CHANNEL}, which matches the\n\t * default channel assigned to tokens created by the lexer.\n\t */\n\tprotected channel: number;\n\n\t/**\n\t * Constructs a new {@link CommonTokenStream} using the specified token\n\t * source and filtering tokens to the specified channel. Only tokens whose\n\t * {@link Token#getChannel} matches `channel` or have the\n\t * `Token.type` equal to {@link Token#EOF} will be returned by the\n\t * token stream lookahead methods.\n\t *\n\t * @param tokenSource The token source.\n\t * @param channel The channel to use for filtering tokens.\n\t */\n\tconstructor(@NotNull tokenSource: TokenSource, channel: number = Token.DEFAULT_CHANNEL) {\n\t\tsuper(tokenSource);\n\t\tthis.channel = channel;\n\t}\n\n\t@Override\n\tprotected adjustSeekIndex(i: number): number {\n\t\treturn this.nextTokenOnChannel(i, this.channel);\n\t}\n\n\t@Override\n\tprotected tryLB(k: number): Token | undefined {\n\t\tif ((this.p - k) < 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet i: number = this.p;\n\t\tlet n: number = 1;\n\t\t// find k good tokens looking backwards\n\t\twhile (n <= k && i > 0) {\n\t\t\t// skip off-channel tokens\n\t\t\ti = this.previousTokenOnChannel(i - 1, this.channel);\n\t\t\tn++;\n\t\t}\n\n\t\tif (i < 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.tokens[i];\n\t}\n\n\t@Override\n\tpublic tryLT(k: number): Token | undefined {\n\t\t//System.out.println(\"enter LT(\"+k+\")\");\n\t\tthis.lazyInit();\n\t\tif (k === 0) {\n\t\t\tthrow new RangeError(\"0 is not a valid lookahead index\");\n\t\t}\n\n\t\tif (k < 0) {\n\t\t\treturn this.tryLB(-k);\n\t\t}\n\n\t\tlet i: number = this.p;\n\t\tlet n: number = 1; // we know tokens[p] is a good one\n\t\t// find k good tokens\n\t\twhile (n < k) {\n\t\t\t// skip off-channel tokens, but make sure to not look past EOF\n\t\t\tif (this.sync(i + 1)) {\n\t\t\t\ti = this.nextTokenOnChannel(i + 1, this.channel);\n\t\t\t}\n\t\t\tn++;\n\t\t}\n\n\t\t//\t\tif ( i>range ) range = i;\n\t\treturn this.tokens[i];\n\t}\n\n\t/** Count EOF just once. */\n\tpublic getNumberOfOnChannelTokens(): number {\n\t\tlet n: number = 0;\n\t\tthis.fill();\n\t\tfor (let t of this.tokens) {\n\t\t\tif (t.channel === this.channel) {\n\t\t\t\tn++;\n\t\t\t}\n\n\t\t\tif (t.type === Token.EOF) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn n;\n\t}\n}\n"]}